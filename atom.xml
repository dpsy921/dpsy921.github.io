<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>淡品岁月</title>
  
  <subtitle>CV工程师</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.danpinsuiyue.com/"/>
  <updated>2019-10-25T12:59:58.019Z</updated>
  <id>http://www.danpinsuiyue.com/</id>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Windows 中 Navicat Premium 12 破解</title>
    <link href="http://www.danpinsuiyue.com/2750860619.html"/>
    <id>http://www.danpinsuiyue.com/2750860619.html</id>
    <published>2019-06-19T03:22:24.000Z</published>
    <updated>2019-10-25T12:59:58.019Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于史上最专业的Windows 中 Navicat Premium 12 破解，包你一步到位，不在为激活码而烦恼</strong></p><a id="more"></a><h2 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h2><p>官网下载最新版本的 <a href="http://www.navicat.com.cn/download/navicat-premium" target="_blank" rel="noopener">Navicat Premium 12</a></p><p>然后安装到电脑</p><p>一路下一步</p><h2 id="破解"><a href="#破解" class="headerlink" title="破解"></a>破解</h2><p>安装好后先不要打开, 下载 破解工具, 链接: <a href="https://pan.baidu.com/s/1nvMMHa_pRVUAJR2IW8ufyg" target="_blank" rel="noopener">https://pan.baidu.com/s/1nvMMHa_pRVUAJR2IW8ufyg</a> 密码: iy9d</p><p>下载完成后解压, 找到自己安装的对应版本, 把里面的文件复制到Navicat根目录即可</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于史上最专业的Windows 中 Navicat Premium 12 破解，包你一步到位，不在为激活码而烦恼&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="软件" scheme="http://www.danpinsuiyue.com/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>深入面向对象</title>
    <link href="http://www.danpinsuiyue.com/3850728436.html"/>
    <id>http://www.danpinsuiyue.com/3850728436.html</id>
    <published>2019-03-01T14:37:16.000Z</published>
    <updated>2019-10-27T05:10:59.514Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于面向对象的类成员，特殊成员，反射，单例模式，异常处理等</strong></p><a id="more"></a><h2 id="类成员"><a href="#类成员" class="headerlink" title="类成员"></a>类成员</h2><p>1、类</p><ul><li>类变量</li><li>绑定方法</li><li>类方法</li><li>静态方法</li><li>属性</li></ul><p>2、实例（对象）</p><ul><li>实例变量</li></ul><h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><h3 id="类变量"><a href="#类变量" class="headerlink" title="类变量"></a>类变量</h3><p>定义：写在类的下一级和方法同一级</p><p>所有方法都能共享且唯一</p><p>使用</p><ul><li>类.类变量名称</li><li>对象.类变量名称</li></ul><p>练习</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">obj = Base()</span><br><span class="line"></span><br><span class="line">print(obj.x)<span class="comment"># 1</span></span><br><span class="line">obj.y = <span class="number">123</span></span><br><span class="line">print(oby.y)<span class="comment"># 123</span></span><br><span class="line">obj.x = <span class="number">123</span></span><br><span class="line">print(obj.x)<span class="comment"># 123</span></span><br><span class="line">print(Base.x)<span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child1</span><span class="params">(Paerent)</span></span></span><br><span class="line"><span class="class"><span class="title">pass</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Child2</span><span class="params">(Paerent)</span></span></span><br><span class="line"><span class="class"><span class="title">pass</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line">print(Parent.x,Child1.x,Child2.x)# 1,1,1</span><br><span class="line">Child1.x = <span class="number">2</span></span><br><span class="line">print(Parent.x,Child1.x,Child2.x)<span class="comment"># 1,2,1</span></span><br><span class="line">Child2.x = <span class="number">3</span></span><br><span class="line">print(Parent.x,Child1.x,Child2.x)<span class="comment"># 1,2,3</span></span><br></pre></td></tr></table></figure><p>总结：找变量优先找自己，自己没有找类或基类，修改或赋值只能在自己的内部设置</p><h3 id="方法（绑定方法或普通方法）"><a href="#方法（绑定方法或普通方法）" class="headerlink" title="方法（绑定方法或普通方法）"></a>方法（绑定方法或普通方法）</h3><p>定义：至少有一个self参数</p><p>执行：先创建对象，有对象.方法()</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self,a,b)</span>:</span></span><br><span class="line">        print(a,b)</span><br><span class="line">        </span><br><span class="line">obj = Foo()</span><br><span class="line">obj.func(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="number">123</span></span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self,a,b)</span></span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(self.name,a,b)</span></span></span><br><span class="line"><span class="function">        </span></span><br><span class="line">obj = Foo()</span><br><span class="line">obj.func(<span class="number">1</span>,<span class="number">2</span>)</span><br></pre></td></tr></table></figure><h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>定义：</p><ul><li>@staticmethod装饰器</li><li>参数无限制</li></ul><p>执行：</p><ul><li>类.静态方法名()</li><li>对象.静态方法名()(不推荐)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="number">123</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self,a,b)</span>:</span></span><br><span class="line">        print(self.name,a,b)</span><br><span class="line">        </span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">        print(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj.func(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Foo.f1()</span><br><span class="line">obj.f1()<span class="comment"># 不推荐</span></span><br></pre></td></tr></table></figure><h3 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h3><p>定义：</p><ul><li>@classmethod装饰器</li><li>至少有cls参数，当前类</li></ul><p>执行：</p><ul><li>类.类方法()</li><li>对象.类方法() (不推荐)</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="number">123</span></span><br><span class="line">        </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self,a,b)</span>:</span></span><br><span class="line">        print(self.name,a,b)</span><br><span class="line">        </span><br><span class="line"><span class="meta">@classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(cls,a,b)</span>:</span></span><br><span class="line">        print(<span class="string">"cls是当前类"</span>，cls)</span><br><span class="line">        print(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj.func(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">Foo.f1(<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">obj.f1(<span class="number">1</span>,<span class="number">2</span>)<span class="comment"># 不推荐</span></span><br></pre></td></tr></table></figure><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p>定义：</p><ul><li>@property装饰器</li><li>只有一个self参数</li></ul><p>执行：</p><ul><li>对象.方法 不需要加括号</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span><span class="title">Foo</span>:</span></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="number">123</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">33</span></span><br><span class="line">    </span><br><span class="line">obj = Foo()</span><br><span class="line">result = obj.func</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 类的应用</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Page</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, total_count, current_page, per_page_count=<span class="number">10</span>)</span>:</span>   <span class="comment"># 总的数据条数，当前页码</span></span><br><span class="line">        self.total_count = total_count  <span class="comment"># 总数据</span></span><br><span class="line">        self.current_page = current_page    <span class="comment"># 当前页码</span></span><br><span class="line">        self.per_page_count = per_page_count    <span class="comment"># 每页多少条</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">start_index</span><span class="params">(self)</span>:</span>  <span class="comment"># 开始页</span></span><br><span class="line">        <span class="keyword">return</span> (self.current_page - <span class="number">1</span>) * self.per_page_count</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">end_index</span><span class="params">(self)</span>:</span>    <span class="comment"># 结束页</span></span><br><span class="line">        <span class="keyword">return</span> self.current_page * self.per_page_count</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">USER_LIST = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">321</span>):    <span class="comment"># 321条数据放列表中</span></span><br><span class="line">    USER_LIST.append(<span class="string">'alex-%s'</span> % (i,))</span><br><span class="line"></span><br><span class="line"><span class="comment">#  请实现分页展示</span></span><br><span class="line">current_page = int(input(<span class="string">"请输入要查看的页码："</span>))</span><br><span class="line">p = Page(<span class="number">321</span>, current_page)</span><br><span class="line">data_list = USER_LIST[p.start_index:p.end_index]    <span class="comment"># 起始页、结束页的索引</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> data_list:  <span class="comment"># 循环打印</span></span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h2 id="成员修饰符"><a href="#成员修饰符" class="headerlink" title="成员修饰符"></a>成员修饰符</h2><p>公有，所有地方都能访问到</p><p>私有，只有自己可以访问到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(self.__name)</span><br><span class="line">        </span><br><span class="line">obj = Foo(<span class="string">'alex'</span>)</span><br><span class="line"><span class="comment"># print(obj.__name)# 错误</span></span><br><span class="line">obj.func()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">__x = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@staticmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">print(Foo.__x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(Foo.__x)# 错误</span></span><br><span class="line">Foo.fnc()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__fun</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'msg'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.__fun()</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"><span class="comment"># obj.__fun()# 错误</span></span><br><span class="line">obj.show()</span><br></pre></td></tr></table></figure><h2 id="类的嵌套"><a href="#类的嵌套" class="headerlink" title="类的嵌套"></a>类的嵌套</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,num)</span>:</span></span><br><span class="line">        self.num = num</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">cls_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    cls_list.append(Foo)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(len(cls_list)):</span><br><span class="line">    obj = cls_list[i](i)</span><br><span class="line">    print(obj.num) <span class="comment"># 0,1,2,3,4,5,6,7,8,9</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,num)</span>:</span></span><br><span class="line">        self.num = num</span><br><span class="line">        </span><br><span class="line">B = Foo</span><br><span class="line">obj = B(<span class="string">'alex'</span>)</span><br><span class="line">print(obj.num)<span class="comment"># alex</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'f1'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'f2'</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line">v = [ obj.f1,obj.f2 ]</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> v:</span><br><span class="line">    item()<span class="comment"># f1 f2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'f1'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'f2'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">(self)</span>:</span></span><br><span class="line">        v = [self.f1 , self.f2 ]</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> v:</span><br><span class="line">            item()</span><br><span class="line">            </span><br><span class="line">obj = Foo()</span><br><span class="line">obj.f3()<span class="comment"># f1 f2</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span>:</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        info = &#123;<span class="string">'1'</span>:self.register, <span class="string">'2'</span>:self.login &#125;</span><br><span class="line">        choice = input(<span class="string">'请选择:'</span>)</span><br><span class="line">        method = info.get(choice)</span><br><span class="line">        method()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在python3中这俩的写法是一样，因为所有的类默认都会继承object类，全部都是新式类。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果在python2中这样定义，则称其为：经典类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"><span class="comment"># 如果在python2中这样定义，则称其为：新式类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="强制访问私有实例变量"><a href="#强制访问私有实例变量" class="headerlink" title="强制访问私有实例变量"></a>强制访问私有实例变量</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.__x = name</span><br><span class="line"></span><br><span class="line">obj = Foo(<span class="string">'alex'</span>)</span><br><span class="line"></span><br><span class="line">print(obj._Foo__x) <span class="comment"># 强制访问私有实例变量</span></span><br></pre></td></tr></table></figure><h2 id="特殊成员"><a href="#特殊成员" class="headerlink" title="特殊成员"></a>特殊成员</h2><p>作用： 就是能够快速实现执行某些方法而生</p><h3 id="init"><a href="#init" class="headerlink" title="__init__"></a><code>__init__</code></h3><p>初始化方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    类是干啥的</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,a1)</span></span></span><br><span class="line"><span class="function">    """</span></span><br><span class="line"><span class="function">    初始化方法</span></span><br><span class="line"><span class="function">    """</span></span><br><span class="line">        self.a1 = a1</span><br><span class="line">        </span><br><span class="line">obj = Foo(<span class="string">'alex'</span>)</span><br></pre></td></tr></table></figure><h3 id="new"><a href="#new" class="headerlink" title="__new__"></a><code>__new__</code></h3><p>用于创建空的对象，构造方法</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        用于给对象中赋值，初始化方法</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        seif.a = <span class="number">123</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls,*args,**kwargs)</span>：</span></span><br><span class="line"><span class="function">    """</span></span><br><span class="line"><span class="function">    用于创建空的对象，构造方法</span></span><br><span class="line"><span class="function">    """</span></span><br><span class="line"><span class="function">        <span class="title">return</span> <span class="title">object</span>.<span class="title">__new__</span><span class="params">(cls)</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line">obj = Foo()</span><br></pre></td></tr></table></figure><h3 id="call"><a href="#call" class="headerlink" title="__call__"></a><code>__call__</code></h3><p>对象加括号可以直接执行</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self,*args,**kwargs)</span>；</span></span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(<span class="string">'执行call方法'</span>)</span></span></span><br><span class="line"><span class="function"># 执行方式一        </span></span><br><span class="line">obj = Foo</span><br><span class="line">obj()*</span><br><span class="line"><span class="comment"># 执行方式二</span></span><br><span class="line">Foo()()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 简易的网站</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(environ,start_response)</span>:</span></span><br><span class="line">    start_response(<span class="string">"200 OK"</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)])</span><br><span class="line">    <span class="keyword">return</span> [<span class="string">'你好'</span>.encode(<span class="string">"utf-8"</span>)  ]</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, environ,start_response)</span>:</span></span><br><span class="line">        start_response(<span class="string">"200 OK"</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/html; charset=utf-8'</span>)])</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">'你&lt;h1 style="color:red;"&gt;不好&lt;/h1&gt;'</span>.encode(<span class="string">"utf-8"</span>)]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作用：写一个网站，用户只要来方法，就自动找到第三个参数并执行。</span></span><br><span class="line">server = make_server(<span class="string">'127.0.0.1'</span>, <span class="number">8000</span>, Foo())</span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure><h3 id="getitem"><a href="#getitem" class="headerlink" title="__getitem__"></a><code>__getitem__</code></h3><p>用于索引操作，如字典。表示 获取 数据</p><h3 id="setitme"><a href="#setitme" class="headerlink" title="__setitme__"></a><code>__setitme__</code></h3><p>用于索引操作，如字典。表示 设置 数据</p><h3 id="delitem"><a href="#delitem" class="headerlink" title="__delitem__"></a><code>__delitem__</code></h3><p>用于索引操作，如字典。表示 删除 数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span><span class="params">(self, key, value)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span><span class="params">(self, item)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> item + <span class="string">'uuu'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span><span class="params">(self, key)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj1 = Foo()</span><br><span class="line">obj1[<span class="string">'k1'</span>] = <span class="number">123</span>  <span class="comment"># 内部会自动调用 __setitem__方法</span></span><br><span class="line">val = obj1[<span class="string">'xxx'</span>]  <span class="comment"># 内部会自动调用 __getitem__方法</span></span><br><span class="line">print(val)</span><br><span class="line"><span class="keyword">del</span> obj1[<span class="string">'ttt'</span>]  <span class="comment"># 内部会自动调用 __delitem__ 方法</span></span><br></pre></td></tr></table></figure><h3 id="str"><a href="#str" class="headerlink" title="__str__"></a><code>__str__</code></h3><p>只有在print对象时，会自动化调用此方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        只有在打印对象时，会自动化调用此方法，并将其返回值在页面显示出来</span></span><br><span class="line"><span class="string">        :return: </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'asdfasudfasdfsad'</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">print(obj)<span class="comment"># asdfasudfasdfsad</span></span><br></pre></td></tr></table></figure><h3 id="dict"><a href="#dict" class="headerlink" title="__dict__"></a><code>__dict__</code></h3><p>去对象中找到所有变量并将其转换为字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,age,email)</span></span></span><br><span class="line">    self.name = name</span><br><span class="line">        self.age = age</span><br><span class="line">        self.email = email</span><br><span class="line">        </span><br><span class="line">obj = Foo(<span class="string">'dpsy'</span>,<span class="number">23</span>,<span class="number">921921921</span>@qq.com) </span><br><span class="line">val = obj.__dict__</span><br><span class="line">print(val)</span><br><span class="line"><span class="comment"># &#123;'name': 'dpsy', 'age': 23, 'email': '921921921@qq.com'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="enter"><a href="#enter" class="headerlink" title="__enter__"></a><code>__enter__</code></h3><h3 id="exit"><a href="#exit" class="headerlink" title="__exit__"></a><code>__exit__</code></h3><p>上下文管理</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">do_something</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'内部执行'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Context</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'进入'</span>)</span><br><span class="line">        <span class="keyword">return</span> Foo()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        print(<span class="string">'推出'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Context() <span class="keyword">as</span> ctx:</span><br><span class="line">    print(<span class="string">'内部执行'</span>)</span><br><span class="line">    ctx.do_something()</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 读写文件</span></span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.x = open(<span class="string">'a.txt'</span>,mode=<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.x</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        self.x.close()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> Foo() <span class="keyword">as</span> ff:</span><br><span class="line">    ff.write(<span class="string">'dpsy'</span>)</span><br></pre></td></tr></table></figure><h3 id="add"><a href="#add" class="headerlink" title="__add__"></a><code>__add__</code></h3><p>两个对象相加</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">val = <span class="number">5</span> + <span class="number">8</span></span><br><span class="line">print(val)</span><br><span class="line"></span><br><span class="line">val = <span class="string">"大王八"</span> + <span class="string">"一万年"</span></span><br><span class="line">print(val)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__add__</span><span class="params">(self, other)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">    </span><br><span class="line">obj1 = Foo()</span><br><span class="line">obj2 = Foo()</span><br><span class="line">val  = obj1 + obj2</span><br><span class="line">print(val)</span><br></pre></td></tr></table></figure><h2 id="约束（抽象类-接口类）"><a href="#约束（抽象类-接口类）" class="headerlink" title="约束（抽象类/接口类）"></a>约束（抽象类/接口类）</h2><p>约束子类中必须写父类中指定的方法，如果不写，则调用时候就报NotImplementedError</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Interface</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">"子类中没有send"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Message</span><span class="params">(Interface)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"发送短信"</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span><span class="params">(Interface)</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">obj = Message()</span><br><span class="line">obj1 = Email()<span class="comment"># 123</span></span><br><span class="line"></span><br><span class="line">obj.send()<span class="comment"># 发送短信</span></span><br><span class="line">obj1.send()<span class="comment"># NotImplementedError: 子类中没有send</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseMessage</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self,a1)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> NotImplementedError(<span class="string">'字类中必须有send方法'</span>)</span><br><span class="line">        </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Msg</span><span class="params">(BaseMessage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span><span class="params">(BaseMessage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Wechat</span><span class="params">(BaseMessage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DingDing</span><span class="params">(BaseMessage)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'钉钉'</span>)</span><br><span class="line">    </span><br><span class="line">obj = Email()</span><br><span class="line">obj.send()</span><br></pre></td></tr></table></figure><h2 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h2><p>​ 根据字符串的形式去某个对象中操作他的成员</p><p>​ 通过 对象 来获取 实例变量、绑定方法</p><p>​ 通过 类 来获取 类变量、类方法、静态方法</p><p>​ 通过 模块名 来获取 模块中的任意变量（普通变量 函数 类）</p><p>​ 通过 本文件 来获取 本文件中的任意变量</p><p>​ # getattr(sys.modules[<strong>name</strong>],’变量名’)</p><h3 id="getatter（对象，”字符串”）"><a href="#getatter（对象，”字符串”）" class="headerlink" title="getatter（对象，”字符串”）"></a>getatter（对象，”字符串”）</h3><p>根据字符串的形式去某个对象中获取对象的成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line">obj = Foo(<span class="string">'sd'</span>)</span><br><span class="line"><span class="comment"># 获取变量</span></span><br><span class="line">v1 = getattr(obj,<span class="string">'name'</span>)</span><br><span class="line">print(v1)</span><br><span class="line"><span class="comment"># 获取方法</span></span><br><span class="line">method_name = getattr(obj,<span class="string">'login'</span>)</span><br><span class="line">method_name()</span><br></pre></td></tr></table></figure><h3 id="hasattr（对象，”字符串”）"><a href="#hasattr（对象，”字符串”）" class="headerlink" title="hasattr（对象，”字符串”）"></a>hasattr（对象，”字符串”）</h3><p>根据字符串的形式去某个对象中判断是否有该成员，如果对象有该属性返回 True，否则返回 False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">print(hasattr(obj,<span class="string">'a'</span>))</span><br><span class="line">print(hasattr(obj,<span class="string">'b'</span>))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用</span></span><br><span class="line"><span class="keyword">from</span> wsgiref.simple_server <span class="keyword">import</span> make_server</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">View</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'登陆'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">logout</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'等处'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'首页'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(environ,start_response)</span>:</span></span><br><span class="line">    start_response(<span class="string">"200 OK"</span>, [(<span class="string">'Content-Type'</span>, <span class="string">'text/plain; charset=utf-8'</span>)])</span><br><span class="line">    <span class="comment">#</span></span><br><span class="line">    obj = View()</span><br><span class="line">    <span class="comment"># 获取用户输入的URL</span></span><br><span class="line">    method_name = environ.get(<span class="string">'PATH_INFO'</span>).strip(<span class="string">'/'</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> hasattr(obj,method_name):</span><br><span class="line">        <span class="keyword">return</span> [<span class="string">"sdf"</span>.encode(<span class="string">"utf-8"</span>),]</span><br><span class="line">    response = getattr(obj,method_name)()</span><br><span class="line">    <span class="keyword">return</span> [response.encode(<span class="string">"utf-8"</span>)  ]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 作用：写一个网站，用户只要来方法，就自动找到第三个参数并执行。</span></span><br><span class="line">server = make_server(<span class="string">'192.168.12.87'</span>, <span class="number">8000</span>, func)</span><br><span class="line">server.serve_forever()</span><br></pre></td></tr></table></figure><h3 id="satattr（对象，’变量’，’值’）"><a href="#satattr（对象，’变量’，’值’）" class="headerlink" title="satattr（对象，’变量’，’值’）"></a>satattr（对象，’变量’，’值’）</h3><p>根据字符串的形式去某个对象中设置成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    k1 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">setattr(obj,<span class="string">'k1'</span>,<span class="number">123</span>)<span class="comment"># 相当于obj.k1 = 123</span></span><br><span class="line">print(obj.k1)</span><br></pre></td></tr></table></figure><h3 id="delattr（对象，’变量’）"><a href="#delattr（对象，’变量’）" class="headerlink" title="delattr（对象，’变量’）"></a>delattr（对象，’变量’）</h3><p>根据字符串的形式去某个对象中删除成员</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    k1 = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">delattr(obj,<span class="string">'k1'</span>)</span><br><span class="line">print(obj.k1)</span><br></pre></td></tr></table></figure><p>python一切皆对象，所以以后想要通过字符串的形式操作其内部成员都可以通过反射的机制实现。</p><ul><li>py文件</li><li>包</li><li>类</li><li>对象</li></ul><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>无论实例化多少次，永远用的都是第一次实例化出的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多例，每实例化一次就创建一个新的对象。</span></span><br><span class="line">obj1 = Foo() <span class="comment"># 实例，对象</span></span><br><span class="line">obj2 = Foo() <span class="comment"># 实例，对象</span></span><br><span class="line"><span class="comment"># 单例，无论实例化多少次，都用第一次创建的那个对象。</span></span><br><span class="line">obj1 = Foo()</span><br><span class="line">obj2 = Foo()</span><br></pre></td></tr></table></figure><h3 id="单例的标准"><a href="#单例的标准" class="headerlink" title="单例的标准"></a>单例的标准</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">无论实例化多少次，永远用的都是第一次实例化出的对象</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span>:</span></span><br><span class="line">    __instance = <span class="literal">None</span></span><br><span class="line">    l = RLock()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="comment"># 加这个判断的好处，减少资源浪费，加入没有这个判断再有线程进来先加锁在取判断，这样对象存在直接返回</span></span><br><span class="line">        <span class="keyword">if</span> cls.__instance:</span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line">        <span class="keyword">with</span> cls.lock:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> cls.__instance:</span><br><span class="line">                cls.__instance = object.__new__(cls)</span><br><span class="line">            <span class="keyword">return</span> cls.__instance</span><br><span class="line">obj = Singleton()</span><br></pre></td></tr></table></figure><h3 id="文件的连接池"><a href="#文件的连接池" class="headerlink" title="文件的连接池"></a>文件的连接池</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileHelper</span><span class="params">(object)</span>:</span></span><br><span class="line">    instance = <span class="literal">None</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path)</span>:</span></span><br><span class="line">        self.file_object = open(path,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> cls.instance:</span><br><span class="line">            cls.instance = object.__new__(cls)</span><br><span class="line">        <span class="keyword">return</span> cls.instance</span><br><span class="line"></span><br><span class="line">obj1 = FileHelper(<span class="string">'x'</span>)</span><br><span class="line">obj2 = FileHelper(<span class="string">'x'</span>)</span><br></pre></td></tr></table></figure><p>通过模块导入的特性也可以实现单列模式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jd.py 自定义模块</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># app.py导入模块</span></span><br><span class="line"><span class="keyword">import</span> jd <span class="comment"># 加载jd.py，加载最后会实例化一个Foo对象并赋值给obj</span></span><br><span class="line">print(jd.obj)</span><br></pre></td></tr></table></figure><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    v = []</span><br><span class="line">    v[<span class="number">11111</span>] <span class="comment"># IndexError</span></span><br><span class="line"><span class="keyword">except</span> ValueError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e) <span class="comment"># e是Exception类的对象，中有一个错误信息。</span></span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    print(<span class="string">'最后无论对错都会执行'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习一</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    ret = requests.get(<span class="string">'http://www.google.com'</span>)</span><br><span class="line">    print(ret.text)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(<span class="string">'请求异常'</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 练习二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">return</span> a.strip()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">v = func(<span class="string">'alex'</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> v:</span><br><span class="line">    print(<span class="string">'函数执行失败'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'结果是'</span>,v)</span><br></pre></td></tr></table></figure><h3 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. 写函数，函数接受一个列表，请将列表中的元素每个都 +100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> arg:</span><br><span class="line">        <span class="keyword">if</span> item.isdecimal():</span><br><span class="line">            result.append(int(item) + <span class="number">100</span>)</span><br><span class="line"><span class="keyword">return</span> result </span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 写函数去，接受一个列表。列表中都是url，请访问每个地址并获取结果。</span></span><br><span class="line"><span class="keyword">import</span> requests </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(url_list)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">            response = requests.get(url)</span><br><span class="line">            result.append(response.text)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">return</span> result </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(url_list)</span>:</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> url_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url)</span><br><span class="line">            result.append(response.text)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">return</span> result </span><br><span class="line"></span><br><span class="line">func([<span class="string">'http://www.baidu.com'</span>,<span class="string">'http://www.google.com'</span>,<span class="string">'http://www.bing.com'</span>])</span><br></pre></td></tr></table></figure><h3 id="主动触发异常"><a href="#主动触发异常" class="headerlink" title="主动触发异常"></a>主动触发异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    int(<span class="string">'123'</span>)</span><br><span class="line">    <span class="keyword">raise</span> Exception(<span class="string">'阿萨大大是阿斯蒂'</span>) <span class="comment"># 代码中主动抛出异常</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 实例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    result = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'x.log'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'alex'</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">raise</span> Exception()</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        result = <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> result</span><br></pre></td></tr></table></figure><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 实例一</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyException(<span class="string">'asdf'</span>)</span><br><span class="line"><span class="keyword">except</span> MyException <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 实例二</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,message)</span>:</span></span><br><span class="line">        super().__init__()</span><br><span class="line">        self.message = message</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> MyException(<span class="string">'asdf'</span>)</span><br><span class="line"><span class="keyword">except</span> MyException <span class="keyword">as</span> e:</span><br><span class="line">    print(e.message)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于面向对象的类成员，特殊成员，反射，单例模式，异常处理等&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中的面向对象是谁的对象</title>
    <link href="http://www.danpinsuiyue.com/3427980016.html"/>
    <id>http://www.danpinsuiyue.com/3427980016.html</id>
    <published>2019-03-01T13:37:16.000Z</published>
    <updated>2019-10-27T05:11:19.091Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于Python中什么是面向对象，为什么要有面向对象，面向对象的三大特性</strong></p><a id="more"></a><h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><h3 id="面向过程和面向对象"><a href="#面向过程和面向对象" class="headerlink" title="面向过程和面向对象"></a>面向过程和面向对象</h3><p>面向过程的程序设计的核心是过程（流水线式思维），过程即解决问题的步骤，面向过程的设计就好比精心设计好一条流水线，考虑周全什么时候处理什么东西。</p><p><strong>优点是：极大的降低了写程序的复杂度，只需要顺着要执行的步骤，堆叠代码即可。</strong></p><p><strong>缺点是：一套流水线或者流程就是用来解决一个问题，代码牵一发而动全身。</strong></p><p>应用场景：一旦完成基本很少改变的场景，著名的例子有Linux內核，git，以及Apache HTTP Server等。</p><p>面向对象的程序设计的核心是对象（上帝式思维），要理解对象为何物，必须把自己当成上帝，上帝眼里世间存在的万物皆为对象，不存在的也可以创造出来。面向对象的程序设计好比如来设计西游记，如来要解决的问题是把经书传给东土大唐，如来想了想解决这个问题需要四个人：唐僧，沙和尚，猪八戒，孙悟空，每个人都有各自的特征和技能（这就是对象的概念，特征和技能分别对应对象的属性和方法），然而这并不好玩，于是如来又安排了一群妖魔鬼怪，为了防止师徒四人在取经路上被搞死，又安排了一群神仙保驾护航，这些都是对象。然后取经开始，师徒四人与妖魔鬼怪神仙互相缠斗着直到最后取得真经。如来根本不会管师徒四人按照什么流程去取。</p><p>面向对象的程序设计的</p><p><strong>优点是：解决了程序的扩展性。对某一个对象单独修改，会立刻反映到整个体系中，如对游戏中一个人物参数的特征和技能修改都很容易。</strong></p><p><strong>缺点：可控性差，无法向面向过程的程序设计流水线式的可以很精准的预测问题的处理流程与结果，面向对象的程序一旦开始就由对象之间的交互解决问题</strong>，<strong>即便是上帝也无法预测最终结果。于是我们经常看到一个游戏人某一参数的修改极有可能导致阴霸的技能出现，一刀砍死3个人，这个游戏就失去平衡。</strong></p><p>应用场景：需求经常变化的软件，一般需求的变化都集中在用户层，互联网应用，企业内部软件，游戏等都是面向对象的程序设计大显身手的好地方。</p><p>在python 中面向对象的程序设计并不是全部。</p><p>面向对象编程可以使程序的维护和扩展变得更简单，并且可以大大提高程序开发效率 ，另外，基于面向对象的程序可以使它人更加容易理解你的代码逻辑，从而使团队开发变得更从容。</p><p>了解一些名词：类、对象、实例、实例化</p><p>类：具有相同特征的一类事物(人、狗、老虎)</p><p>对象／实例：具体的某一个事物（隔壁阿花、楼下旺财）</p><p>实例化：类——&gt;对象的过程（这在生活中表现的不明显，我们在后面再慢慢解释）</p><p>###</p><h3 id="面向对象基本格式"><a href="#面向对象基本格式" class="headerlink" title="面向对象基本格式"></a>面向对象基本格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 定义</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> 类名：# 类名首字母大写</span></span><br><span class="line"><span class="class"><span class="title">def</span> 方法名<span class="params">(self,name)</span>:</span><span class="comment"># self不用传参，name必须传参</span></span><br><span class="line">        print(name)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> 方法名<span class="params">(self,name)</span>:</span></span><br><span class="line">        print(name)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">456</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 调用类的方法</span></span><br><span class="line"><span class="number">1.</span>创建类的对象 <span class="comment"># 实例化</span></span><br><span class="line">obj = 类名()</span><br><span class="line"><span class="number">2.</span>通过对象调用方法</span><br><span class="line">result = obj.方法名(<span class="string">'dpsy'</span>) <span class="comment"># 使用对象调用类的方法</span></span><br><span class="line">print(result) <span class="comment"># 返回值</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习题</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Db</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_read</span><span class="params">(self)</span>:</span> <span class="comment"># 阅读</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_write</span><span class="params">(self)</span>:</span> <span class="comment"># 写</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_delete</span><span class="params">(self)</span>:</span> <span class="comment"># 删除</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">db_update</span><span class="params">(self)</span>:</span> <span class="comment"># 更新</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span>:</span> <span class="comment"># 文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_read</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_write</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">file_delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">file_update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Redis</span>:</span> <span class="comment"># 数据库</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">redis_read</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">redis_write</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">redis_delete</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">redis_update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="对象的作用"><a href="#对象的作用" class="headerlink" title="对象的作用"></a>对象的作用</h3><p>1、存储一些值，以后方便自己使用</p><p>2、将数据封装到对象，方便使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(self.wenjian,mode=<span class="string">"r"</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            data = f.read()</span><br><span class="line">     <span class="keyword">return</span> data</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">write</span><span class="params">(self,content)</span>:</span></span><br><span class="line">        <span class="keyword">with</span> open(self.wenjian,mode=<span class="string">'a'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            f.write(content)</span><br><span class="line"><span class="comment"># 实例化一个File的对象</span></span><br><span class="line">obj2 = File()</span><br><span class="line"><span class="comment"># 在对象中写一个wenjian = "test.txt"</span></span><br><span class="line">obj2.wenjian = <span class="string">"info.txt"</span></span><br><span class="line"><span class="comment"># 通过对象调用类中的read方法，read方法中的self就是obj.read()</span></span><br><span class="line">obj2.write(<span class="string">"dpsy"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        temp = <span class="string">"我是:%s,年龄:%s,性别:%s"</span>%(self.name,self.age,self.gender)</span><br><span class="line">        print(temp)</span><br><span class="line">        </span><br><span class="line">p1 = Person()</span><br><span class="line">p1.name = <span class="string">"公鸡"</span></span><br><span class="line">p1.age = <span class="number">65</span></span><br><span class="line">p1.gender = <span class="string">"中"</span></span><br><span class="line">p1.show()</span><br><span class="line"></span><br><span class="line">p2 = Person()</span><br><span class="line">p2.name = <span class="string">"母鸡"</span></span><br><span class="line">p2.age = <span class="number">18</span></span><br><span class="line">p2.gender = <span class="string">"母"</span></span><br><span class="line">p2.show()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 我是:公鸡,年龄:65,性别:中</span></span><br><span class="line"><span class="comment"># 我是:母鸡,年龄:18,性别:母</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,n,a,g)</span>:</span> <span class="comment"># 初始化方法（构造方法），给对象的内部做初始化</span></span><br><span class="line">        self.name = n</span><br><span class="line">        self.age = a</span><br><span class="line">        self.gender = g</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(self)</span>:</span></span><br><span class="line">        temp = <span class="string">"我是:%s,年龄:%s,性别:%s"</span>%(self.name,self.age,self.gender)</span><br><span class="line">        print(temp)</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 类（）实例化对象，自动执行此类中的__init__方法</span></span><br><span class="line">p1 = Person(<span class="string">"公鸡"</span>，<span class="number">18</span>，<span class="string">"公"</span>)</span><br><span class="line">p1.show()</span><br><span class="line"></span><br><span class="line">p2 = Person(<span class="string">"母鸡"</span>，<span class="number">6</span>，<span class="string">"母"</span>)</span><br><span class="line">p2.show()</span><br><span class="line"></span><br><span class="line">我是:公鸡,年龄:<span class="number">18</span>,性别:公</span><br><span class="line">我是:母鸡,年龄:<span class="number">6</span>,性别:母</span><br></pre></td></tr></table></figure><h2 id="面向对象的三大特性"><a href="#面向对象的三大特性" class="headerlink" title="面向对象的三大特性"></a>面向对象的三大特性</h2><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><p>继承是一种创建新类的方式，在python中，新建的类可以继承一个或多个父类，父类又可称为基类或超类，新建的类称为派生类或子类</p><p>python中类的继承分为：单继承和多继承</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass1</span>:</span> <span class="comment">#定义父类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ParentClass2</span>:</span> <span class="comment">#定义父类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass1</span><span class="params">(ParentClass1)</span>:</span> <span class="comment">#单继承，基类是ParentClass1，派生类是SubClass</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubClass2</span><span class="params">(ParentClass1,ParentClass2)</span>:</span> <span class="comment">#python支持多继承，用逗号分隔开多个继承的类</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>查看继承</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; SubClass1.__bases_<span class="number">_</span> <span class="comment">#__base__只查看从左到右继承的第一个子类，__bases__则是查看所有继承的父类</span></span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">ParentClass1</span>'&gt;,)</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; SubClass2.__bases_<span class="number">_</span></span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">ParentClass1</span>'&gt;, &lt;class '<span class="title">__main__</span>.<span class="title">ParentClass2</span>'&gt;)</span></span><br></pre></td></tr></table></figure><p>提示：如果没有指定基类，python的类会默认继承object类，object是所有python类的基类，它提供了一些常见方法（如<strong>str</strong>）的实现。</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;</span>&gt; ParentClass1.__bases_<span class="number">_</span></span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> '<span class="title">object</span>'&gt;,)</span></span><br><span class="line"><span class="meta">&gt;&gt;</span>&gt; ParentClass2.__bases_<span class="number">_</span></span><br><span class="line">(&lt;<span class="class"><span class="keyword">class</span> '<span class="title">object</span>'&gt;,)</span></span><br></pre></td></tr></table></figure><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>封装，顾名思义就是将内容封装到某个地方，以后再去调用被封装在某处的内容。</p><p>所以，在使用面向对象的封装特性时，需要：</p><ul><li>将内容封装到某处</li><li>从某处调用被封装的内容</li></ul><p><strong>第一步：将内容封装到某处</strong></p><p><img src="https://images0.cnblogs.com/blog2015/425762/201508/271641407509817.jpg" alt="img"></p><p>self 是一个形式参数，当执行 obj1 = Foo(‘wupeiqi’, 18 ) 时，self 等于 obj1</p><p>​ 当执行 obj2 = Foo(‘alex’, 78 ) 时，self 等于 obj2</p><p>所以，内容其实被封装到了对象 obj1 和 obj2 中，每个对象中都有 name 和 age 属性，在内存里类似于下图来保存。</p><p><img src="https://images0.cnblogs.com/blog2015/425762/201508/271653303446704.jpg" alt="img"></p><p><strong>第二步：从某处调用被封装的内容</strong></p><p>调用被封装的内容时，有两种情况：</p><ul><li>通过对象直接调用</li><li>通过self间接调用</li></ul><p>1、通过对象直接调用被封装的内容</p><p>上图展示了对象 obj1 和 obj2 在内存中保存的方式，根据保存格式可以如此调用被封装的内容：对象.属性名</p><p>2、通过self间接调用被封装的内容</p><p>执行类中的方法时，需要通过self间接调用被封装的内容</p><p><strong>综上所述，对于面向对象的封装来说，其实就是使用构造方法将内容封装到 对象 中，然后通过对象直接或者self间接获取被封装的内容。</strong></p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><p>多态指的是一类事物有多种形态</p><p>动物有多种形态：人，狗，猪</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> abc</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">File</span><span class="params">(metaclass=abc.ABCMeta)</span>:</span> <span class="comment">#同一类事物:文件</span></span><br><span class="line"><span class="meta">    @abc.abstractmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Text</span><span class="params">(File)</span>:</span> <span class="comment">#文件的形态之一:文本文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'open file'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExeFile</span><span class="params">(File)</span>:</span> <span class="comment">#文件的形态之二:可执行文件</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">click</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'execute file'</span>)</span><br></pre></td></tr></table></figure><p>在面向对象方法中一般是这样表述多态性：<br>向不同的对象发送同一条消息（！！！obj.func():是调用了obj的方法func，又称为向obj发送了一条消息func），不同的对象在接收时会产生不同的行为（即方法）。<br>也就是说，每个对象可以用自己的方式去响应共同的消息。所谓消息，就是调用函数，不同的行为就是指不同的实现，即执行不同的函数。</p><p>比如：老师.下课铃响了（），学生.下课铃响了()，老师执行的是下班操作，学生执行的是放学操作，虽然二者消息一样，但是执行的效果不同</p><p><strong>鸭子类型</strong></p><p>逗比时刻：</p><p>Python崇尚鸭子类型，即‘如果看起来像、叫声像而且走起路来像鸭子，那么它就是鸭子’</p><p>python程序员通常根据这种行为来编写程序。例如，如果想编写现有对象的自定义版本，可以继承该对象</p><p>也可以创建一个外观和行为像，但与它无任何关系的全新对象，后者通常用于保存程序组件的松耦合度。</p><p>例1：利用标准库中定义的各种‘与文件类似’的对象，尽管这些对象的工作方式像文件，但他们没有继承内置文件对象的方法</p><p>例2：序列类型有多种形态：字符串，列表，元组，但他们直接没有直接的继承关系</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于Python中什么是面向对象，为什么要有面向对象，面向对象的三大特性&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python基础模块大全</title>
    <link href="http://www.danpinsuiyue.com/2354286169.html"/>
    <id>http://www.danpinsuiyue.com/2354286169.html</id>
    <published>2019-02-25T13:37:16.000Z</published>
    <updated>2019-10-27T05:11:33.716Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于Python中函数的random 、hashlib、time /datetime等模块是干甚的，以及内部的方法怎么使用</strong></p><a id="more"></a><h2 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h2><p>返回随机生成的一个实数</p><h3 id="random-randint"><a href="#random-randint" class="headerlink" title="random.randint"></a>random.randint</h3><p>返回随机生成的一个实数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random<span class="comment">#调用模块</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_random_code</span><span class="params">(length=<span class="number">6</span>)</span>:</span><span class="comment">#变量为6</span></span><br><span class="line">    data = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(length):<span class="comment">#循环6次</span></span><br><span class="line">        v = random.randint(<span class="number">65</span>,<span class="number">90</span>)<span class="comment">#生成65-90之间随机数字</span></span><br><span class="line">        data.append(chr(v))<span class="comment">#将v变为字符追加到data列表中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>  <span class="string">''</span>.join(data)<span class="comment">#将列表中元素链接，变为空字符串</span></span><br><span class="line"></span><br><span class="line">code = get_random_code()</span><br><span class="line">print(code)<span class="comment">#6位随机字符</span></span><br></pre></td></tr></table></figure><h3 id="random-choice"><a href="#random-choice" class="headerlink" title="random.choice"></a>random.choice</h3><p>从序列中随机抽选一个函数 验证码，抽奖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.choice([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]))</span><br></pre></td></tr></table></figure><h3 id="random-sample"><a href="#random-sample" class="headerlink" title="random.sample"></a>random.sample</h3><p>一个奖项多个人</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.sample([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>],<span class="number">3</span>)) <span class="comment"># [3, 2, 4]</span></span><br></pre></td></tr></table></figure><h3 id="random-uniform"><a href="#random-uniform" class="headerlink" title="random.uniform"></a>random.uniform</h3><p>随机小数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line">print(random.uniform(<span class="number">1</span>,<span class="number">5</span>))<span class="comment"># 3.599380534928744</span></span><br></pre></td></tr></table></figure><h3 id="random-shuffle"><a href="#random-shuffle" class="headerlink" title="random.shuffle"></a>random.shuffle</h3><p>将序列顺序打乱 洗牌</p><h3 id="random-random"><a href="#random-random" class="headerlink" title="random.random"></a>random.random</h3><p>生成0和1之间的随机浮点数float</p><h2 id="hashlib模块"><a href="#hashlib模块" class="headerlink" title="hashlib模块"></a>hashlib模块</h2><p>摘要算法模块 Hmac算法</p><h3 id="md5-sha"><a href="#md5-sha" class="headerlink" title="md5/sha"></a>md5/sha</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">md5 = hashlib.sha1(<span class="string">'盐'</span>.encode())</span><br><span class="line">md5.update(<span class="string">b'str'</span>)</span><br><span class="line">print(md5.hexdigest())</span><br></pre></td></tr></table></figure><p>两个文件的md5值是相同的</p><figure class="highlight q"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import hashlib</span><br><span class="line"></span><br><span class="line"><span class="built_in">md5</span> = hashlib.<span class="built_in">md5</span>()</span><br><span class="line">#<span class="built_in">md5</span>.<span class="keyword">update</span>('hello'.encode())</span><br><span class="line">#<span class="built_in">md5</span>.<span class="keyword">update</span>('wusir'.encode())</span><br><span class="line"><span class="built_in">md5</span>.<span class="keyword">update</span>('hello,wusir'.encode())</span><br><span class="line"># <span class="number">46879507</span>bf541e351209c0cd56ac160e</span><br><span class="line"><span class="number">46879507</span>bf541e351209c0cd56ac160e</span><br><span class="line">print(<span class="built_in">md5</span>.hexdigest())</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将指定的 “字符串” 进行加密</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span><span class="params">(data)</span>:</span></span><br><span class="line">    obj = hashlib.md5()<span class="comment">#md5对象，md5不能反解，但是加密是固定的，就是关系是一一对应，所以有缺陷，可以被对撞出来，如果没有参数，所以md5遵守一个规则，生成同一个对应关系，</span></span><br><span class="line">    <span class="comment">#如果加了参数，就是在原先加密的基础上再加密一层，这样的话参数只有自己知道，防止被撞库。</span></span><br><span class="line">    obj.update(data.encode(<span class="string">'utf-8'</span>))<span class="comment">#要对哪个字符串进行加密，就放这里</span></span><br><span class="line">    result = obj.hexdigest()<span class="comment">#拿到加密字符串</span></span><br><span class="line">    <span class="keyword">return</span> result<span class="comment"># 返回加密字符串</span></span><br><span class="line"></span><br><span class="line">val = get_md5(<span class="string">'123'</span>)</span><br><span class="line">print(val)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 应用，用户登录</span></span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line">USER_LIST = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_md5</span><span class="params">(data)</span>:</span></span><br><span class="line">    obj = hashlib.md5(<span class="string">"12:;4436ff123ad"</span>.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    obj.update(data.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    result = obj.hexdigest()</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'**************用户注册**************'</span>)<span class="comment">#提示</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:<span class="comment">#循环注册</span></span><br><span class="line">        user = input(<span class="string">'请输入用户名:'</span>)<span class="comment">#输入</span></span><br><span class="line">        <span class="keyword">if</span> user == <span class="string">'N'</span>:<span class="comment">#判断输入是否为N</span></span><br><span class="line">            <span class="keyword">return</span><span class="comment">#结束循环、函数</span></span><br><span class="line">        pwd = input(<span class="string">'请输入密码:'</span>)<span class="comment">#输入密码</span></span><br><span class="line">        temp = &#123;<span class="string">'username'</span>:user,<span class="string">'password'</span>:get_md5(pwd)&#125;<span class="comment">#用户名和密码通过加密放在字典里</span></span><br><span class="line">        USER_LIST.append(temp)<span class="comment">#将字典追加到列表里</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'**************用户登陆**************'</span>)<span class="comment">#提示</span></span><br><span class="line">    user = input(<span class="string">'请输入用户名:'</span>)<span class="comment">#输入</span></span><br><span class="line">    pwd = input(<span class="string">'请输入密码:'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> USER_LIST:<span class="comment">#循环列表里的字典</span></span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">'username'</span>] == user <span class="keyword">and</span> item[<span class="string">'password'</span>] == get_md5(pwd):<span class="comment">#比较输入的内容与字典里是否一样</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">register()</span><br><span class="line">result = login()</span><br><span class="line"><span class="keyword">if</span> result:<span class="comment">#判断返回值是否为真</span></span><br><span class="line">    print(<span class="string">'登陆成功'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'登陆失败'</span>)</span><br></pre></td></tr></table></figure><h3 id="hmac"><a href="#hmac" class="headerlink" title="hmac"></a>hmac</h3><p>输出的长度和原始哈希算法的长度一致。需要注意传入的key和message都是<code>bytes</code>类型，<code>str</code>类型需要首先编码为<code>bytes</code>。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hmac</span><br><span class="line">message = <span class="string">b'Hello world'</span></span><br><span class="line">key = <span class="string">b'secret'</span></span><br><span class="line">h = hmac.new(key,message,digestmod=<span class="string">'MD5'</span>)</span><br><span class="line">print(h.hexdigest())</span><br></pre></td></tr></table></figure><h2 id="time-datetime模块"><a href="#time-datetime模块" class="headerlink" title="time  /datetime模块"></a>time /datetime模块</h2><p>时间模块</p><h3 id="time-time"><a href="#time-time" class="headerlink" title="time.time"></a>time.time</h3><p>时间戳</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time </span><br><span class="line"></span><br><span class="line">v = time.time() <span class="comment"># 时间戳：1970-1-1 00:00</span></span><br></pre></td></tr></table></figure><h3 id="time-timezone"><a href="#time-timezone" class="headerlink" title="time.timezone"></a>time.timezone</h3><p>当前时区与时间戳相差的秒数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line">print(time.timezone)<span class="comment"># -28800</span></span><br></pre></td></tr></table></figure><h3 id="time-sleep"><a href="#time-sleep" class="headerlink" title="time.sleep"></a>time.sleep</h3><p>睡几秒</p><h3 id="datetime-now"><a href="#datetime-now" class="headerlink" title="datetime.now"></a>datetime.now</h3><p>当前本地时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">v1 = datetime.now()</span><br><span class="line">print(v1)<span class="comment"># 2019-04-18 17:52:33.046206</span></span><br></pre></td></tr></table></figure><h3 id="timezone"><a href="#timezone" class="headerlink" title="timezone"></a>timezone</h3><p>获取东几区时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timezone,timedelta</span><br><span class="line"></span><br><span class="line">tz = timezone(timedelta(hours=<span class="number">7</span>)) <span class="comment"># 当前东7区时间</span></span><br><span class="line">v2 = datetime.now(tz)</span><br></pre></td></tr></table></figure><h3 id="datetime-utcnow"><a href="#datetime-utcnow" class="headerlink" title="datetime.utcnow"></a>datetime.utcnow</h3><p>当前UTC时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timezone,timedelta</span><br><span class="line"></span><br><span class="line">v3 = datetime.utcnow() <span class="comment"># 当前UTC时间</span></span><br><span class="line">print(v3)</span><br></pre></td></tr></table></figure><h3 id="strftime"><a href="#strftime" class="headerlink" title="strftime"></a>strftime</h3><p>把datetime格式转换成字符串</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timezone,timedelta</span><br><span class="line"></span><br><span class="line">v1 = datetime.now()</span><br><span class="line">print(v1,type(v1))</span><br><span class="line">val = v1.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>)</span><br><span class="line">print(val)</span><br></pre></td></tr></table></figure><h3 id="datetime-strptime"><a href="#datetime-strptime" class="headerlink" title="datetime.strptime"></a>datetime.strptime</h3><p>字符串转成datetime</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timezone,timedelta</span><br><span class="line"></span><br><span class="line">v1 = datetime.strptime(<span class="string">'2011-11-11'</span>,<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">print(v1,type(v1))</span><br></pre></td></tr></table></figure><h3 id="timedelta"><a href="#timedelta" class="headerlink" title="timedelta"></a>timedelta</h3><p>datetime时间的加减</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timezone,timedelta</span><br><span class="line"></span><br><span class="line">v1 = datetime.strptime(<span class="string">'2011-11-11'</span>,<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">v2 = v1 - timedelta(days=<span class="number">140</span>)</span><br><span class="line">date = v2.strftime(<span class="string">'%Y-%m-%d'</span>)</span><br><span class="line">print(date)</span><br></pre></td></tr></table></figure><h3 id="时间戳和datetime关系"><a href="#时间戳和datetime关系" class="headerlink" title="时间戳和datetime关系"></a>时间戳和datetime关系</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime,timezone,timedelta</span><br><span class="line"></span><br><span class="line">ctime = time.time()</span><br><span class="line">print(ctime)</span><br><span class="line">v1 = datetime.fromtimestamp(ctime)</span><br><span class="line">print(v1)</span><br><span class="line"></span><br><span class="line">v1 = datetime.now()</span><br><span class="line">val = v1.timestamp()</span><br><span class="line">print(val)</span><br></pre></td></tr></table></figure><h2 id="getpass模块"><a href="#getpass模块" class="headerlink" title="getpass模块"></a>getpass模块</h2><p>密码不显示（只能在终端运行）</p><h3 id="密码不显示（只能在终端运行）"><a href="#密码不显示（只能在终端运行）" class="headerlink" title="密码不显示（只能在终端运行）"></a>密码不显示（只能在终端运行）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> getpass</span><br><span class="line"></span><br><span class="line">pwd = getpass.getpass(<span class="string">'请输入密码：'</span>)</span><br><span class="line"><span class="keyword">if</span> pwd == <span class="string">'123'</span>:</span><br><span class="line">    print(<span class="string">'输入正确'</span>)</span><br></pre></td></tr></table></figure><h2 id="sys模块"><a href="#sys模块" class="headerlink" title="sys模块"></a>sys模块</h2><p>解释器相关模块</p><h3 id="sys-getrefcount"><a href="#sys-getrefcount" class="headerlink" title="sys.getrefcount"></a>sys.getrefcount</h3><p>获取一个值的应用计数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">a = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">b = a</span><br><span class="line">print(sys.getrefcount(a))<span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h3 id="sys-getrecursionlimit"><a href="#sys-getrecursionlimit" class="headerlink" title="sys.getrecursionlimit"></a>sys.getrecursionlimit</h3><p>python默认支持的递归数量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">print(sys.getrecursionlimit())<span class="comment"># 1000</span></span><br></pre></td></tr></table></figure><h3 id="sys-stdout-writ"><a href="#sys-stdout-writ" class="headerlink" title="sys.stdout.writ"></a>sys.stdout.writ</h3><p>print (可以查看进度)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">mag = <span class="string">"%s%%\r"</span> %i</span><br><span class="line">print(mag,end=<span class="string">""</span>)</span><br><span class="line">time.sleep(<span class="number">0.05</span>)<span class="comment">#从1%长到100%</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="comment"># 1.读取文件大小(字节)</span></span><br><span class="line">file_size = os.stat(<span class="string">'day001.zip'</span>).st_size<span class="comment"># 文件大小</span></span><br><span class="line"><span class="comment"># 2.一点一点的读取文件</span></span><br><span class="line">read_size = <span class="number">0</span>   <span class="comment"># 阅读大小</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'day001.zip'</span>,mode=<span class="string">'rb'</span>) <span class="keyword">as</span> f1 , open (<span class="string">'a.zip'</span>,mode=<span class="string">'wb'</span>) <span class="keyword">as</span> f2:</span><br><span class="line">    <span class="keyword">while</span> read_size &lt; file_size:</span><br><span class="line">        chunk = f1.read(<span class="number">1024</span>) <span class="comment">#每次最多读取1024字节</span></span><br><span class="line">        f2.write(chunk)</span><br><span class="line">        read_size += len(chunk) <span class="comment">#阅读大小=阅读大小+读取长度</span></span><br><span class="line">        val = int(read_size/file_size * <span class="number">100</span>) <span class="comment"># 求当前读取%数</span></span><br><span class="line">        print(<span class="string">'%s%%\r'</span>%val,end=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h3 id="sys-argv"><a href="#sys-argv" class="headerlink" title="sys.argv"></a><strong>sys.argv</strong></h3><p>获取用户执行脚本时，传入的参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">让用户执行脚本传入要删除的文件路径，在内部帮助用将目录删除。</span></span><br><span class="line"><span class="string">C:\Python36\python36.exe D:/code/s21day14/7.模块传参.py D:/test</span></span><br><span class="line"><span class="string">C:\Python36\python36.exe D:/code/s21day14/7.模块传参.py</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取用户执行脚本时，传入的参数。</span></span><br><span class="line"><span class="comment"># C:\Python36\python36.exe D:/code/s21day14/7.模块传参.py D:/test</span></span><br><span class="line"><span class="comment"># sys.argv = [D:/code/s21day14/7.模块传参.py, D:/test]</span></span><br><span class="line">path = sys.argv[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除目录</span></span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.rmtree(path)</span><br></pre></td></tr></table></figure><h3 id="sys-path"><a href="#sys-path" class="headerlink" title="sys.path"></a><strong>sys.path</strong></h3><p>模块搜索 <strong>默认Python去导入模块时，会按照sys.path中的路径挨个查找。</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># import sys</span></span><br><span class="line"><span class="comment"># sys.path.append('D:\\')</span></span><br><span class="line"><span class="comment"># import oldboy</span></span><br></pre></td></tr></table></figure><ul><li><p>sys.exit（0） 终止程序</p></li><li><p>sys.modules 存储当前程序用到的所有模块，反射文件中的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> demo<span class="comment"># 导入自定义py文件</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">print(demo)</span><br><span class="line">print(sys.modules)</span><br><span class="line">print(demo <span class="keyword">is</span> sys.modules[<span class="string">'demo'</span>])</span><br><span class="line">print(getattr(sys.modules[<span class="string">'demo'</span>],<span class="string">'a'</span>))</span><br></pre></td></tr></table></figure></li></ul><h2 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h2><p>操作系统相关</p><h3 id="os-path-exists-path"><a href="#os-path-exists-path" class="headerlink" title="os.path.exists(path)"></a><strong>os.path.exists(path)</strong></h3><p><strong>判断文件目录是否存在</strong> <strong>， 如果path存在，返回True；如果path不存在，返回False</strong></p><h3 id="os-path-isfile-path"><a href="#os-path-isfile-path" class="headerlink" title="os.path.isfile(path)"></a><strong>os.path.isfile(path)</strong></h3><p><strong>判断文件是否存在</strong></p><h3 id="os-path-basename-file-path"><a href="#os-path-basename-file-path" class="headerlink" title="*os.path.basename(file_path) *"></a>*<em>os.path.basename(file_path) *</em></h3><p><strong>获取文件名</strong></p><h3 id="os-stat-‘file’-st-size"><a href="#os-stat-‘file’-st-size" class="headerlink" title="*os.stat(‘file’).st_size   *"></a>*<em>os.stat(‘file’).st_size *</em></h3><p><strong>获取文件大小</strong></p><h3 id="os-path-getsize-path"><a href="#os-path-getsize-path" class="headerlink" title="*os.path.getsize(path)      *"></a>*<em>os.path.getsize(path) *</em></h3><p><strong>获取文件大小</strong></p><h3 id="os-path-abspath"><a href="#os-path-abspath" class="headerlink" title="*os.path.abspath()   *"></a>*<em>os.path.abspath() *</em></h3><p>*<em>获取一个文件的绝对路径 （<code>__file__</code>）获取当前文件绝对路径 *</em></p><h3 id="os-path-isabs-path"><a href="#os-path-isabs-path" class="headerlink" title="*os.path.isabs(path)      *"></a>*<em>os.path.isabs(path) *</em></h3><p><strong>判断是否为绝对路径</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">path = <span class="string">'20190409_192149.mp4'</span> <span class="comment"># E:\Python_WorkSpace\day014 装饰器带参数\day001.zip</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">v1 = os.path.abspath(path)</span><br><span class="line">print(v1)</span><br><span class="line"><span class="comment"># E:\Python_WorkSpace\day014 装饰器带参数\day001.zip</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前文件的绝对路径</span></span><br><span class="line">a = os.path.abspath(__file__)</span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><h3 id="os-path-dirname"><a href="#os-path-dirname" class="headerlink" title="*os.path.dirname *"></a>*<em>os.path.dirname *</em></h3><p><strong>获取路径的上级目录</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">v = <span class="string">r"E:\Python_WorkSpace\day014 装饰器带参数\day001.zip"</span></span><br><span class="line"></span><br><span class="line">print(os.path.dirname(v))</span><br><span class="line"><span class="comment"># E:\Python_WorkSpace\day014 装饰器带参数</span></span><br></pre></td></tr></table></figure><h3 id="os-path-join"><a href="#os-path-join" class="headerlink" title="*os.path.join *"></a>*<em>os.path.join *</em></h3><p><strong>路径的拼接</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">path = <span class="string">"E:\Python_WorkSpace\day014"</span> <span class="comment"># user/index/inx/fasd/</span></span><br><span class="line">v = <span class="string">'n.txt'</span></span><br><span class="line"></span><br><span class="line">result = os.path.join(path,v)</span><br><span class="line">print(result)</span><br><span class="line">result = os.path.join(path,<span class="string">'n1'</span>,<span class="string">'n2'</span>,<span class="string">'n3'</span>)</span><br><span class="line">print(result)</span><br><span class="line"><span class="comment"># E:\Python_WorkSpace\day014\n.txt</span></span><br><span class="line"><span class="comment"># E:\Python_WorkSpace\day014\n1\n2\n3</span></span><br></pre></td></tr></table></figure><h3 id="os-listdir"><a href="#os-listdir" class="headerlink" title="os.listdir"></a>os.listdir</h3><p>查看一个目录下所有的文件【第一层】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">result = os.listdir(<span class="string">r'E:\Python_WorkSpace\day014 装饰器带参数'</span>)</span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> result:</span><br><span class="line">    print(path)</span><br></pre></td></tr></table></figure><h3 id="os-walk"><a href="#os-walk" class="headerlink" title="*os.walk *"></a>*<em>os.walk *</em></h3><p>** 查看一个目录下所有的文件【所有层】**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">result = os.walk(<span class="string">r'E:\Python_WorkSpace\day014 装饰器带参数'</span>)</span><br><span class="line"><span class="keyword">for</span> a,b,c <span class="keyword">in</span> result:</span><br><span class="line">    <span class="comment"># a,正在查看的目录 b,此目录下的文件夹  c,此目录下的文件</span></span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> c:</span><br><span class="line">        path = os.path.join(a,item)</span><br><span class="line">        print(path)</span><br></pre></td></tr></table></figure><h3 id="os-makedirs"><a href="#os-makedirs" class="headerlink" title="os.makedirs"></a>os.makedirs</h3><p>创建目录和子目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">file_path = <span class="string">r'db\xx\xo\xxxxx.txt'</span> <span class="comment"># 文件路径</span></span><br><span class="line"></span><br><span class="line">file_folder = os.path.dirname(file_path) <span class="comment"># 文件夹</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(file_folder): <span class="comment"># 判断文件夹是否存在</span></span><br><span class="line">    os.makedirs(file_folder)    <span class="comment"># 创建文件夹</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> open(file_path,mode=<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="string">'asdf'</span>)</span><br></pre></td></tr></table></figure><h3 id="os-renname"><a href="#os-renname" class="headerlink" title="os.renname"></a>os.renname</h3><p>重命名</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">import <span class="built_in">os</span></span><br><span class="line"><span class="built_in">os</span>.<span class="built_in">rename</span>(<span class="string">'db'</span>,<span class="string">'sb'</span>)</span><br></pre></td></tr></table></figure><h2 id="shtil模块"><a href="#shtil模块" class="headerlink" title="shtil模块"></a>shtil模块</h2><p>高级的 文件、文件夹、压缩包 处理模块</p><h3 id="shutil-rmtree"><a href="#shutil-rmtree" class="headerlink" title="shutil.rmtree"></a>shutil.rmtree</h3><p>删除目录</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.rmtree(path)</span><br></pre></td></tr></table></figure><h3 id="shutil-move"><a href="#shutil-move" class="headerlink" title="shutil.move"></a>shutil.move</h3><p>重命名；移动文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line">shutil.move(<span class="string">'test'</span>,<span class="string">'ttt'</span>)</span><br></pre></td></tr></table></figure><h3 id="shutil-make-archive"><a href="#shutil-make-archive" class="headerlink" title="shutil.make_archive"></a>shutil.make_archive</h3><p>压缩文件夹</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  shutil</span><br><span class="line"></span><br><span class="line">shutil.make_archive(<span class="string">'cade\asd'</span>,<span class="string">'zip'</span>,<span class="string">r'E:\Python_WorkSpace\day016 模块\abc'</span>)</span><br></pre></td></tr></table></figure><h3 id="shutil-unpack-archive"><a href="#shutil-unpack-archive" class="headerlink" title="shutil.unpack_archive"></a>shutil.unpack_archive</h3><p>解压文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>  shutil</span><br><span class="line"></span><br><span class="line">shutil.unpack_archive(<span class="string">'abc.zip'</span>,extract_dir=<span class="string">r'E:\Python_WorkSpace\day016 模块\abc'</span>,format=<span class="string">'zip'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习</span></span><br><span class="line"><span class="comment"># 1.压缩lizhongwei文件夹 zip</span></span><br><span class="line"><span class="comment"># 2.放到到 code 目录（默认不存在）</span></span><br><span class="line"><span class="comment"># 3.将文件解压到D:\x1目录中。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line">ctime = datetime.now().strftime(<span class="string">'%Y-%m-%d-%H-%M-%S'</span>)<span class="comment"># 将当前时间转换成字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">'code'</span>):<span class="comment"># 判断 code 文件目录是否存在</span></span><br><span class="line">    os.makedirs(<span class="string">'code'</span>)<span class="comment"># 创建 code</span></span><br><span class="line">shutil.make_archive(os.path.join(<span class="string">'code'</span>,ctime),<span class="string">'zip'</span>,<span class="string">'D:\code\s21day16\lizhongwei'</span>)<span class="comment"># 压缩文件 在code文件夹中，名称为2019-04-18-17-12-24压缩文件</span></span><br><span class="line"></span><br><span class="line">file_path = os.path.join(<span class="string">'code'</span>,ctime) + <span class="string">'.zip'</span><span class="comment">#被解压文件名称 </span></span><br><span class="line">shutil.unpack_archive(file_path,<span class="string">r'D:\x1'</span>,<span class="string">'zip'</span>)<span class="comment">#解压文件到指定目录</span></span><br></pre></td></tr></table></figure><h2 id="json-pickle模块"><a href="#json-pickle模块" class="headerlink" title="json  /   pickle模块"></a>json / pickle模块</h2><p>序列化</p><h3 id="二者优缺点"><a href="#二者优缺点" class="headerlink" title="二者优缺点"></a>二者优缺点</h3><ul><li><p>json,优点：所有语言通用；缺点：只能序列化基本的数据类型</p><p>所有字符串都是双引号；最外层只能是列表或字典</p><p>存在字典的key只能是str;不能连续load多次</p></li><li><p>pickle,优点：python中几乎所有的东西都能被序列化（socket对象）；缺点：序列化的内容只有python认识</p><p>支持连续load多次</p></li></ul><p>一个特殊的字符串。【长得像列表、字典、字符串、数字、真假】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+-------------------+---------------+</span><br><span class="line">   | Python            | JSON          |</span><br><span class="line">   +===================+===============+</span><br><span class="line">   | dict              | object        |</span><br><span class="line">   +-------------------+---------------+</span><br><span class="line">   | list, tuple       | array         |</span><br><span class="line">   +-------------------+---------------+</span><br><span class="line">   | str               | string        |</span><br><span class="line">   +-------------------+---------------+</span><br><span class="line">   | int, float        | number        |</span><br><span class="line">   +-------------------+---------------+</span><br><span class="line">   | <span class="literal">True</span>              | true          |</span><br><span class="line">   +-------------------+---------------+</span><br><span class="line">   | <span class="literal">False</span>             | false         |</span><br><span class="line">   +-------------------+---------------+</span><br><span class="line">   | <span class="literal">None</span>              | null          |</span><br><span class="line">   +-------------------+---------------+</span><br></pre></td></tr></table></figure><h3 id="dumps"><a href="#dumps" class="headerlink" title="dumps"></a>dumps</h3><p>序列化，将python的值转换为json格式的字符串(str/bytes类型)。</p><h3 id="loads"><a href="#loads" class="headerlink" title="loads"></a>loads</h3><p>反序列化，将json格式的字符串转换为python的值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line"><span class="comment"># 序列化，将python的值转换为json格式的字符串。</span></span><br><span class="line">val = pickle.dumps(v)</span><br><span class="line">print(val)</span><br><span class="line"><span class="comment"># 反序列化，将json格式的字符串转换为python的值。</span></span><br><span class="line">data = pickle.loads(val)</span><br><span class="line">print(data,type(data))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">v = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">'frfed'</span>,<span class="string">'tgrf'</span>,[<span class="number">1</span>,<span class="number">3</span>,<span class="number">2</span>]]</span><br><span class="line"><span class="comment"># 序列化，将python的值转换为json格式的字符串。</span></span><br><span class="line">v1 = json.dumps(v)</span><br><span class="line">print(v1,type(v1))  <span class="comment"># [1, 2, 3, 4, "frfed", "tgrf", [1, 3, 2]] &lt;class 'str'&gt;</span></span><br><span class="line"><span class="comment"># 反序列化，将json格式的字符串转换为python的值。</span></span><br><span class="line">v3 = json.loads(v1)</span><br><span class="line">print(v3,type(v3))  <span class="comment"># [1, 2, 3, 4, 'frfed', 'tgrf', [1, 3, 2]] &lt;class 'list'&gt;</span></span><br></pre></td></tr></table></figure><p>字典或列表中如有中文，序列化时想要保留中文显示:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v = &#123;<span class="string">'k1'</span>:<span class="string">"asdf"</span>,<span class="string">'k2'</span>:<span class="string">'中文'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">val = json.dumps(v,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line">print(val)<span class="comment"># &#123;"k1": "alex", "k2": "李杰"&#125;</span></span><br></pre></td></tr></table></figure><h3 id="dump"><a href="#dump" class="headerlink" title="dump"></a>dump</h3><p>将字典以特殊格式写到文件中</p><h3 id="load"><a href="#load" class="headerlink" title="load"></a>load</h3><p>读取文件中内容转换成字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">v = &#123;<span class="string">'k1'</span>:<span class="string">"asdf"</span>,<span class="string">'k2'</span>:<span class="string">'中文'</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f = open(<span class="string">'x.txt'</span>,mode=<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">val = json.dump(v,f)</span><br><span class="line">print(val)<span class="comment"># None</span></span><br><span class="line">f.close<span class="comment"># &#123;"k1": "asdf", "k2": "\u4e2d\u6587"&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">f = open(<span class="string">'x.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">val = json.load(f)</span><br><span class="line">f.close</span><br><span class="line">print(val,type(val))<span class="comment"># &#123;'k1': 'asdf', 'k2': '中文'&#125; &lt;class 'dict'&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">v = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;</span><br><span class="line">f = open(<span class="string">'x.txt'</span>,mode=<span class="string">'wb'</span>)</span><br><span class="line">val = pickle.dump(v,f)</span><br><span class="line">f.close()</span><br><span class="line"></span><br><span class="line">f = open(<span class="string">'x.txt'</span>,mode=<span class="string">'rb'</span>)</span><br><span class="line">data = pickle.load(f)</span><br><span class="line">f.close()</span><br><span class="line">print(data)</span><br></pre></td></tr></table></figure><h2 id="importlib模块"><a href="#importlib模块" class="headerlink" title="importlib模块"></a>importlib模块</h2><p>根据字符串的形式导入模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">模块 = importlib.import_module(<span class="string">'utils.redis'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用字符串形式导入模块</span></span><br><span class="line">redis = importlib.import_module(<span class="string">'utils.redis'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 用字符串的形式去对象（模块）找到他的成员</span></span><br><span class="line">getattr(redis,<span class="string">'func'</span>)()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line">path = <span class="string">'utils.redis.func'</span></span><br><span class="line"></span><br><span class="line">module_path,func_name = path.rsplit(<span class="string">'.'</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line">module_object = importlib.import_module(module_path)</span><br><span class="line"></span><br><span class="line">getattr(module_object,func_name)()</span><br></pre></td></tr></table></figure><p>开放封闭原则</p><p>对配置文件开放</p><p>对源代码封闭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line"></span><br><span class="line">middleware_classes = [</span><br><span class="line">    <span class="string">'utils.redis.Redis'</span>,</span><br><span class="line">    <span class="comment"># 'utils.mysql.MySQL',</span></span><br><span class="line">    <span class="string">'utils.mongo.Mongo'</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">for</span> path <span class="keyword">in</span> middleware_classes:</span><br><span class="line">    module_path,class_name = path.rsplit(<span class="string">'.'</span>,maxsplit=<span class="number">1</span>)</span><br><span class="line">    module_object = importlib.import_module(module_path)<span class="comment"># from utils import redis</span></span><br><span class="line">    cls = getattr(module_object,class_name)</span><br><span class="line">    obj = cls()</span><br><span class="line">    obj.connect()</span><br></pre></td></tr></table></figure><p><img src="C:%5CUsers%5C%E6%B7%A1%E5%93%81%E5%B2%81%E6%9C%88%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5C1556278593584.png" alt="1556278593584"></p><h2 id="collections模块"><a href="#collections模块" class="headerlink" title="collections模块"></a>collections模块</h2><p>加强版数据结构</p><h3 id="OrderedDict"><a href="#OrderedDict" class="headerlink" title="OrderedDict"></a>OrderedDict</h3><p>有序字典</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">info = OrderedDict()</span><br><span class="line">info[<span class="string">'k1'</span>] = <span class="number">123</span></span><br><span class="line">info[<span class="string">'k2'</span>] = <span class="number">456</span></span><br><span class="line"></span><br><span class="line">print(info.keys())<span class="comment"># odict_keys(['k1', 'k2'])</span></span><br><span class="line">print(info.values())<span class="comment"># odict_values([123, 456])</span></span><br><span class="line">print(info.items())<span class="comment"># odict_items([('k1', 123), ('k2', 456)])</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line">odic = OrderedDict([(<span class="string">'a'</span>, <span class="number">1</span>), (<span class="string">'b'</span>, <span class="number">2</span>), (<span class="string">'c'</span>, <span class="number">3</span>)])</span><br><span class="line">print(odic)<span class="comment"># OrderedDict([('a', 1), ('b', 2), ('c', 3)])</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> odic:</span><br><span class="line">    print(k,odic[k])</span><br></pre></td></tr></table></figure><h3 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h3><p>双端队列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="defaultDict"><a href="#defaultDict" class="headerlink" title="defaultDict"></a>defaultDict</h3><p>默认字典，给value设置一个默认值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="namedtuple"><a href="#namedtuple" class="headerlink" title="namedtuple"></a>namedtuple</h3><p>可命名元祖</p><p>应用：创建一个类，这个类没有办法，所有的属性的值都不能修改</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple   <span class="comment"># 可命名元组</span></span><br><span class="line">Course = namedtuple(<span class="string">'Course'</span>,[<span class="string">'name'</span>,<span class="string">'price'</span>,<span class="string">'teacher'</span>])</span><br><span class="line">python = Course(<span class="string">'python'</span>,<span class="number">19800</span>,<span class="string">'alex'</span>)</span><br><span class="line">print(python)   <span class="comment"># Course(name='python', price=19800, teacher='alex')</span></span><br><span class="line">print(python.name)  <span class="comment"># python</span></span><br><span class="line">print(python.price) <span class="comment"># 19800</span></span><br></pre></td></tr></table></figure><h2 id="logging模块"><a href="#logging模块" class="headerlink" title="logging模块"></a>logging模块</h2><p>日志模块</p><h3 id="报警等级"><a href="#报警等级" class="headerlink" title="报警等级"></a>报警等级</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">CRITICAL = <span class="number">50</span><span class="comment"># 最高</span></span><br><span class="line">FATAL = CRITICAL</span><br><span class="line">ERROR = <span class="number">40</span></span><br><span class="line">WARNING = <span class="number">30</span></span><br><span class="line">WARN = WARNING</span><br><span class="line">INFO = <span class="number">20</span></span><br><span class="line">DEBUG = <span class="number">10</span></span><br><span class="line">NOTSET = <span class="number">0</span><span class="comment"># 最低</span></span><br></pre></td></tr></table></figure><p>日志处理本质：Logger/FileHandler/Formatter</p><p>应用：统计用；做故障排除debug；记录错误，完成代码优化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">file_handler1 = logging.FileHandler(<span class="string">'x2.log'</span>, <span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>)<span class="comment"># 构造参数</span></span><br><span class="line">fmt1 = logging.Formatter(fmt=<span class="string">"%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s"</span>)</span><br><span class="line">file_handler1.setFormatter(fmt1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># file_handler2 = logging.FileHandler('x2.log', 'a', encoding='utf-8')</span></span><br><span class="line"><span class="comment"># fmt2 = logging.Formatter(fmt="%(asctime)s:  %(message)s")</span></span><br><span class="line"><span class="comment"># file_handler2.setFormatter(fmt2)</span></span><br><span class="line"></span><br><span class="line">logger = logging.Logger(<span class="string">'xxxxxx'</span>, level=logging.ERROR)</span><br><span class="line">logger.addHandler(file_handler1)</span><br><span class="line"><span class="comment"># logger.addHandler(file_handler2)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(<span class="comment"># 函数各参数</span></span><br><span class="line">    filename=<span class="string">'cmdb1.log'</span>,<span class="comment"># 日志文件名称</span></span><br><span class="line">    format=<span class="string">'%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s'</span>,<span class="comment"># 指定日志输出格式和内容</span></span><br><span class="line">    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S %p'</span>,<span class="comment"># 指定时间格式</span></span><br><span class="line">    level=logging.ERROR<span class="comment"># 日志报警等级</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 无效日志只配置一次</span></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    filename=<span class="string">'cmdb2.log'</span>,</span><br><span class="line">    format=<span class="string">'%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s'</span>,</span><br><span class="line">    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S %p'</span>,</span><br><span class="line">    level=logging.ERROR</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logging.error(<span class="string">'alex'</span>)<span class="comment"># 报警内容</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">logging.basicConfig函数各参数:</span><br><span class="line">filename: 指定日志文件名</span><br><span class="line">filemode: 和file函数意义相同，指定日志文件的打开模式，<span class="string">'w'</span>或<span class="string">'a'</span></span><br><span class="line">format: 指定输出的格式和内容，format可以输出很多有用信息，如上例所示:</span><br><span class="line"> %(levelno)s: 打印日志级别的数值</span><br><span class="line"> %(levelname)s: 打印日志级别名称</span><br><span class="line"> %(pathname)s: 打印当前执行程序的路径，其实就是sys.argv[<span class="number">0</span>]</span><br><span class="line"> %(filename)s: 打印当前执行程序名</span><br><span class="line"> %(funcName)s: 打印日志的当前函数</span><br><span class="line"> %(lineno)d: 打印日志的当前行号</span><br><span class="line"> %(asctime)s: 打印日志的时间</span><br><span class="line"> %(thread)d: 打印线程ID</span><br><span class="line"> %(threadName)s: 打印线程名称</span><br><span class="line"> %(process)d: 打印进程ID</span><br><span class="line"> %(message)s: 打印日志信息</span><br><span class="line">datefmt: 指定时间格式，同time.strftime()</span><br><span class="line">level: 设置日志级别，默认为logging.WARNING</span><br><span class="line">stream: 指定将日志的输出流，可以指定输出到sys.stderr,sys.stdout或者文件，默认输出到sys.stderr，当stream和filename同时指定时，stream被忽略</span><br><span class="line">---------------------</span><br></pre></td></tr></table></figure><h3 id="logging-basicconfig"><a href="#logging-basicconfig" class="headerlink" title="logging.basicconfig"></a>logging.basicconfig</h3><p>使用方便</p><p>不能实现编码问题；不能同时向文件和屏幕输出</p><h3 id="logging-debug"><a href="#logging-debug" class="headerlink" title="logging.debug"></a>logging.debug</h3><h3 id="logging-warning"><a href="#logging-warning" class="headerlink" title="logging.warning"></a>logging.warning</h3><p>logger对象 复杂的创建流程</p><ul><li>创建一个logger对象</li><li>创建一个文件操作符</li><li>创建一个屏幕操作符</li><li>创建一个格式</li></ul><p>操作;</p><ul><li><p>给logger对象绑定 文件操作符</p></li><li><p>给logger对象绑定 屏幕操作符</p></li><li><p>给文件操作符设定格式</p></li><li><p>给屏幕操作符设定格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">logger = logging.getLogger()<span class="comment"># 创建一个logger对象</span></span><br><span class="line">fh = logging.FileHandler(<span class="string">'log.log'</span>)<span class="comment"># 创建一个文件操作符</span></span><br><span class="line">sh = logging.StreamHandler()<span class="comment"># 创建一个屏幕操作符</span></span><br><span class="line">logger.addHandler(fh)<span class="comment"># 给logger对象绑定 文件操作符</span></span><br><span class="line">logger.addHandler(sh)<span class="comment"># 给logger对象绑定 屏幕操作符</span></span><br><span class="line">formatter = logging.Formatter(<span class="string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)<span class="comment"># 创建一个格式</span></span><br><span class="line">fh.setFormatter(formatter)<span class="comment"># 给文件操作符设定格式</span></span><br><span class="line">sh.setFormatter(formatter)<span class="comment"># 给屏幕操作符设定格式</span></span><br><span class="line">logger.warning(<span class="string">'message'</span>)<span class="comment">#</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="推荐处理日志方式"><a href="#推荐处理日志方式" class="headerlink" title="推荐处理日志方式"></a>推荐处理日志方式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line">file_handler = logging.FileHandler(filename=<span class="string">'x1.log'</span>, mode=<span class="string">'a'</span>, encoding=<span class="string">'utf-8'</span>,)</span><br><span class="line">logging.basicConfig(</span><br><span class="line">    format=<span class="string">'%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s'</span>,</span><br><span class="line">    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S %p'</span>,</span><br><span class="line">    handlers=[file_handler,],</span><br><span class="line">    level=logging.ERROR</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">logging.error(<span class="string">'你好'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 日志切割</span></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging <span class="keyword">import</span> handlers</span><br><span class="line"><span class="comment"># file_handler = logging.FileHandler(filename='x1.log', mode='a', encoding='utf-8',)</span></span><br><span class="line">file_handler = handlers.TimedRotatingFileHandler(filename=<span class="string">'x3.log'</span>, when=<span class="string">'s'</span>, interval=<span class="number">5</span>, encoding=<span class="string">'utf-8'</span>)</span><br><span class="line">logging.basicConfig(</span><br><span class="line">    format=<span class="string">'%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s'</span>,</span><br><span class="line">    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S %p'</span>,</span><br><span class="line">    handlers=[file_handler,],</span><br><span class="line">    level=logging.ERROR</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">100000</span>):</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    logging.error(str(i))</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在应用日志时，如果想要保留异常的堆栈信息。</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">logging.basicConfig(</span><br><span class="line">    filename=<span class="string">'wf.log'</span>,</span><br><span class="line">    format=<span class="string">'%(asctime)s - %(name)s - %(levelname)s -%(module)s:  %(message)s'</span>,</span><br><span class="line">    datefmt=<span class="string">'%Y-%m-%d %H:%M:%S %p'</span>,</span><br><span class="line">    level=logging.ERROR</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    requests.get(<span class="string">'http://www.xxx.com'</span>)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    msg = str(e) <span class="comment"># 调用e.__str__方法</span></span><br><span class="line">    logging.error(msg,exc_info=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><h2 id="copy模块"><a href="#copy模块" class="headerlink" title="copy模块"></a>copy模块</h2><h2 id="re模块模块"><a href="#re模块模块" class="headerlink" title="re模块模块"></a>re模块模块</h2><h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p>正则表达式中的转义符在python的字符串中也刚好有转移的作用但是正则表达式中的转义符和字符串中的转义符并没关系，且还容易有冲突，为了避免这种冲突，我们所有的正则都以在工具中的测试结果为结果，然后只需要在正则和待匹配的字符串外面都加r即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'\\\\n'</span>)<span class="comment"># //n</span></span><br><span class="line">print(<span class="string">'\\n'</span>)<span class="comment"># /n</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">r'\\n'</span>)<span class="comment"># //n</span></span><br><span class="line">print(<span class="string">r'\n'</span>)<span class="comment"># /n</span></span><br></pre></td></tr></table></figure><h3 id="re-findall"><a href="#re-findall" class="headerlink" title="*re.findall   *"></a>*<em>re.findall *</em></h3><p><strong>匹配字符串中所有规则的项，返回一个列表；未匹配返回一个空列表</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.findall(<span class="string">'\d+'</span>,<span class="string">'asadf451sdfdfb645d'</span>)</span><br><span class="line">print(ret)<span class="comment"># ['451', '645']</span></span><br></pre></td></tr></table></figure><h3 id="re-search"><a href="#re-search" class="headerlink" title="*re.search  *"></a>*<em>re.search *</em></h3><p>** 会从头到尾从带匹配，匹配字符串取出第一个符合条件的项，如果匹配到了，返回一个对象，用group取值；如果没匹配到，返回None，不能用group，会报错**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret = re.search(<span class="string">'\d+'</span>,<span class="string">'asadf451sdfdfb645d'</span>)</span><br><span class="line">print(ret)<span class="comment"># &lt;_sre.SRE_Match object; span=(5, 8), match='451'&gt;  span 是索引 match 是匹配到的项</span></span><br><span class="line"><span class="keyword">if</span> ret:</span><br><span class="line">    print(ret.group())<span class="comment"># 451</span></span><br></pre></td></tr></table></figure><h3 id="re-match"><a href="#re-match" class="headerlink" title="*re.match   *"></a>*<em>re.match *</em></h3><p><strong>会从头匹配字符串中取出从第一个字符开始是否符合规则，如果符合，就返回对象，用group取值；如果不符合，就返回None，相当于 match = search + ^正则</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.match(<span class="string">'\d+'</span>,<span class="string">'45adf451sdfdfb645d'</span>)</span><br><span class="line">print(ret)</span><br><span class="line"><span class="keyword">if</span> ret:</span><br><span class="line">    print(ret.group())</span><br></pre></td></tr></table></figure><h3 id="re-finditer"><a href="#re-finditer" class="headerlink" title="re.finditer"></a>re.finditer</h3><p>在查询的结果超过1个的情况下，能够有效的节省内存，降低空间复杂度，从而也降低了时间复杂度</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.finditer(<span class="string">"\d+"</span>,<span class="string">'cdfz56x31d144df'</span>*<span class="number">1000</span>)</span><br><span class="line">print(ret)<span class="comment"># &lt;callable_iterator object at 0x000002541A7874A8&gt;   迭代器</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ret: <span class="comment"># 循环迭代出每个元素</span></span><br><span class="line">    print(i.group())<span class="comment"># 56   31   144  ......</span></span><br></pre></td></tr></table></figure><h3 id="compile"><a href="#compile" class="headerlink" title="compile"></a>compile</h3><p>在同一个正则表达式重复使用多次的时候使用能够减少时间的开销，属于内置函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.compile(<span class="string">'\d+'</span>)</span><br><span class="line">print(ret)<span class="comment"># re.compile('\\d+')</span></span><br><span class="line">r1 = ret.search(<span class="string">'alex83'</span>)</span><br><span class="line">print(r1)<span class="comment"># &lt;_sre.SRE_Match object; span=(4, 6), match='83'&gt;</span></span><br><span class="line">r2 = ret.findall(<span class="string">'wusir74'</span>)</span><br><span class="line">print(r2)<span class="comment"># ['74']</span></span><br><span class="line">r3 = ret.finditer(<span class="string">'taibai40'</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> r3:</span><br><span class="line">    print(i.group())<span class="comment"># 40</span></span><br></pre></td></tr></table></figure><h3 id="re-split"><a href="#re-split" class="headerlink" title="re.split"></a>re.split</h3><p>分割，根据正则规则切割，返回列表，默认不保留切掉的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret1 = re.split(<span class="string">'\d\d'</span>,<span class="string">'alex83wusir74taibai'</span>)  <span class="comment"># 默认自动保留分组中的内容</span></span><br><span class="line">print(ret1)<span class="comment"># ['alex', 'wusir', 'taibai']</span></span><br><span class="line"></span><br><span class="line">ret2 = re.split(<span class="string">'\d(\d)'</span>,<span class="string">'alex83wusir74taibai'</span>)</span><br><span class="line">print(ret2)<span class="comment"># ['alex', '3', 'wusir', '4', 'taibai']</span></span><br></pre></td></tr></table></figure><h3 id="re-sub"><a href="#re-sub" class="headerlink" title="re.sub"></a>re.sub</h3><p>替换，默认替换所有，可以使用替换深度参数</p><h3 id="re-subn"><a href="#re-subn" class="headerlink" title="re.subn"></a>re.subn</h3><p>​ 替换，返回元祖</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret1 = re.sub(<span class="string">'\d'</span>,<span class="string">'D'</span>,<span class="string">'alex83wusir74taibai'</span>)</span><br><span class="line">print(ret1)<span class="comment"># alexDDwusirDDtaibai</span></span><br><span class="line"></span><br><span class="line">ret2 = re.sub(<span class="string">'\d'</span>,<span class="string">'D'</span>,<span class="string">'alex83wusir74taibai'</span>,<span class="number">1</span>)</span><br><span class="line">print(ret2)<span class="comment"># alexD3wusir74taibai</span></span><br><span class="line"></span><br><span class="line">ret3 = re.subn(<span class="string">'\d'</span>,<span class="string">'D'</span>,<span class="string">'alex83wusir74taibai'</span>)</span><br><span class="line">print(ret3)<span class="comment"># ('alexDDwusirDDtaibai', 4)</span></span><br></pre></td></tr></table></figure><h3 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h3><p>findall遇到正则表达式中的分组，会优先显示分组中的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">ret = re.findall(<span class="string">'\d(\d)'</span>,<span class="string">'sdfgfgvbnk83'</span>)</span><br><span class="line">print(ret)<span class="comment"># ['3']</span></span><br></pre></td></tr></table></figure><p>split遇到正则表达式中的分组，会保留分组中本来应该被切割掉的内容</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret1 = re.split(<span class="string">'(\d\d)'</span>,<span class="string">'alex83wusir74taibai'</span>)  <span class="comment"># 默认自动保留分组中的内容</span></span><br><span class="line">print(ret1)<span class="comment"># ['alex', '83', 'wusir', '74', 'taibai']</span></span><br></pre></td></tr></table></figure><p>group(加参数)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'&lt;h1&gt;wahaha&lt;/h1&gt;'</span></span><br><span class="line">ret = re.search(<span class="string">'&lt;(\w+)&gt;(.*?)&lt;/\w+&gt;'</span>,s1)</span><br><span class="line">print(ret)<span class="comment"># &lt;_sre.SRE_Match object; span=(0, 15), match='&lt;h1&gt;wahaha&lt;/h1&gt;'&gt;</span></span><br><span class="line">print(ret.group(<span class="number">0</span>))   <span class="comment"># group参数默认为0 表示取整个正则匹配的结果  &lt;h1&gt;wahaha&lt;/h1&gt;</span></span><br><span class="line">print(ret.group(<span class="number">1</span>))   <span class="comment"># 取第一个分组中的内容h1</span></span><br><span class="line">print(ret.group(<span class="number">2</span>))   <span class="comment"># 取第二个分组中的内容wahaha</span></span><br></pre></td></tr></table></figure><p>分组命名 (?P&lt;名字&gt;正则表达式)</p><p>search 取分组中的内容 通过索引；通过组名取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">s1 = <span class="string">'&lt;h1&gt;wahaha&lt;/h1&gt;'</span></span><br><span class="line">ret = re.search(<span class="string">'&lt;(?P&lt;tag&gt;\w+)&gt;(?P&lt;cont&gt;.*?)&lt;/\w+&gt;'</span>,s1)</span><br><span class="line">print(ret)<span class="comment"># &lt;_sre.SRE_Match object; span=(0, 15), match='&lt;h1&gt;wahaha&lt;/h1&gt;'&gt;</span></span><br><span class="line">print(ret.group(<span class="number">0</span>))   <span class="comment"># group参数默认为0 表示取整个正则匹配的结果  &lt;h1&gt;wahaha&lt;/h1&gt;</span></span><br><span class="line">pprint(ret.group(<span class="string">'tag'</span>))   <span class="comment"># 取tag分组中的内容</span></span><br><span class="line">print(ret.group(<span class="string">'cont'</span>))   <span class="comment"># 取cont分组中的内容</span></span><br></pre></td></tr></table></figure><p>分组引用 (?P=组名) 这个组中的内容必须完全和之前已经存在的组匹配到的内容一模一样</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">s1 = <span class="string">'&lt;h1&gt;wahaha&lt;/h1&gt;'</span></span><br><span class="line">ret = re.search(<span class="string">'&lt;(?P&lt;tag&gt;\w+)&gt;.*?&lt;/(?P=tag)&gt;'</span>,s1)</span><br><span class="line">print(ret.group(<span class="string">'tag'</span>))<span class="comment"># h1</span></span><br></pre></td></tr></table></figure><p>取消分组优先 （?:）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 有的时候我们想匹配的内容包含在不相匹配的内容当中，这个时候只需要把不想匹配的先匹配出来，再通过手段去掉</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">ret=re.findall(<span class="string">r"\d+\.\d+|(\d+)"</span>,<span class="string">"1-2*(60+(-40.35/5)-(-4*3))"</span>)</span><br><span class="line">print(ret)<span class="comment"># ['1', '2', '60', '', '5', '4', '3']</span></span><br><span class="line">ret.remove(<span class="string">''</span>)</span><br><span class="line">print(ret)<span class="comment"># ['1', '2', '60', '5', '4', '3']</span></span><br></pre></td></tr></table></figure><p>[] 和 [^] 带有特殊意义的元字符到字符组内大部分都会取消它的特殊含义</p><p>[()+*.]</p><p>[(<code>\-</code>)] -的位置决定了它的意义，写在字符组的第一位位置或者最后一个位置就表示一个普通的横杠</p><p>写在字符组的其他任何位置都会表示一个范围</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测用户输入的内容是否是一个合法的身份证号     网页的合法输入（手机号码 qq号码 银行卡号 邮箱地址）</span></span><br><span class="line"><span class="string">'^[1-9]\d&#123;14&#125;(\d&#123;2&#125;[\dx])?$'</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line">inp = input(<span class="string">'&gt;&gt;&gt;'</span>).strip()</span><br><span class="line">re.match(<span class="string">'[1-9]\d&#123;14&#125;(\d&#123;2&#125;[\dx])?$'</span>,inp)   <span class="comment"># 首选</span></span><br><span class="line">re.search(<span class="string">'^[1-9]\d&#123;14&#125;(\d&#123;2&#125;[\dx])?$'</span>,inp)</span><br><span class="line">re.findall(<span class="string">'^[1-9]\d&#123;14&#125;(\d&#123;2&#125;[\dx])?$'</span>,inp)</span><br></pre></td></tr></table></figure><h2 id="struct模块"><a href="#struct模块" class="headerlink" title="struct模块"></a>struct模块</h2><p>pack 能够把所有的数字都固定的转换成4字节</p><h2 id="dis模块"><a href="#dis模块" class="headerlink" title="dis模块"></a>dis模块</h2><h3 id="dis-dis"><a href="#dis-dis" class="headerlink" title="dis.dis"></a>dis.dis</h3><p>查看计算机指令</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h4 id="函数高级-5"><a href="#函数高级-5" class="headerlink" title="函数高级  5*"></a>函数高级 5*</h4><p>嵌套</p><p>装饰器</p><h4 id="模块分类和定义-4"><a href="#模块分类和定义-4" class="headerlink" title="模块分类和定义  4*"></a>模块分类和定义 4*</h4><p>内置模块</p><ul><li><p>os</p></li><li><p>sys</p></li><li><p>…</p></li></ul><p>第三方</p><ul><li><p>requests</p></li><li><p>xlrd</p></li></ul><p>自定义模块</p><ul><li><p>文件</p></li><li><p>文件夹 + init.py【包】</p></li></ul><h4 id="导入模块"><a href="#导入模块" class="headerlink" title="导入模块"></a>导入模块</h4><p>sys.path</p><p>导入</p><ul><li>import</li><li>from xx.xxx import xx</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于Python中函数的random 、hashlib、time /datetime等模块是干甚的，以及内部的方法怎么使用&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>python模块介绍</title>
    <link href="http://www.danpinsuiyue.com/2936349916.html"/>
    <id>http://www.danpinsuiyue.com/2936349916.html</id>
    <published>2019-02-25T13:19:42.000Z</published>
    <updated>2019-10-25T12:55:49.587Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于Python中为什么要有模块，使用模块的好处，如何使用模块，以及包的概念</strong></p><a id="more"></a><h2 id="模块简介"><a href="#模块简介" class="headerlink" title="模块简介"></a>模块简介</h2><h3 id="为什么要有模块？"><a href="#为什么要有模块？" class="headerlink" title="为什么要有模块？"></a>为什么要有模块？</h3><p>我们已经知道把实现具体功能的代码放入函数中，能够方便今后调用。现在我们把实现相关功能的函数汇集起来放到一个py文件中，方便管理和调用。这样每个py文件中的代码都相对较少，实现的功能都是相似或相关的功能。在Python中一个py文件就叫一个模块（module）。</p><h3 id="使用模块的好处"><a href="#使用模块的好处" class="headerlink" title="使用模块的好处"></a>使用模块的好处</h3><p>提高代码的可读性。</p><p>提高代码的可维护性。</p><h3 id="如何使用模块"><a href="#如何使用模块" class="headerlink" title="如何使用模块"></a>如何使用模块</h3><p>1、使用内置模块</p><p>Python本身就内置了很多非常有用的模块，只要安装完Python，这些模块就可以使用了。</p><p>2、自定义模块</p><p>3、使用第三方模块</p><p>Python中使用<code>pip</code>来安装第三方模块。</p><p>例如：<code>pip install django</code></p><p>无论是内置模块还是第三方模块，具体的使用方式都是：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一导入模块中所有函数</span></span><br><span class="line"><span class="keyword">import</span> abc</span><br><span class="line">abc.func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> func<span class="comment"># # from 模块 import 函数</span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> show</span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> func,show<span class="comment"># from 模块 import 函数 / 函数() </span></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> abc <span class="keyword">import</span> func <span class="keyword">as</span> f<span class="comment"># from 模块 import 函数  as 别名    别名()</span></span><br></pre></td></tr></table></figure><p>模块和要执行的py文件在同一目录 且 需要 模块中的很多功能时，推荐用： import 模块</p><p>其他推荐：from 模块 import 模块 / 模块.函数()</p><p>其他推荐：from 模块.模块 import 函数 函数()</p><h3 id="模块查找路径"><a href="#模块查找路径" class="headerlink" title="模块查找路径"></a>模块查找路径</h3><p>发现，自己写的模块只能在当前路径下的程序里才能导入，换一个目录再导入自己的模块就报错说找不到了， 这是为什么？</p><p>这与导入模块的查找路径有关</p><figure class="highlight elm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sysprint(sys.path)</span><br></pre></td></tr></table></figure><p>输出（注意不同的电脑可能输出的不太一样）</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">['', <span class="symbol">'/Library/Frameworks/Python.framework/Versions/3.6/lib/python36.zip</span>', <span class="symbol">'/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6</span>', <span class="symbol">'/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/lib-dynload</span>', <span class="symbol">'/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/site-packages</span>']</span><br></pre></td></tr></table></figure><p>你导入一个模块时，Python解释器会按照上面列表顺序去依次到每个目录下去匹配你要导入的模块名，只要在一个目录下匹配到了该模块名，就立刻导入，不再继续往后找。</p><blockquote><p>注意列表第一个元素为空，即代表当前目录，所以你自己定义的模块在当前目录会被优先导入。</p></blockquote><p>我们自己创建的模块若想在任何地方都能调用，那就得确保你的模块文件至少在模块路径的查找列表中。</p><p>我们一般把自己写的模块放在一个带有“site-packages”字样的目录里，我们从网上下载安装的各种第三方的模块一般都放在这个目录。</p><h2 id="包的概念"><a href="#包的概念" class="headerlink" title="包的概念"></a>包的概念</h2><p>Python中的<code>包</code>是一个包含多个模块文件的目录，按<code>包</code>来组织模块。</p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a><strong>注意：</strong></h3><p>Python中包的每个目录下都要有一个<code>__init__.py</code>文件，否则，就是普通目录。</p><h3 id="十二分注意："><a href="#十二分注意：" class="headerlink" title="十二分注意："></a><strong>十二分注意：</strong></h3><p>不要将自己的模块文件名与Python自带的模块名冲突。</p><p>不要将自己的模块文件名与Python自带的模块名冲突。</p><p>不要将自己的模块文件名与Python自带的模块名冲突。</p><p>例如：内置的<code>time</code>模块，你自己创建的py文件就不要命名成<code>time.py</code>，否则就不能正常使用内置的<code>time</code>模块了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于Python中为什么要有模块，使用模块的好处，如何使用模块，以及包的概念&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python函数的高级</title>
    <link href="http://www.danpinsuiyue.com/1705878977.html"/>
    <id>http://www.danpinsuiyue.com/1705878977.html</id>
    <published>2019-02-20T13:37:24.000Z</published>
    <updated>2019-10-26T10:53:15.836Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于Python中函数的小、中、高级的用法，闭包，lambda表达式，内置函数，以及什么是装饰器、迭代器、生成器等</strong></p><a id="more"></a><h2 id="函数小高级"><a href="#函数小高级" class="headerlink" title="函数小高级"></a>函数小高级</h2><h3 id="函数名作为变量"><a href="#函数名作为变量" class="headerlink" title="函数名作为变量"></a>函数名作为变量</h3><p>带括号就执行函数，返回函数返回值；不加括号指向函数地址，函数不执行</p><p>函数可以作为字典的键值，可以作为键</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 典例一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)    </span><br><span class="line">v1 = func <span class="comment"># func函数不执行</span></span><br><span class="line">func<span class="comment"># func函数不执行</span></span><br><span class="line">v1（）<span class="comment"># 执行func函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 典例二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)    </span><br><span class="line">v1 = func() <span class="comment"># func函数返回值</span></span><br><span class="line">func()<span class="comment"># 执行func函数</span></span><br><span class="line">print(v1)<span class="comment"># None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    </span><br><span class="line">func_list = [func, func, func]<span class="comment"># func_list为三个func函数地址</span></span><br><span class="line">func_list = [func(), func(), func()]<span class="comment"># [None, None, None]</span></span><br><span class="line"><span class="comment"># func_list[0]()</span></span><br><span class="line"><span class="comment"># func_list[1]()</span></span><br><span class="line"><span class="comment"># func_list[2]()</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> func_list:</span><br><span class="line">    v = item()<span class="comment">#123循环3次</span></span><br><span class="line">    print(v)<span class="comment">#None</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">666</span>)</span><br><span class="line"></span><br><span class="line">info = &#123;<span class="string">'k1'</span>: func, <span class="string">'k2'</span>: bar&#125;</span><br><span class="line"></span><br><span class="line">info[<span class="string">'k1'</span>]()<span class="comment"># 执行函数func123</span></span><br><span class="line">info[<span class="string">'k2'</span>]()<span class="comment"># 执行函数bar666</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line">func_list1 = [func,func,func]</span><br><span class="line">func_list2 = [func(),func(),func()]</span><br><span class="line"></span><br><span class="line">print(func_list1)<span class="comment">#func()函数地址 * 3</span></span><br><span class="line">print(func_list2)<span class="comment"># 123 123 123</span></span><br><span class="line"></span><br><span class="line">info = &#123;</span><br><span class="line">    <span class="string">'k1'</span>:func,</span><br><span class="line">    <span class="string">'k2'</span>:func(),</span><br><span class="line">&#125;</span><br><span class="line">print(info)<span class="comment"># &#123;'k1': &lt;function func at 0x000001D5315DDA60&gt;, 'k2': 123&#125;</span></span><br></pre></td></tr></table></figure><h3 id="函数当作参数"><a href="#函数当作参数" class="headerlink" title="函数当作参数"></a>函数当作参数</h3><p>当参数时有（），得到返回值；当参数时无（），得到函数地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    print(arg)</span><br><span class="line">    </span><br><span class="line">func(<span class="number">1</span>)<span class="comment"># 执行func1</span></span><br><span class="line">func([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])<span class="comment"># 执行func[1,2,3,4]</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">999</span></span><br><span class="line">func(show)<span class="comment"># show不执行 指向函数地址</span></span><br><span class="line">func(show())<span class="comment"># show执行999</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    v1 = arg()<span class="comment">#函数show执行v1为函数show返回值</span></span><br><span class="line">    print(v1)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">666</span>)<span class="comment">#输出666</span></span><br><span class="line">    </span><br><span class="line">func(show)<span class="comment">#指向函数show地址不执行</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    v1 = arg()</span><br><span class="line">    print(v1)</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">666</span>)</span><br><span class="line">    </span><br><span class="line">result = func(show)<span class="comment">#result为函数func的返回值</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h3 id="数据类型中的方法到底有没有返回值？"><a href="#数据类型中的方法到底有没有返回值？" class="headerlink" title="数据类型中的方法到底有没有返回值？"></a>数据类型中的方法到底有没有返回值？</h3><p>无返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v = [11,22,33]</span><br><span class="line">v.append(99) # 无返回值</span><br></pre></td></tr></table></figure><p>仅有返回值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">v = <span class="string">"熊大"</span></span><br><span class="line">result = v.split(<span class="string">'l'</span>)</span><br><span class="line"></span><br><span class="line">v = &#123;<span class="string">'k1'</span>:<span class="string">'v2'</span>&#125;</span><br><span class="line">result1 = v.get(<span class="string">'k1'</span>)</span><br><span class="line">result2 = v.keys()</span><br></pre></td></tr></table></figure><p>有返回+修改数据</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]</span><br><span class="line">result = v.pop()</span><br></pre></td></tr></table></figure><h3 id="常用方法有返回值"><a href="#常用方法有返回值" class="headerlink" title="常用方法有返回值"></a>常用方法有返回值</h3><div class="note default"><p>str 字符串的所有方法基本上都是返回值为新值</p><ul><li>strip，返回字符串</li><li>split，返回列表</li><li>replace，返回字符串</li><li>join，返回字符串。</li></ul><p>list 列表所有方法基本上都是返回值None</p><ul><li>append，无</li><li>insert，无</li><li>pop，返回要删除的数据</li><li>remove，无</li><li>find/index，返回索引的位置。</li></ul><p>dict</p><ul><li>get ，返回指定键值</li><li>keys，返回所有键</li><li>values，返回所有值</li><li>items，返回所有键值对</li></ul></div><div class="note default"><p>函数内部的数据是否会混乱。</p><ul><li>函数内部执行相互之间不会混乱</li><li>执行完毕 + 内部元素不被其他人使用 =&gt; 销毁</li></ul></div><h2 id="函数中高级"><a href="#函数中高级" class="headerlink" title="函数中高级"></a>函数中高级</h2><h3 id="函数做返回值"><a href="#函数做返回值" class="headerlink" title="函数做返回值"></a>函数做返回值</h3><p>就找函数何时被谁创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="number">123</span>)<span class="comment">#输出123</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> fun<span class="comment">#返回函数fun</span></span><br><span class="line">v = bar()<span class="comment">#执行函数bar()</span></span><br><span class="line">v()<span class="comment"># 执行函数func()</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'光头强'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">print(name)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">return</span> func</span><br><span class="line">v = bar()</span><br><span class="line">v()<span class="comment"># 光头强</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">print(<span class="number">123</span>)</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line">v= bar() </span><br><span class="line">v()<span class="comment"># 123</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'光头强'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">name = <span class="string">'花花'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">print(name)</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line">v = bar()</span><br><span class="line">v()<span class="comment"># 花花</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'光头强'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">(name)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">print(name)</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line">v1 = bar(<span class="string">'熊大'</span>)</span><br><span class="line">v2 = bar(<span class="string">'熊二'</span>)</span><br><span class="line">v1()<span class="comment"># 熊大</span></span><br><span class="line">v2()<span class="comment"># 熊二</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line">name = <span class="string">'熊大'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base</span><span class="params">()</span>:</span></span><br><span class="line">    print(name)   </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"> name = <span class="string">'熊二'</span></span><br><span class="line">    base()</span><br><span class="line">func()<span class="comment"># 熊大</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line">name = <span class="string">'熊大'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"> name = <span class="string">'熊二'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">base</span><span class="params">()</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    base()   </span><br><span class="line">func()<span class="comment"># 熊二</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例三</span></span><br><span class="line">name = <span class="string">'熊大'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"> name = <span class="string">'熊二'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">base</span><span class="params">()</span>:</span></span><br><span class="line">    print(name)</span><br><span class="line">    <span class="keyword">return</span> base </span><br><span class="line">base = func()</span><br><span class="line">base()<span class="comment"># 熊二</span></span><br></pre></td></tr></table></figure><h2 id="函数大高级"><a href="#函数大高级" class="headerlink" title="函数大高级"></a>函数大高级</h2><p>把函数当做参数传递</p><p>把函数当做返回值</p><p>对函数进行复制</p><h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><p>含义：函数自己调自己(效率低)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line">    func()</span><br><span class="line">    </span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(i)</span>:</span></span><br><span class="line">    print(i)</span><br><span class="line">    func(i+<span class="number">1</span>)</span><br><span class="line">    </span><br><span class="line">func(<span class="number">1</span>)   <span class="comment"># 1,2,3---988报错，死循环</span></span><br></pre></td></tr></table></figure><p>斐契那波数列(有限制)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    <span class="comment"># 1</span></span><br><span class="line">    <span class="comment"># 1</span></span><br><span class="line">    <span class="comment"># 2</span></span><br><span class="line">    <span class="comment"># 3 </span></span><br><span class="line">    <span class="comment"># 5 </span></span><br><span class="line">    print(b) </span><br><span class="line">    func(b,a+b)</span><br><span class="line">    </span><br><span class="line">func(<span class="number">0</span>,<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>递归函数返回值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100000</span></span><br><span class="line">    result = func(a+<span class="number">1</span>) + <span class="number">10</span></span><br><span class="line">    <span class="keyword">return</span> result </span><br><span class="line"></span><br><span class="line">v = func(<span class="number">1</span>)</span><br><span class="line">print(v)<span class="comment">#  10040</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> a == <span class="number">5</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100000</span></span><br><span class="line">    result = func(a+<span class="number">1</span>) + <span class="number">10</span></span><br><span class="line"></span><br><span class="line">v = func(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">name = <span class="string">'alex'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(name)</span><br><span class="line">     <span class="keyword">return</span> inner</span><br><span class="line">v =func()</span><br></pre></td></tr></table></figure><h3 id="函数执行的流程分析"><a href="#函数执行的流程分析" class="headerlink" title="函数执行的流程分析"></a>函数执行的流程分析</h3><p>函数是由谁创建的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> i </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> arg</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">base_list = [] <span class="comment"># [base,base,]</span></span><br><span class="line">func_list = [] <span class="comment"># [由第一次执行func函数的内存地址，内部arg=0 创建的inner函数，有arg=1的inner函数 ]</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>): <span class="comment"># i = 0 ，1</span></span><br><span class="line">    base_list.append(base)</span><br><span class="line">    func_list.append(func(i))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 1. base_list 和 func_list中分别保存的是什么？</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">base_list中存储都是base函数。</span></span><br><span class="line"><span class="string">func_list中存储的是inner函数，特别要说的是每个inner是在不同的地址创建。</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 2. 如果循环打印什么？</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> base_list:</span><br><span class="line">v = item() <span class="comment"># 执行base函数</span></span><br><span class="line">    print(v) <span class="comment"># 都是9</span></span><br><span class="line"><span class="keyword">for</span> data <span class="keyword">in</span> func_list:</span><br><span class="line">    v = data()</span><br><span class="line">    print(v) <span class="comment"># 0 1 2 3 4</span></span><br></pre></td></tr></table></figure><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><h3 id="什么是闭包"><a href="#什么是闭包" class="headerlink" title="什么是闭包"></a>什么是闭包</h3><p><strong><u>闭包概念：为函数创建一块区域并为其维护自己数据，以后执行时方便调用。</u></strong></p><p>闭包应用场景：装饰器、SQLAlchemy源码</p><p><strong><u>a函数里面有b函数,并且返回值为b函数（b函数只被调用，没被执行；b函数引用a函数的变量）</u></strong></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(name)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(name)</span><br><span class="line"><span class="keyword">return</span> inner </span><br><span class="line"></span><br><span class="line">v1 = func(<span class="string">'熊大'</span>) <span class="comment"># 执行func（）函数值为alex，返回inner</span></span><br><span class="line">v1()<span class="comment">#执行inner（）函数，输出alex</span></span><br><span class="line">v2 = func(<span class="string">'熊二'</span>)</span><br><span class="line">v2()</span><br></pre></td></tr></table></figure><h2 id="lambda-表达式"><a href="#lambda-表达式" class="headerlink" title="lambda 表达式"></a>lambda 表达式</h2><h3 id="用于表示简单的函数"><a href="#用于表示简单的函数" class="headerlink" title="用于表示简单的函数"></a>用于表示简单的函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 三元运算，为了解决简单的if else的情况，如：</span></span><br><span class="line"><span class="keyword">if</span> <span class="number">1</span> == <span class="number">1</span>:</span><br><span class="line">    a = <span class="number">123</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    a = <span class="number">456</span></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">a = <span class="number">123</span> <span class="keyword">if</span> <span class="number">1</span>==<span class="number">1</span> <span class="keyword">else</span> <span class="number">456</span></span><br><span class="line">print(a)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># lambda表达式，为了解决简单函数的情况，如：</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">funa</span><span class="params">(a1,a2)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> a1 + <span class="number">100</span></span><br><span class="line">print(funa(<span class="number">1</span>,<span class="number">3</span>))<span class="comment"># 101</span></span><br><span class="line"><span class="comment"># 相当于</span></span><br><span class="line">func = <span class="keyword">lambda</span> a1,a2: a1+<span class="number">100</span></span><br><span class="line">print(func(<span class="number">1</span>,<span class="number">3</span>))<span class="comment"># 101</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line">func1 = <span class="keyword">lambda</span> : <span class="number">100</span></span><br><span class="line">print(func1())   <span class="comment">#100</span></span><br><span class="line">func2 = <span class="keyword">lambda</span> x1: x1 * <span class="number">10</span></span><br><span class="line">print(func2(<span class="number">2</span>))     <span class="comment"># 20</span></span><br><span class="line"></span><br><span class="line">func3 = <span class="keyword">lambda</span> *args,**kwargs: len(args) + len(kwargs)</span><br><span class="line">print(func3(<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,k=<span class="string">"sdfgg"</span>，a = <span class="string">"dfgjh"</span>))     <span class="comment"># 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line">DATA = <span class="number">100</span></span><br><span class="line">func4 = <span class="keyword">lambda</span> a1: a1 + DATA</span><br><span class="line">v = func4(<span class="number">1</span>)</span><br><span class="line">print(v)<span class="comment"># 101</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例三</span></span><br><span class="line">DATA = <span class="number">100</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    DATA = <span class="number">1000</span></span><br><span class="line">    func4 = <span class="keyword">lambda</span> a1: a1 + DATA</span><br><span class="line">    v = func4(<span class="number">1</span>)</span><br><span class="line">    print(v)    <span class="comment"># 1001</span></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例四</span></span><br><span class="line">func5 = <span class="keyword">lambda</span> n1,n2: n1 <span class="keyword">if</span> n1 &gt; n2 <span class="keyword">else</span> n2</span><br><span class="line">v = func5(<span class="number">1111</span>,<span class="number">2</span>)</span><br><span class="line">print(v)    <span class="comment"># 1111</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习题1</span></span><br><span class="line">USER_LIST = []</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func0</span><span class="params">(x)</span>:</span></span><br><span class="line">    v = USER_LIST.append(x)</span><br><span class="line">    <span class="keyword">return</span> v</span><br><span class="line"></span><br><span class="line">result = func0(<span class="string">'柯南'</span>)</span><br><span class="line">print(result)<span class="comment"># None</span></span><br><span class="line">print(USER_LIST)<span class="comment"># ['柯南']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习题二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func0</span><span class="params">(x)</span>:</span></span><br><span class="line">    v = x.strip()</span><br><span class="line">    <span class="keyword">return</span> v </span><br><span class="line"></span><br><span class="line">result = func0(<span class="string">' 柯南 '</span>)</span><br><span class="line">print(result)<span class="comment"># 柯南</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习题三</span></span><br><span class="line">func_list = [<span class="keyword">lambda</span> x:x.strip(), <span class="keyword">lambda</span> y:y+<span class="number">199</span>,<span class="keyword">lambda</span> x,y:x+y]</span><br><span class="line"></span><br><span class="line">v1 = func_list[<span class="number">0</span>](<span class="string">'柯南 '</span>)</span><br><span class="line">print(v1)<span class="comment"># 柯南</span></span><br><span class="line"></span><br><span class="line">v2 = func_list[<span class="number">1</span>](<span class="number">100</span>)</span><br><span class="line">print(v2)<span class="comment"># 299</span></span><br><span class="line"></span><br><span class="line">v3 = func_list[<span class="number">2</span>](<span class="number">1</span>,<span class="number">2</span>)</span><br><span class="line">print(v3)<span class="comment"># 3</span></span><br></pre></td></tr></table></figure><h2 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h2><h3 id="强制转换"><a href="#强制转换" class="headerlink" title="强制转换"></a>强制转换</h3><p>dict() list() tuple() int() str() bool() set()</p><h3 id="输入和输出"><a href="#输入和输出" class="headerlink" title="输入和输出"></a>输入和输出</h3><p>input print</p><h3 id="其他函数"><a href="#其他函数" class="headerlink" title="其他函数"></a>其他函数</h3><p>len(长度) open(打开) id(查看内存) range(输出列表) type(查看类型)</p><h3 id="数学相关"><a href="#数学相关" class="headerlink" title="数学相关"></a>数学相关</h3><p>abs(绝对值) float(转成浮点型：小数) max(找到最大值) min(找到最小值) sum(求和) divmod(求两数相除商和余数，多用于分页)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">v = abs(<span class="number">-1</span>)</span><br><span class="line">print(v)<span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">v = <span class="number">55</span></span><br><span class="line">v1 = float(<span class="number">55</span>)</span><br><span class="line">print(v1)<span class="comment"># 55.0</span></span><br><span class="line"></span><br><span class="line">v = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">311</span>,<span class="number">21</span>,<span class="number">3</span>,]</span><br><span class="line">result = max(v)</span><br><span class="line">print(result)<span class="comment"># 311</span></span><br><span class="line"></span><br><span class="line">v = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">311</span>,<span class="number">21</span>,<span class="number">3</span>,]</span><br><span class="line">result = min(v)</span><br><span class="line">print(result)<span class="comment"># 1</span></span><br><span class="line"></span><br><span class="line">v = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">311</span>,<span class="number">21</span>,<span class="number">3</span>,]</span><br><span class="line">result = sum(v)</span><br><span class="line">print(result)<span class="comment">#338</span></span><br><span class="line"></span><br><span class="line">a,b = divmod(<span class="number">1001</span>,<span class="number">5</span>)</span><br><span class="line">print(a,b)<span class="comment"># 200  1</span></span><br></pre></td></tr></table></figure><h3 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h3><p>bin，将十进制转化成二进制(0b)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">13</span></span><br><span class="line">v1 = bin(num)</span><br><span class="line">print(v1)<span class="comment"># 0b1101</span></span><br></pre></td></tr></table></figure><p>oct，将十进制转换成八进制(0o)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">8</span></span><br><span class="line">v1 = oct(num)</span><br><span class="line">print(v1)<span class="comment"># 0o10</span></span><br></pre></td></tr></table></figure><p>int，将其他进制转化成十进制</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 二进制转化成十进制</span></span><br><span class="line">v1 = <span class="string">'0b1101'</span></span><br><span class="line">result = int(v1,base=<span class="number">2</span>)</span><br><span class="line">print(result)<span class="comment">#13</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 八进制转化成十进制</span></span><br><span class="line">v1 = <span class="string">'0o1101'</span></span><br><span class="line">result = int(v1,base=<span class="number">8</span>)</span><br><span class="line">print(result)<span class="comment"># 577</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 十六进制转化成十进制</span></span><br><span class="line">v1 = <span class="string">'0x1101'</span></span><br><span class="line">result = int(v1,base=<span class="number">16</span>)</span><br><span class="line">print(result)<span class="comment"># 4353</span></span><br></pre></td></tr></table></figure><p>hex，将十进制转换成十六进制(0x)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">num = <span class="number">16</span></span><br><span class="line">v1 = hex(num)</span><br><span class="line">print(v1)<span class="comment"># 0x10</span></span><br></pre></td></tr></table></figure><h3 id="编码相关"><a href="#编码相关" class="headerlink" title="编码相关"></a>编码相关</h3><p>chr，将十进制数字转换成unicode编码中的对应字符。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v = chr(<span class="number">99</span>)</span><br><span class="line">print(v)<span class="comment"># c</span></span><br></pre></td></tr></table></figure><p>ord，将字符转换成unicode编码中的对应数字</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">num = ord(<span class="string">'中'</span>)</span><br></pre></td></tr></table></figure><h3 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h3><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>会根据提供的函数对指定序列做映射</p><ul><li>第一个参数必须是一个函数</li><li>第二个函数必须是可迭代类型（可以for循环）</li><li>py2最后返回一个列表；py3最后返回一个对象（节省内存）</li></ul><p>循环每个元素（第二个参数），然后让每个元素执行函数（第一个）参数，将每个函数 执行的结果保存到新的列表中，并返回。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line">result = map(<span class="keyword">lambda</span> x :x+<span class="number">100</span>,v1)</span><br><span class="line">print(list(result))<span class="comment">#[111, 122, 133, 144]</span></span><br></pre></td></tr></table></figure><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>循环每个元素（第二个参数），然后让每个元素执行函数（第一个）参数进行判断，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line">v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="string">'fgd'</span>,<span class="string">'egfghg'</span>,<span class="number">44</span>,<span class="string">'sdf'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> type(x) == int:<span class="comment">#判断v1元素是不是整型</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span><span class="comment">#返回</span></span><br><span class="line">    <span class="keyword">return</span> Flase</span><br><span class="line">result = filter(func,v1)<span class="comment">#循环v1执行函数func,真的新建列表[11,]</span></span><br><span class="line">print(list(result))<span class="comment">#输出result，默认是对象，转化为列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等于</span></span><br><span class="line">result = filter(<span class="keyword">lambda</span> x: <span class="literal">True</span> <span class="keyword">if</span> type(x) == int <span class="keyword">else</span> <span class="literal">False</span> ,v1)</span><br><span class="line">print(list(result))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 等于</span></span><br><span class="line">result = filter(<span class="keyword">lambda</span> x: type(x) == int ,v1)</span><br><span class="line">print(list(result))</span><br></pre></td></tr></table></figure><h4 id="reduce"><a href="#reduce" class="headerlink" title="reduce"></a>reduce</h4><p>函数会对参数序列中元素进行累积。</p><p>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line"><span class="keyword">import</span> functools</span><br><span class="line">v1 = [<span class="string">'wo'</span>,<span class="string">'hao'</span>,<span class="string">'e'</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(x,y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x+y</span><br><span class="line">result = functools.reduce(func,v1)</span><br><span class="line">print(result)<span class="comment">#wohaoe</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 等于</span></span><br><span class="line">result = functools.reduce(<span class="keyword">lambda</span> x,y:x+y,v1)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><h4 id="type"><a href="#type" class="headerlink" title="type"></a>type</h4><p>查看类型/判断对象是否是类的实例（找到头）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> type(obj) = Foo:</span><br><span class="line">    print(<span class="string">"obj是Foo类的对象"</span>)</span><br></pre></td></tr></table></figure><h4 id="issubclass"><a href="#issubclass" class="headerlink" title="issubclass"></a>issubclass</h4><p>判断类是否是子类（到头都是）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Asd</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(Asd)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base1</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Base1)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">print(issubclass(Bar,Base))<span class="comment"># False</span></span><br><span class="line">print(issubclass(Foo,Asd))<span class="comment"># True</span></span><br></pre></td></tr></table></figure><h4 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance"></a>isinstance</h4><p>判断obj是否是Foo类或其基类的实例（对象），找到头都是</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Asd</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(Asd)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line">print(isinstance(obj,Foo))</span><br><span class="line">print(isinstance(obj,Asd))</span><br></pre></td></tr></table></figure><h4 id="super"><a href="#super" class="headerlink" title="super"></a>super</h4><p>根据self对象所属类的继承关系，按照顺序挨个找func方法并执行(找到第一个就不在找了)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'bar.func'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(Bar)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Base)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        v1 = super().func()</span><br><span class="line">        print(<span class="string">'foo.func'</span>,v1)</span><br><span class="line"></span><br><span class="line">obj = Foo()<span class="comment"># bar.func</span></span><br><span class="line">obj.func()<span class="comment"># foo.func 123</span></span><br><span class="line"><span class="comment"># super().func() 根据类的继承关系，按照顺序挨个找func方法并执行(找到第一个就不在找了)</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span><span class="params">(object)</span>:</span> <span class="comment"># Base -&gt; object</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        super().func()</span><br><span class="line">        print(<span class="string">'base.func'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bar</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'bar.func'</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(Base,Bar)</span>:</span> <span class="comment"># Foo -&gt; Base -&gt; Bar</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br><span class="line">obj.func()<span class="comment"># bar.func  base.func</span></span><br></pre></td></tr></table></figure><h2 id="装饰器"><a href="#装饰器" class="headerlink" title="装饰器"></a>装饰器</h2><h3 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 典例一</span></span><br><span class="line">v = <span class="number">1</span></span><br><span class="line">v = <span class="number">2</span></span><br><span class="line">print(v)<span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 典例二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">v = <span class="number">10</span></span><br><span class="line">v = func</span><br><span class="line">print(v)<span class="comment"># v 为函数地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 典例三</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">base</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">1</span>)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">2</span>)</span><br><span class="line">bar = base</span><br><span class="line">bar()<span class="comment"># 1</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 典例一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line">v = func()<span class="comment"># inner函数地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 典例二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        print(arg)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line">v1 = func(<span class="number">1</span>) </span><br><span class="line">v1()<span class="comment"># 1</span></span><br><span class="line">v2 = func(<span class="number">2</span>)</span><br><span class="line">v2()<span class="comment"># 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 典例三</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        arg()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">v1 = func(f1)</span><br><span class="line">v1()<span class="comment"># 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 典例四</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        arg()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line"></span><br><span class="line">v1 = func(f1)<span class="comment">#inner函数</span></span><br><span class="line">result = v1() <span class="comment">#执行f1函数 123</span></span><br><span class="line">print(result) <span class="comment">#返回值为None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 典例五</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(arg)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">return</span> arg()</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line"></span><br><span class="line">v1 = func(f1)<span class="comment"># inner函数</span></span><br><span class="line">result = v1() <span class="comment"># 执行inner函数 123 返回值为f1</span></span><br><span class="line">print(result)<span class="comment">#打印f1返回值</span></span><br></pre></td></tr></table></figure><h3 id="装饰器含义"><a href="#装饰器含义" class="headerlink" title="装饰器含义"></a>装饰器含义</h3><p>在不改变原函数内部代码的 基础上，在函数执行之前和之后自动执行某个功能</p><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(age)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">v = arg()</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line"><span class="keyword">return</span> inner</span><br><span class="line"> <span class="comment"># 第一步：执行func函数并将下面函数参数传递，相当于：fun(index)</span></span><br><span class="line"> <span class="comment"># 第二步：将func的返回值重新赋值给下面的函数名，index = func（index）</span></span><br><span class="line"><span class="meta">@func</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">666</span></span><br><span class="line">print(index)</span><br></pre></td></tr></table></figure><p>装饰器编写格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> 外层函数<span class="params">(参数)</span>：</span></span><br><span class="line"><span class="function"><span class="title">def</span> 内层函数<span class="params">(*args,**kwargs)</span></span></span><br><span class="line"><span class="function"><span class="title">return</span> 参数<span class="params">(*args,**kwargs)</span></span></span><br><span class="line"><span class="function"><span class="title">return</span> 内层函数</span></span><br></pre></td></tr></table></figure><p>装饰器应用格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@外层函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 参数<span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">index()</span><br></pre></td></tr></table></figure><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p><strong>为什么要加</strong> <code>*</code>args, <code>**</code>kwargs</p><p>答：可以接收参数函数里面任意值</p><p><strong>如果给好几个函数写一个统一的装饰器，怎么办？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a1</span><span class="params">(func)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span></span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">func</span><span class="params">(*args,**kwargs)</span></span></span><br><span class="line"><span class="function"><span class="title">return</span> <span class="title">inner</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">@<span class="title">a1</span></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@a1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@a1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p><strong>关于执行函数的前后</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a1</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span></span></span><br><span class="line"><span class="function">    <span class="title">print</span><span class="params">(<span class="string">"调用函数之前"</span>)</span></span></span><br><span class="line">        data = func(*args,**kwargs)# 执行函数并获取返回值</span><br><span class="line">        print(<span class="string">"调用函数之后"</span>)</span><br><span class="line">        <span class="keyword">return</span> data</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line"><span class="meta">@a1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="number">123</span>)</span><br><span class="line">index()</span><br></pre></td></tr></table></figure><h3 id="带参数的装饰器"><a href="#带参数的装饰器" class="headerlink" title="带参数的装饰器"></a>带参数的装饰器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一步：执行 ret = xxx(index)</span></span><br><span class="line"><span class="comment"># 第二步：将返回值赋值给 index = ret</span></span><br><span class="line"><span class="meta">@xxx</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第一步：执行 v1 = uuu(9)</span></span><br><span class="line"><span class="comment"># 第二步：ret = v1(index)</span></span><br><span class="line"><span class="comment"># 第三步：index = ret</span></span><br><span class="line"><span class="meta">@uuu(9)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 格式 </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(counter)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(fnc)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span></span></span><br><span class="line">        data = func(*args,**kwargs)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function">@<span class="title">x</span><span class="params">(<span class="number">9</span>)</span></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>查看带参数装饰器执行顺序</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span><span class="params">(counter)</span>:</span></span><br><span class="line">    print(<span class="string">'x函数'</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(func)</span>:</span></span><br><span class="line">        print(<span class="string">'wrapper函数'</span>)</span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">            print(<span class="string">'inner函数'</span>)</span><br><span class="line">            <span class="keyword">if</span> counter:</span><br><span class="line">                <span class="keyword">return</span> <span class="number">123</span></span><br><span class="line">            <span class="keyword">return</span> func(*args,**kwargs)</span><br><span class="line">        <span class="keyword">return</span> inner</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@x(True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fun990</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@x(False)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func10</span><span class="params">()</span>:</span><span class="comment"># x函数</span></span><br><span class="line">    <span class="keyword">pass</span>    <span class="comment"># wrapper函数</span></span><br></pre></td></tr></table></figure><h2 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>任务展示列表中所有数据</p><p>1、while + 索引 + 计数器</p><p>2、迭代器</p><h3 id="迭代器含义"><a href="#迭代器含义" class="headerlink" title="迭代器含义"></a>迭代器含义</h3><p>对某种对象（str/list/tuple/dict/set类创建的对象），可迭代对象中元素逐一获取。</p><p>什么是迭代器：具有’ __ next __ ‘ 的方法且每次调用都能获取可迭代对象中的每个元素（从前到后一一获取）</p><h3 id="迭代器使用"><a href="#迭代器使用" class="headerlink" title="迭代器使用"></a>迭代器使用</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 列表转换成迭代器：</span></span><br><span class="line">v1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line">v2 = iter(v1)<span class="comment">#v2就是迭代器</span></span><br><span class="line">v2 = v1.__iter__()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 迭代器想要获取每个值：</span></span><br><span class="line">result1 = v2.__next__()</span><br><span class="line">print(result1)</span><br><span class="line">result2 = v2.__next__()</span><br><span class="line">print(result2)</span><br><span class="line">result3 = v2.__next__()</span><br><span class="line">print(result3)</span><br><span class="line">result4 = v2.__next__()</span><br><span class="line">print(result4)</span><br><span class="line">result5 = v2.__next__()</span><br><span class="line">print(result5)</span><br><span class="line"><span class="comment"># 直到报错：StopIteration错误，表示已经迭代完毕。</span></span><br><span class="line"><span class="comment"># 或者循环获取迭代器中的内容</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">         val = v2.__next__()</span><br><span class="line">         print(val)</span><br><span class="line">     <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">         <span class="keyword">break</span></span><br></pre></td></tr></table></figure><p>如何判别一个对象是否是迭代器：内部是否有<code>__next__方法</code> 。</p><h3 id="for循环实质"><a href="#for循环实质" class="headerlink" title="for循环实质"></a>for循环实质</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.内部会将v1转换成迭代器</span></span><br><span class="line"><span class="comment"># 2.内部反复执行 迭代器.__next__()</span></span><br><span class="line"><span class="comment"># 3.取完不报错</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> v1:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h3 id="可迭代对象"><a href="#可迭代对象" class="headerlink" title="可迭代对象"></a>可迭代对象</h3><p>1、表象：可以被循环对象就可以称为是可迭代对象：”x” [1,2] {}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">obj = Foo()</span><br></pre></td></tr></table></figure><p>2、内部具有 <code>__iter__()</code> 方法且返回一个迭代器。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">v1 = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>]</span><br><span class="line">result = v1.__iter__()<span class="comment">#result 就是迭代器</span></span><br></pre></td></tr></table></figure><p>3、可以被for循环</p><p><strong>如何让一个对象变成可迭代对象？</strong></p><p>在类中实现<code>__iter__</code>方法且返回一个迭代器（生成器）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> iter([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])</span><br><span class="line">    </span><br><span class="line">obj = Foo()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__iter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">        <span class="keyword">yield</span> <span class="number">3</span></span><br><span class="line">        </span><br><span class="line">obj = Foo</span><br></pre></td></tr></table></figure><p>记住：只有能被for循环就是去看内部的iter方法。</p><h3 id="迭代器口诀"><a href="#迭代器口诀" class="headerlink" title="迭代器口诀"></a>迭代器口诀</h3><p>1、取一次就没有了</p><p>2、不取就不执行</p><p><strong>取迭代器的值得方法</strong></p><p>1、list</p><p>2、for循环</p><p>3、next</p><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><h3 id="实质"><a href="#实质" class="headerlink" title="实质"></a>实质</h3><p>就是函数的变异</p><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 生成器函数（内部是否包含yield）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"f1"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span></span><br><span class="line">    print(<span class="string">"f2"</span>)</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">2</span></span><br><span class="line">    print(<span class="string">"f3"</span>)</span><br><span class="line"><span class="comment"># 函数内部不会被执行，返回一个生成对象</span></span><br><span class="line">v1 = func()</span><br><span class="line"><span class="comment"># 生成器可以被for循环，一旦开始循环那么函数内部代码就会开始执行</span></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> v1:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 无限循环打印1，2,3.....</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    count = <span class="number">1</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        <span class="keyword">yield</span> count</span><br><span class="line">        count += <span class="number">1</span></span><br><span class="line">        </span><br><span class="line">val = func()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> val:</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>函数中如果存在yield，那么该函数就是一个生成器函数，调用生成器函数会返回一个生成器，生成器只有被for循环时，生成器函数内部的代码才会被执行,每次执行都会获取yield返回的值</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 读取大文件</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    分批去读取文件中的内容，将文件的内容返回给调用者。</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    cursor = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        f = open(<span class="string">'db'</span>, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>)<span class="comment"># 通过网络连接上redis</span></span><br><span class="line">        <span class="comment"># 代指   redis[0:10]</span></span><br><span class="line">        f.seek(cursor)</span><br><span class="line">        data_list =[]</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">            line = f.readline()</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> line:</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            data_list.append(line)</span><br><span class="line">        cursor = f.tell()</span><br><span class="line">        f.close()  <span class="comment"># 关闭与redis的连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> row <span class="keyword">in</span> data_list:</span><br><span class="line">            <span class="keyword">yield</span> row</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> func():</span><br><span class="line">    print(item)</span><br></pre></td></tr></table></figure><h3 id="redis-源码示例"><a href="#redis-源码示例" class="headerlink" title="redis 源码示例"></a>redis 源码示例</h3><p><img src="http://px8otgor7.bkt.clouddn.com/1555662579169.png" alt="1555662579169"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于Python中函数的小、中、高级的用法，闭包，lambda表达式，内置函数，以及什么是装饰器、迭代器、生成器等&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python函数基础</title>
    <link href="http://www.danpinsuiyue.com/637384435.html"/>
    <id>http://www.danpinsuiyue.com/637384435.html</id>
    <published>2019-02-20T13:07:22.000Z</published>
    <updated>2019-10-26T10:50:41.078Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于Python中函数的概念、基本概念、返回值、参数、作用域等</strong></p><a id="more"></a><h2 id="基本结构"><a href="#基本结构" class="headerlink" title="基本结构"></a>基本结构</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>本质：将多行代码拿到别处并起个名字，以后通过名字就可以找到这行代码并执行</p><h3 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h3><p>代码重复执行</p><p>代码量很多超过一屏，可以选择通过函数进行代码的分割</p><p>写代码方式：面向过程—-函数式编程（多）—-面向对象编程</p><h3 id="基本结构-1"><a href="#基本结构-1" class="headerlink" title="基本结构"></a>基本结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 函数的定义</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> 函数名<span class="params">()</span>:</span></span><br><span class="line">函数内容</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"><span class="comment"># 函数的执行</span></span><br><span class="line">函数名()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_data</span><span class="params">()</span>:</span></span><br><span class="line">v = [<span class="number">11</span>,<span class="number">54</span>,<span class="number">52</span>]</span><br><span class="line">print(v[<span class="number">1</span>])</span><br><span class="line">list_data()<span class="comment"># 54</span></span><br></pre></td></tr></table></figure><p><strong><u>函数如果不被调用，则内部永远不会被执行</u></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习题</span></span><br><span class="line"><span class="comment"># 1.请写一个函数，函数计算列表 info = [11,22,33,44,55]中所有元素的和</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_data</span><span class="params">()</span>:</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    info = [<span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> info:</span><br><span class="line">        s = s + i</span><br><span class="line">    print(s)</span><br><span class="line">list_data()<span class="comment"># 165</span></span><br><span class="line"><span class="comment"># 2.请写一个函数，用函数将列表拼接起来</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_list</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    c = []</span><br><span class="line">    c.extend(a)</span><br><span class="line">    c.extend(b)</span><br><span class="line">    print(c)</span><br><span class="line">a1 = [<span class="number">555</span>,<span class="number">4</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line">a2 = [<span class="number">5646</span>,<span class="number">86</span>,<span class="number">6</span>,]</span><br><span class="line">new_list(a1,a2)<span class="comment"># [555, 4, 6, 5, 6, 5646, 86, 6]</span></span><br><span class="line"><span class="comment"># 3.计算一个列表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">list_len</span><span class="params">(age)</span>:</span></span><br><span class="line">    conten = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> age:</span><br><span class="line">        conten +=<span class="number">1</span></span><br><span class="line">    print(conten)</span><br><span class="line">v = [<span class="number">11</span>,<span class="number">2</span>,<span class="string">'rtffd'</span>,<span class="string">'r'</span>,<span class="string">'g'</span>,<span class="string">'fsd'</span>,<span class="number">77</span>]</span><br><span class="line">list_len(v)<span class="comment"># 7</span></span><br></pre></td></tr></table></figure><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>函数没有返回值，默认返回：None</p><p>函数内部执行过程中遇到return，就终止。</p><p>return 可以返回任意类型</p><p>如果return后面写了多个结果,,返回给调用者一个tuple(元祖),调用者可以直接使用解构获取多个变量</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">v = func()</span><br><span class="line">print(v)<span class="comment"># (1, 2, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 特殊:多个返回值，返回值为元组</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">5</span>,<span class="number">8</span>,<span class="string">"alex"</span></span><br><span class="line"></span><br><span class="line">v = func()</span><br><span class="line">print(v)<span class="comment"># (5, 8, 'alex')</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(age)</span>:</span></span><br><span class="line"><span class="comment">#函数</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">9</span><span class="comment"># 返回默认值为9，默认：return None</span></span><br><span class="line">val = func(<span class="string">'asdfghj'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line"><span class="number">1.</span>让用户输入一段字符串，计算字符串中有多少个A字符的个数，有多少就在a.txt中写多少个<span class="string">"大王八"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jisuan_a</span><span class="params">(aa)</span>:</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> aa:</span><br><span class="line">        <span class="keyword">if</span> i ==<span class="string">'A'</span>:</span><br><span class="line">            s+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">xieru_d</span><span class="params">(bb)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> len(bb) == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'a.txt'</span>,mode=<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(bb)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">a = input(<span class="string">"请用户输入"</span>)</span><br><span class="line">a1 = jisuan_a(a)</span><br><span class="line">b = <span class="string">"大王八"</span> * a1</span><br><span class="line">b1 = xieru_d(b)</span><br><span class="line">print(b1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line"><span class="number">2.</span> 写函数，计算一个列表中有多少个数字，打印： 列表中有%s个数字。</span><br><span class="line"><span class="comment"># #    提示：type('x') == int 判断是否是数字。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_list</span><span class="params">(b)</span>:</span></span><br><span class="line">    s = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">        <span class="keyword">if</span> type(i) == int:</span><br><span class="line">            s = s + <span class="number">1</span></span><br><span class="line">    print(s)</span><br><span class="line"></span><br><span class="line">a = input(<span class="string">"请输入列表"</span>)</span><br><span class="line">a = a_list(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例三</span></span><br><span class="line"><span class="number">2.</span> 写函数，计算一个列表中偶数索引位置的数据构造成另外一个列表，并返回。</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_list</span><span class="params">(b)</span>:</span></span><br><span class="line">    b1 = b[::<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">return</span> b1</span><br><span class="line">a = input(<span class="string">"请输入列表"</span>)</span><br><span class="line">a = a_list(a)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例三</span></span><br><span class="line"><span class="number">3.</span> 读取文件，将文件的内容构造成指定格式的数据，并返回。</span><br><span class="line">a.log文件</span><br><span class="line">    alex|<span class="number">123</span>|<span class="number">18</span></span><br><span class="line">    eric|uiuf|<span class="number">19</span></span><br><span class="line">    ...</span><br><span class="line">目标结构：</span><br><span class="line">a.  [<span class="string">"alex|123|18"</span>,<span class="string">"eric|uiuf|19"</span>] 并返回。</span><br><span class="line">b. [[<span class="string">'alex'</span>,<span class="string">'123'</span>,<span class="string">'18'</span>],[<span class="string">'eric'</span>,<span class="string">'uiuf'</span>,<span class="string">'19'</span>]]</span><br><span class="line">c. [</span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'alex'</span>,<span class="string">'pwd'</span>:<span class="string">'123'</span>,<span class="string">'age'</span>:<span class="string">'18'</span>&#125;,</span><br><span class="line">&#123;<span class="string">'name'</span>:<span class="string">'eric'</span>,<span class="string">'pwd'</span>:<span class="string">'uiuf'</span>,<span class="string">'age'</span>:<span class="string">'19'</span>&#125;,</span><br><span class="line">]</span><br><span class="line"><span class="comment"># a</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_1</span><span class="params">(a)</span>:</span></span><br><span class="line">    b = []</span><br><span class="line"> <span class="comment">#   a = open('log.txt',mode='r',encoding='utf-8')</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        i = i.strip()</span><br><span class="line">        b.append(i)</span><br><span class="line">    print(b)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">a1 = a_1(open(<span class="string">'log.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_1</span><span class="params">(a)</span>:</span></span><br><span class="line">    b = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        i = i.strip()</span><br><span class="line">        i = i.split(<span class="string">'|'</span>)</span><br><span class="line">        b.append(i)</span><br><span class="line">    print(b)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">a1 = a_1(open(<span class="string">'log.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># c</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">a_1</span><span class="params">(a)</span>:</span></span><br><span class="line">    b = []</span><br><span class="line">    c = &#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">        i = i.strip()</span><br><span class="line">        i = i.split(<span class="string">'|'</span>)</span><br><span class="line">        c[<span class="string">'name'</span>] = i[<span class="number">0</span>]</span><br><span class="line">        c[<span class="string">'pwd'</span>] = i[<span class="number">1</span>]</span><br><span class="line">        c[<span class="string">'age'</span>] = i[<span class="number">2</span>]</span><br><span class="line">    b.append(c)</span><br><span class="line">    print(b)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">a1 = a_1(open(<span class="string">'log.txt'</span>,mode=<span class="string">'r'</span>,encoding=<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><h3 id="形参、实参"><a href="#形参、实参" class="headerlink" title="形参、实参"></a>形参、实参</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_data</span><span class="params">(a)</span>:</span><span class="comment">#a为形式参数（或形参） </span></span><br><span class="line">v = [<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>,,<span class="number">8</span>,<span class="number">5</span>]</span><br><span class="line">print(v[a])</span><br><span class="line">get_data(<span class="number">1</span>)<span class="comment"># 1在调用函数是传递叫：实际参数（实参）</span></span><br><span class="line"><span class="comment"># 严格按照顺序传参数：位置方式传参。</span></span><br><span class="line"><span class="comment"># 实际参数可以是任意类型。</span></span><br></pre></td></tr></table></figure><h3 id="基本参数"><a href="#基本参数" class="headerlink" title="基本参数"></a>基本参数</h3><p>任意个数</p><p>任意类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a1,a2,a3)</span>:</span></span><br><span class="line">    print(a1,a2,a3)    </span><br><span class="line">func(<span class="number">1</span>,<span class="string">"asdf"</span>,<span class="literal">True</span>)<span class="comment"># 1 asdf True</span></span><br></pre></td></tr></table></figure><h3 id="位置传参"><a href="#位置传参" class="headerlink" title="位置传参"></a>位置传参</h3><p>调用函数并传入函数【执行】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a1,a2)</span>:</span></span><br><span class="line">print(a1,a2)</span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>)<span class="comment"># 11 22</span></span><br></pre></td></tr></table></figure><h3 id="关键字传参"><a href="#关键字传参" class="headerlink" title="关键字传参"></a>关键字传参</h3><p>【执行】</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 典例一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a1,a2)</span>:</span></span><br><span class="line">print(a1,a2)</span><br><span class="line">func(a2=<span class="number">11</span>,a1=<span class="number">22</span>)<span class="comment"># 22 11</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 典例二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a1,a2)</span>:</span></span><br><span class="line">print(a1,a2)</span><br><span class="line">func(<span class="number">11</span>,a2=<span class="number">22</span>)<span class="comment"># 11 22</span></span><br></pre></td></tr></table></figure><p>位置传参&gt;关键字传参（顺序）</p><p>位置传参 + 关键字传参 = 总传参个数</p><p>前面是关键字传参，后面也必须关键字传参</p><h3 id="默认参数"><a href="#默认参数" class="headerlink" title="默认参数"></a>默认参数</h3><p>【参数】 对于函数的默认值慎用可变类型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果要想给value设置默认是空列表</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 不推荐(坑)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(data,value=[])</span>:</span> </span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 推荐</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(data,value=None)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> value:</span><br><span class="line">        value = []</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 练习    </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(data,value=[])</span>:</span> </span><br><span class="line">    value.append(data)</span><br><span class="line">    <span class="keyword">return</span> value </span><br><span class="line"></span><br><span class="line">v1 = func(<span class="number">1</span>) <span class="comment"># [1,]</span></span><br><span class="line">v2 = func(<span class="number">1</span>,[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>]) <span class="comment"># [11,22,33,1]</span></span><br></pre></td></tr></table></figure><p><strong>def func(a,b=[]) 有什么陷阱？</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 典例一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b=[])</span>:</span></span><br><span class="line">    b.append(a)</span><br><span class="line">    <span class="keyword">return</span> b</span><br><span class="line"></span><br><span class="line">l1 = func(<span class="number">1</span>)</span><br><span class="line">print(l1)<span class="comment"># [1]</span></span><br><span class="line">l2 = func(<span class="number">2</span>,[<span class="number">11</span>,<span class="number">22</span>])</span><br><span class="line">print(l2)<span class="comment"># [11,22,2]</span></span><br><span class="line">l3 = func(<span class="number">3</span>)</span><br><span class="line">print(l3)<span class="comment"># [1,2]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a,b=[])</span>:</span></span><br><span class="line">    b.append(a)</span><br><span class="line">    print(b)</span><br><span class="line">    </span><br><span class="line">func(<span class="number">1</span>)<span class="comment"># [1]</span></span><br><span class="line">func(<span class="number">2</span>,[<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>])<span class="comment"># [11,22,33,2]</span></span><br><span class="line">func(<span class="number">3</span>)<span class="comment"># [1,3]</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a1,a2,a3=<span class="number">9</span>,a4=<span class="number">10</span>)</span>:</span></span><br><span class="line">    print(a1,a2,a3,a4)</span><br><span class="line"></span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>)<span class="comment"># 11,22,9,10</span></span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>,<span class="number">10</span>)<span class="comment"># 11,22,10,10</span></span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>,<span class="number">10</span>,<span class="number">100</span>)<span class="comment"># 11,22,10,100</span></span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>,<span class="number">10</span>,a4=<span class="number">100</span>)<span class="comment"># 11,22,10,100</span></span><br><span class="line">func(<span class="number">11</span>,<span class="number">22</span>,a3=<span class="number">10</span>,a4=<span class="number">100</span>)<span class="comment"># 11,22,10,100</span></span><br><span class="line">func(<span class="number">11</span>,a2=<span class="number">22</span>,a3=<span class="number">10</span>,a4=<span class="number">100</span>)<span class="comment"># 11,22,10,100</span></span><br><span class="line">func(a1=<span class="number">11</span>,a2=<span class="number">22</span>,a3=<span class="number">10</span>,a4=<span class="number">100</span>)<span class="comment"># 11,22,10,100</span></span><br></pre></td></tr></table></figure><h3 id="万能参数"><a href="#万能参数" class="headerlink" title="万能参数"></a>万能参数</h3><p>【打散】</p><h4 id="args"><a href="#args" class="headerlink" title="*args"></a>*args</h4><p>可以接受任意个数的位置参数，并将参数转换成元组.</p><p>调用函数无 *</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line">func((<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))<span class="comment"># ((1,2,3,4),)</span></span><br><span class="line">func([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])<span class="comment"># ([1, 2, 3, 4],)</span></span><br></pre></td></tr></table></figure><p>调用函数有 *</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line">func(*(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>))<span class="comment"># (1, 2, 3, 4)</span></span><br><span class="line">func(*[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>])<span class="comment"># (1, 2, 3, 4)</span></span><br></pre></td></tr></table></figure><p>只能用位置传参</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args)</span>:</span></span><br><span class="line">    print(args)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>)<span class="comment"># ()</span></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>) <span class="comment"># (1,2) </span></span><br><span class="line">func((<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>)) <span class="comment"># ((11,22,33,44,55),)</span></span><br><span class="line">func(*(<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="number">44</span>,<span class="number">55</span>)) <span class="comment"># (11,22,33,44,55)</span></span><br></pre></td></tr></table></figure><h4 id="kwargs"><a href="#kwargs" class="headerlink" title="**kwargs"></a>**kwargs</h4><p>可以接受任意个数的关键字参数，并将参数转换成字典。</p><p>调用函数无 **</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    print(kwargs)</span><br><span class="line"></span><br><span class="line">func(k1=<span class="number">1</span>,k2=<span class="string">"alex"</span>)<span class="comment"># &#123;'k1':1,'k2':'alex'&#125;</span></span><br></pre></td></tr></table></figure><p>调用函数有**</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(**kwargs)</span>:</span></span><br><span class="line">    print(kwargs)</span><br><span class="line">func(**&#123;<span class="string">'k1'</span>:<span class="string">'v2'</span>,<span class="string">'k2'</span>:<span class="string">'v2'</span>&#125;) <span class="comment"># &#123;'k1':'v2','k2':'v2'&#125;</span></span><br></pre></td></tr></table></figure><p>只能用关键字传参</p><p>综合应用：无敌 + 无敌 =&gt; 真无敌</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">    print(args,kwargs)</span><br><span class="line"></span><br><span class="line">func(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,k1=<span class="number">2</span>,k5=<span class="number">9</span>,k19=<span class="number">999</span>)<span class="comment">#(1, 2, 3, 4, 5) &#123;'k1': 2, 'k5': 9, 'k19': 999&#125;</span></span><br><span class="line">func([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],k1=<span class="number">2</span>,k5=<span class="number">9</span>,k19=<span class="number">999</span>)<span class="comment"># ([1, 2, 3],) &#123;'k1': 2, 'k5': 9, 'k19': 999&#125;</span></span><br><span class="line">func([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],**&#123;<span class="string">'k1'</span>:<span class="number">1</span>,<span class="string">'k2'</span>:<span class="number">3</span>&#125;)<span class="comment"># (1, 2, 3) &#123;'k1': 1, 'k2': 3&#125;</span></span><br><span class="line">func(<span class="number">111</span>,<span class="number">222</span>,*[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],k11=<span class="string">'alex'</span>,**&#123;<span class="string">'k1'</span>:<span class="number">1</span>,<span class="string">'k2'</span>:<span class="number">3</span>&#125;)<span class="comment">#(111, 222, 1, 2, 3) &#123;'k11': 'alex', 'k1': 1, 'k2': 3&#125;</span></span><br></pre></td></tr></table></figure><h4 id="参数相关重点"><a href="#参数相关重点" class="headerlink" title="参数相关重点"></a>参数相关重点</h4><p>定义函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func1</span><span class="params">(a1,a2)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func2</span><span class="params">(a1,a2=None)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func3</span><span class="params">(*args,**kwargs)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>调用函数</p><p>位置参数 &gt; 关键字参数</p><h2 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h2><p>python中</p><p>py文件：全局作用域</p><p>函数：局部作用域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s1</span><span class="params">()</span>:</span></span><br><span class="line">    x1 = <span class="number">666</span></span><br><span class="line">    print(x1)<span class="comment">#666</span></span><br><span class="line">    print(a)<span class="comment">#1</span></span><br><span class="line">    print(b)<span class="comment">#2</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span></span><br><span class="line">print(a)<span class="comment">#1</span></span><br><span class="line">s1()</span><br><span class="line">a = <span class="number">88888</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">s2</span><span class="params">()</span>:</span></span><br><span class="line">    print(a,b)<span class="comment">#88888,2</span></span><br><span class="line">    s1()<span class="comment">#666,88888,2</span></span><br><span class="line"></span><br><span class="line">s2()</span><br></pre></td></tr></table></figure><p>一个函数是一个作用域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">9</span></span><br><span class="line">    print(x)<span class="comment">#9</span></span><br><span class="line">func()</span><br><span class="line">print(x)<span class="comment">#9</span></span><br></pre></td></tr></table></figure><p>作用域中查找数据规则：优先在自己的作用域找数据，自己没有就去 “父级” -&gt; “父级” -&gt; 直到全局，全部么有就报错。注意：父级作用域中的值到底是什么？</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">9</span></span><br><span class="line">    print(x)<span class="comment">#9</span></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 练习题</span></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">9</span></span><br><span class="line">    print(x)<span class="comment">#9</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x1</span><span class="params">()</span>:</span></span><br><span class="line">        x = <span class="number">999</span></span><br><span class="line">        print(x)<span class="comment"># 999</span></span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line"></span><br><span class="line">x = <span class="number">10</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    x = <span class="number">9</span></span><br><span class="line">    print(x)    <span class="comment"># 9</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">x1</span><span class="params">()</span>:</span></span><br><span class="line">        x = <span class="number">999</span></span><br><span class="line">        print(x)    <span class="comment"># 999</span></span><br><span class="line">    print(x)    <span class="comment"># 9</span></span><br><span class="line">    x1()</span><br><span class="line"></span><br><span class="line">func()</span><br></pre></td></tr></table></figure><p>子作用域中只能 找到父级中的值 ，默认无法重新为父级的变量进行赋值，但可以修改。(global/nonlocal可以强制做)</p><p>global ：对全局的变量进行赋值</p><p>nonlocal ： 找到上一级的局部变量进行赋值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line">name = <span class="string">'熊大'</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'熊二'</span> <span class="comment"># 在自己作用域再创建一个这样的值。</span></span><br><span class="line">    print(name)<span class="comment"># 熊二</span></span><br><span class="line">func()</span><br><span class="line">print(name)<span class="comment"># 熊大</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line">name = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">43</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    name.append(<span class="number">999</span>)</span><br><span class="line">    print(name)<span class="comment"># [1, 2, 43, 999]</span></span><br><span class="line">func()</span><br><span class="line">print(name)<span class="comment">#[1, 2, 43, 999]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例三</span></span><br><span class="line">name = [<span class="string">"熊大"</span>,<span class="string">'熊二'</span>]</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">global</span> name</span><br><span class="line">    name = <span class="string">'我'</span></span><br><span class="line">    print(name)<span class="comment"># 我</span></span><br><span class="line">func()</span><br><span class="line">print(name)<span class="comment"># 我</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例四</span></span><br><span class="line">name = <span class="string">"熊大"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'熊二'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">global</span> name</span><br><span class="line">        name = <span class="number">999</span></span><br><span class="line">    inner()</span><br><span class="line">    print(name)<span class="comment"># 熊二</span></span><br><span class="line">func()</span><br><span class="line">print(name)<span class="comment"># 999</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例五</span></span><br><span class="line">name = <span class="string">"熊大"</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'熊二'</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">()</span>:</span></span><br><span class="line">        <span class="keyword">nonlocal</span> name <span class="comment"># </span></span><br><span class="line">        name = <span class="number">999</span></span><br><span class="line">    inner()</span><br><span class="line">    print(name)<span class="comment"># 999</span></span><br><span class="line">func()</span><br><span class="line">print(name)<span class="comment"># 熊大</span></span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><h3 id="基本结构-2"><a href="#基本结构-2" class="headerlink" title="基本结构"></a>基本结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 情况一</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f1</span><span class="params">()</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">f1()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 情况二</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a1)</span>:</span></span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line">f2(<span class="number">123</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 情况三</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f3</span><span class="params">()</span>：</span></span><br><span class="line"><span class="function"><span class="title">return</span> 1</span></span><br><span class="line">v1 = f3()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 情况四</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f4</span><span class="params">(a1,a2)</span>:</span></span><br><span class="line"><span class="comment">#....</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">333</span></span><br><span class="line">v2 = f4(<span class="number">1</span>,<span class="number">22</span>)</span><br></pre></td></tr></table></figure><p>if<code>__name__</code> == ‘<code>__main__</code>‘</p><p><code>__name__</code> == ‘<code>__main__</code>‘ 执行的文件就是<code>__name__</code>所在的文件控制当这个py文件被当作脚本直接执行的时候，就执行这里面的代码</p><p><code>__name__</code> == ‘文件名’ <code>__name__</code>就是所在文件被导入的时候当这个py文件被当作模块导入的时候，就不执行这里面的代码</p><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><p>调用（执行）函数时，传参：位置参数 &gt; 关键字参数</p><p>定义函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">(a)</span></span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="title">def</span> <span class="title">func</span><span class="params">(a,b=None)</span>   # 对于默认值，如果是可变类型，----&gt; 坑。 </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">def func(*args,**kwargs)</span></span><br></pre></td></tr></table></figure><h3 id="作用域-1"><a href="#作用域-1" class="headerlink" title="作用域"></a>作用域</h3><p>函数为作用域</p><p>自己 &gt; 父级 &gt; 父级 &gt; 全局 【读/修改（可变）】</p><p>重新赋值：</p><p>​ global</p><p>​ nonlocal</p><p>全部变量以后必须全部是大写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">USER_LIST = [<span class="number">11</span>,<span class="number">22</span>,<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">func</span><span class="params">()</span>:</span></span><br><span class="line">    name = <span class="string">'asdf'</span></span><br><span class="line">    USER_LIST.append(<span class="number">12</span>)</span><br><span class="line">    USER_LIST.append(name)</span><br><span class="line"></span><br><span class="line">func()</span><br><span class="line">print(USER_LIST)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于Python中函数的概念、基本概念、返回值、参数、作用域等&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python的那个文件操作</title>
    <link href="http://www.danpinsuiyue.com/156538331.html"/>
    <id>http://www.danpinsuiyue.com/156538331.html</id>
    <published>2019-02-18T15:04:16.000Z</published>
    <updated>2019-10-25T12:47:56.080Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍Python中的文件操作具体都有哪些模式</strong></p><a id="more"></a><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p>用word操作一个文件的流程如下：</p><ol><li>找到文件，双击打开</li><li>读或修改</li><li>保存&amp;关闭</li></ol><p>用python操作文件也差不多：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">f=open(filename)  </span><br><span class="line"><span class="comment"># 打开文件f.write("我是野生程序员") </span></span><br><span class="line"><span class="comment"># 写操作f.read()  </span></span><br><span class="line"><span class="comment"># 读操作f.close() </span></span><br><span class="line"><span class="comment"># 保存并关闭</span></span><br></pre></td></tr></table></figure><p>不过有一点跟人肉操作word文档不同，就是word文档只要打开了，就即可以读、又可以修改。 但Python比较变态，只能以读、创建、追加 3种模式中的任意一种打开文件，不能即写又读。</p><h2 id="操作模式"><a href="#操作模式" class="headerlink" title="操作模式"></a>操作模式</h2><ul><li>r 只读模式</li><li>w 创建模式，若文件已存在，则覆盖旧文件</li><li>a 追加模式，新数据会写到文件末尾</li></ul><h3 id="创建文件"><a href="#创建文件" class="headerlink" title="创建文件"></a>创建文件</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = open(file=<span class="string">'D:/工作日常/work.txt'</span>,mode=<span class="string">'w'</span>)</span><br><span class="line">f.write(<span class="string">"经理\n"</span>)</span><br><span class="line">f.write(<span class="string">"秘书\n"</span>)</span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="只读模式"><a href="#只读模式" class="headerlink" title="只读模式"></a>只读模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f = open(file=<span class="string">'兼职白领学生空姐模特护士联系方式.txt'</span>,mode=<span class="string">'r'</span>)</span><br><span class="line">print(f.readline())  <span class="comment"># 读一行print('------分隔符-------')</span></span><br><span class="line">data = f.read()  <span class="comment"># 读所有，剩下的所有</span></span><br><span class="line">print(data)f.close()</span><br></pre></td></tr></table></figure><h3 id="追加模式"><a href="#追加模式" class="headerlink" title="追加模式"></a>追加模式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">f = open(file=<span class="string">'兼职白领学生空姐模特护士联系方式.txt'</span>,mode=<span class="string">'a'</span>)</span><br><span class="line">f.write(<span class="string">"白雪公主 北京  168  48\n"</span>)  <span class="comment"># 会追加到文件尾部</span></span><br><span class="line">f.close()</span><br></pre></td></tr></table></figure><h3 id="其它功能"><a href="#其它功能" class="headerlink" title="其它功能"></a>其它功能</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">mode</span><span class="params">(self)</span> -&gt; str:</span>        </span><br><span class="line">    返回文件打开的模式 </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span> -&gt; str:</span>        </span><br><span class="line">    返回文件名    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fileno</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown        </span></span><br><span class="line">    返回文件句柄在内核中的索引值，以后做IO多路复用时可以用到    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">flush</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown        </span></span><br><span class="line">    把文件从内存buffer里强制刷新到硬盘    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readable</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown        </span></span><br><span class="line">    判断是否可读    </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">readline</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown        </span></span><br><span class="line">    只读一行，遇到\r <span class="keyword">or</span> \n为止    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seek</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown        </span></span><br><span class="line">    把操作文件的光标移到指定位置        </span><br><span class="line">    *注意seek的长度是按字节算的， 字符编码存每个字符所占的字节长度不一样。</span><br><span class="line">    如“小兔崽子” 用gbk存是<span class="number">2</span>个字节一个字，用utf<span class="number">-8</span>就是<span class="number">3</span>个字节，因此以gbk打开时，seek(<span class="number">4</span>) 就把光标切换到了“兔”和“崽”两个字中间。</span><br><span class="line">    但如果是utf8,seek(<span class="number">4</span>)会导致，拿到了兔这个字的一部分字节，打印的话会报错，因为处理剩下的文本时发现用utf8处理不了了，因为编码对不上了。少了一个字节   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">seekable</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown        </span></span><br><span class="line">    判断文件是否可进行seek操作    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">tell</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown        </span></span><br><span class="line">    返回当前文件操作光标位置</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">truncate</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown        </span></span><br><span class="line">    按指定长度截断文件        </span><br><span class="line">    *指定长度的话，就从文件开头开始截断指定长度，不指定长度的话，就从当前位置到文件尾部的内容全去掉。   </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writable</span><span class="params">(self, *args, **kwargs)</span>:</span> <span class="comment"># real signature unknown        </span></span><br><span class="line">    判断文件是否可写</span><br></pre></td></tr></table></figure><h3 id="混合模式"><a href="#混合模式" class="headerlink" title="混合模式"></a>混合模式</h3><p>其实我一直像你隐瞒，因为怕你觉得复杂。 打开文件其实还有3种混合模式</p><p>w+ 写读 , 这个功能基本没什么意义，它会创建一个新文件 ，写一段内容，可以再把写的内容读出来，没什么卵用。</p><p>r+ 读写，能读能写,但都是写在文件最后，跟追加一样</p><p>a+ 追加读,文件 一打开时光标会在文件尾部,写的数据全会是追加的形式</p><h3 id="r-模式"><a href="#r-模式" class="headerlink" title="r+模式"></a><strong>r+模式</strong></h3><p>因为默认就是往文件 尾部写</p><h3 id="修改文件"><a href="#修改文件" class="headerlink" title="修改文件"></a>修改文件</h3><p>尝试直接以r+模式打开文件，默认会把新增的内容追加到文件最后面。但我想要的是修改中间的内容 ，怎么办？ 为什么会把内容添加到尾部呢？</p><p><strong>问：为什么原有数据会被覆盖呢？</strong></p><p>这是硬盘的存储原理导致的，当你把文件存到硬盘上，就在硬盘上划了一块空间，存数据，等你下次打开这个文件 ，seek到一个位置，每改一个字，就是把原来的覆盖掉，如果要插入，是不可能的，因为后面的数据在硬盘上不会整体向后移。所以就出现 当前这个情况 ，你想插入，却变成了会把旧内容覆盖掉。</p><p><strong>问：但是人家word, vim 都可以修改文件 呀，你这不能修改算个什么玩意？</strong></p><p>我并没说就不能修改了，你想修改当然可以，就是不要在硬盘上修改，把内容全部读到内存里，数据在内存里可以随便增删改查，修改之后，把内容再全部写回硬盘，把原来的数据全部覆盖掉。vim word等各种文本编辑器都是这么干的。</p><p><strong>问：说的好像有道理，但你又没看过word软件的源码，你凭什么这么笃定？</strong></p><p>哈哈，我不需要看源码，硬盘 的存储原理决定了word必须这么干 ，不信的话，还有个简单的办法来确认我说的，就是用word or vim读一个编辑一个大文件 ，至少几百MB的，你 会发现，加载过程会花个数十秒，这段时间干嘛了？ cpu 去玩了？去上厕所啦？ 当然不是，是在努力把数据 从硬盘上读到内存里。</p><p><strong>问：但是文件如果特别大，比如5个GB,读到内存，就一下子吃掉了5GB内存，好费资源呀，有没有更好的办法呢？</strong></p><p>如果不想占内存，只能用另外一种办法啦，就是边读边改， 什么意思？ 不是不能改么？是不能改原文件 ，但你可以打开旧文件 的同时，生成一个新文件呀，边从旧的里面一行行的读，边往新的一行行写，遇到需要修改就改了再写到新文件 ，这样，在内存里一直只存一行内容。就不占内存了。 但这样也有一个缺点，就是虽然不占内存 ，但是占硬盘，每次修改，都要生成一份新文件，虽然改完后，可以把旧的覆盖掉，但在改的过程中，还是有2份数据 的。</p><p><strong>问：还有更好的方式么？</strong></p><p>有完没完？ 没了。</p><p><strong>占硬盘方式的文件修改代码示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">f_name = <span class="string">"兼职白领学生空姐模特护士联系方式.txt"</span></span><br><span class="line">f_new_name = <span class="string">"%s.new"</span> % f_name</span><br><span class="line">old_str = <span class="string">"刘诺涵"</span></span><br><span class="line">new_str = <span class="string">"[黑姑娘]"</span></span><br><span class="line">f = open(f_name,<span class="string">'r'</span>)</span><br><span class="line">f_new = open(f_new_name,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:    </span><br><span class="line">    <span class="keyword">if</span> old_str <span class="keyword">in</span> line:        </span><br><span class="line">        new_line = line.replace(old_str,new_str)    </span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        new_line = line    </span><br><span class="line">    f_new.write(new_line)</span><br><span class="line">f.close()</span><br><span class="line">f_new.close()</span><br></pre></td></tr></table></figure><p>上面的代码，会生成一个修改后的新文件 ，原文件不动，若想覆盖原文件</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">f_name = <span class="string">"兼职白领学生空姐模特护士联系方式.txt"</span></span><br><span class="line">f_new_name = <span class="string">"%s.new"</span> % f_name</span><br><span class="line">old_str = <span class="string">"刘诺涵"</span></span><br><span class="line">new_str = <span class="string">"[黑姑娘]"</span></span><br><span class="line">f = open(f_name,<span class="string">'r'</span>)</span><br><span class="line">f_new = open(f_new_name,<span class="string">'w'</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> f:    </span><br><span class="line">    <span class="keyword">if</span> old_str <span class="keyword">in</span> line:        </span><br><span class="line">        new_line = line.replace(old_str,new_str)    </span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        new_line = line</span><br><span class="line">    f_new.write(new_line)</span><br><span class="line">    </span><br><span class="line">f.close()</span><br><span class="line">f_new.close()</span><br><span class="line">os.rename(f_new_name,f_name) <span class="comment">#把新文件名字改成原文件 的名字，就把之前的覆盖掉了,windows使用os.replace # 帮助文档说明replace会覆盖原文件</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍Python中的文件操作具体都有哪些模式&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>hash是个什么东东</title>
    <link href="http://www.danpinsuiyue.com/2852062086.html"/>
    <id>http://www.danpinsuiyue.com/2852062086.html</id>
    <published>2019-02-18T14:52:50.000Z</published>
    <updated>2019-10-25T12:43:34.966Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍什么是哈希，以及哈希的用途，基于hash的数据类型有那些</strong></p><a id="more"></a><h2 id="什么是哈希？"><a href="#什么是哈希？" class="headerlink" title="什么是哈希？"></a>什么是哈希？</h2><h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>hash,一般翻译做散列、杂凑，或音译为哈希，是把任意长度的<a href="https://baike.baidu.com/item/%E8%BE%93%E5%85%A5/5481954" target="_blank" rel="noopener">输入</a>（又叫做预映射pre-image）通过散列算法变换成固定长度的<a href="https://baike.baidu.com/item/%E8%BE%93%E5%87%BA/11056752" target="_blank" rel="noopener">输出</a>，该输出就是散列值。这种转换是一种压缩映射，也就是，散列值的空间通常远小于输入的空间。</p><p>它其实就是一个算法，最简单的算法就是加减乘除，比方，我设计个数字算法，输入+7=输出，比如我输入1，输出为8；输入2，输出为9。</p><p>哈希算法不过是一个更为复杂的运算，它的输入可以是字符串，可以是数据，可以是任何文件，经过哈希运算后，变成一个固定长度的输出，该输出就是哈希值。<strong>但是哈希算法有一个很大的特点，就是你不能从结果推算出输入,所以又称为不可逆的算法</strong></p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">hash</span><span class="params">(<span class="string">'我爱你'</span>)</span></span><span class="number">3471388576844338423</span></span><br><span class="line"><span class="function"><span class="title">hash</span><span class="params">(<span class="string">'小姐姐'</span>)</span></span><span class="number">5000768010434506639</span></span><br></pre></td></tr></table></figure><p>如上所示，输入“我爱你”三个字，经过哈希运算后，会得到一个随机数列，而且不管你的输入文件多大，最后得到的结果都是这么一个固定长度的数列，即使你输入的是一部电影，输出也是这么大。而且通过数列不能推导出输入。</p><h2 id="哈希特性"><a href="#哈希特性" class="headerlink" title="哈希特性"></a>哈希特性</h2><p>​ <strong>不可逆</strong>：在具备编码功能的同时，哈希算法也作为一种加密算法存在。即，你无法通过分析哈希值计算出源文件的样子，换句话说：你不可能通过观察香肠的纹理推测出猪原来的样子。</p><p>​ <strong>计算极快</strong>：20G高清电影和一个5K文本文件复杂度相同，计算量都极小，可以在0.1秒内得出结果。也就是说，不管猪有多肥，骨头多硬，做成香肠都只要眨眨眼的时间</p><h2 id="哈希的用途"><a href="#哈希的用途" class="headerlink" title="哈希的用途"></a>哈希的用途</h2><p>哈希算法的不可逆特性使其在以下领域使用广泛</p><p>第一、密码，我们日常使用的各种电子密码本质上都是基于hash的，你不用担心支付宝的工作人员会把你的密码泄漏给第三方，因为你的登录密码是先经过 hash+各种复杂算法得出密文后 再存进支付宝的数据库里的</p><p>第二、文件完整性校验，通过对文件进行hash，得出一段hash值 ，这样文件内容以后被修改了，hash值就会变。 MD5 Hash算法的”数字指纹”特性，使它成为应用最广泛的一种文件完整性<a href="https://baike.baidu.com/item/%E6%A0%A1%E9%AA%8C%E5%92%8C" target="_blank" rel="noopener">校验和</a>(Checksum)算法，不少Unix系统有提供计算md5 checksum的命令。</p><p>第三、数字签名，<a href="https://baike.baidu.com/item/%E6%95%B0%E5%AD%97%E7%AD%BE%E5%90%8D%E6%8A%80%E6%9C%AF" target="_blank" rel="noopener">数字签名技术</a>是将摘要信息用发送者的私钥加密，与<a href="https://baike.baidu.com/item/%E5%8E%9F%E6%96%87" target="_blank" rel="noopener">原文</a>一起传送给接收者。接收者只有用发送者的公钥才能解密被加密的摘要信息，然后用<a href="https://baike.baidu.com/item/HASH%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">HASH函数</a>对收到的<a href="https://baike.baidu.com/item/%E5%8E%9F%E6%96%87" target="_blank" rel="noopener">原文</a>产生一个摘要信息，与解密的摘要信息对比。如果相同，则说明收到的信息是完整的，在传输过程中没有被修改，否则说明信息被修改过，因此数字签名能够验证信息的完整性。</p><p>此外，hash算法在区块链领域也使用广泛。</p><h2 id="基于hash的数据类型有哪些？"><a href="#基于hash的数据类型有哪些？" class="headerlink" title="基于hash的数据类型有哪些？"></a>基于hash的数据类型有哪些？</h2><p>Python 中基于hash的2个数据类型是dict and set , 之前说dict查询速度快，为何快？ 说set天生去重，怎么做到的？其实都是利用了hash的特性，我们下面来剖析</p><p>dict 为何查询速度超快，且不受dict大小影响 ？</p><p>解析：假设我要存14亿人的基本信息</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data = &#123; <span class="string">"张三"</span>:[<span class="number">23742364782642342323234</span>,<span class="number">28</span>,<span class="string">"山东济南"</span>],</span><br><span class="line">        <span class="string">"李四"</span>:[<span class="number">12124234232311214458271</span>,<span class="number">25</span>,<span class="string">"北京昌平"</span>],    </span><br><span class="line">        <span class="string">"王五"</span>:[<span class="number">23030293483727384383929</span>,<span class="number">33</span>,<span class="string">"山东济南"</span>],    </span><br><span class="line">        <span class="string">"赵六"</span>:[<span class="number">42302033030302482634674</span>,<span class="number">28</span>,<span class="string">"河北保定"</span>], </span><br><span class="line">        <span class="comment"># ...&#125;</span></span><br></pre></td></tr></table></figure><p>dict会把这些数字按大小排序好放在一个列表里kd = [-10, 53, 67, 81, 99, 123]当我们想查找”赵六”的信息时， 会把“赵六”先hash, 得到99这个值，然后拿这个值去到kd列表里找，想象这个列表有14亿个值 ，如何快速找到99？ 二分法就行，具体看剖析视频。</p><p>只要找到了99的位置，就可以定位到赵六对应的value的值了。 通过2分法查找，每次数据量都会少一半，这样查找最多31次(2**31=2147483648)就能从20亿信息里找到这个人的信息。</p><p>当然 dict 真实的查找算法比这个还要复杂些， 我只是通过这个例子让大家理解下为何基于hash的数据类型查找速度会快很多。</p><h2 id="set为何是天生去重的？"><a href="#set为何是天生去重的？" class="headerlink" title="set为何是天生去重的？"></a>set为何是天生去重的？</h2><p>​ 因为每存一个值到set里时， 都要先经过hash，然后通过得出的这个hash值算出应该存在set里的哪个位置，存的时候会先检查那个位置上有没有值 ，有的话就对比是否相等，如果相等，则不再存储此值。 如果不相等(即为空)，则把新值 存在这。</p><p>​</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍什么是哈希，以及哈希的用途，基于hash的数据类型有那些&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python中基础数据类型</title>
    <link href="http://www.danpinsuiyue.com/1798410932.html"/>
    <id>http://www.danpinsuiyue.com/1798410932.html</id>
    <published>2019-02-12T08:35:24.000Z</published>
    <updated>2019-10-26T10:49:46.502Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于Python数据类中整型、布尔、字符串、列表、元祖、字典、集合的概念和数据结构以及特有的方法，公共方法</strong></p><a id="more"></a><h2 id="整型（int）"><a href="#整型（int）" class="headerlink" title="整型（int）"></a>整型（int）</h2><h3 id="整型的长度"><a href="#整型的长度" class="headerlink" title="整型的长度"></a>整型的长度</h3><p>py2中有：int/long</p><ul><li>在32位机器上，整数的位数为32位，取值范围为-2<strong>31～2</strong>31-1，即-2147483648～2147483647</li><li>在64位系统上，整数的位数为64位，取值范围为-2<strong>63～2</strong>63-1，即-9223372036854775808～9223372036854775807</li><li>超出长度之后就会变为long类型。</li></ul><p>py3中有：int （int/long）</p><h3 id="整除"><a href="#整除" class="headerlink" title="整除"></a>整除</h3><p>py2和py3中整除是不一样。</p><p>注意：在python2中使用除法时，只能保留整数位，如果想要保留小数位，可以先导入一个模块。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division </span><br><span class="line">value = <span class="number">3</span>/<span class="number">2</span></span><br><span class="line">print(value)</span><br></pre></td></tr></table></figure><h2 id="布尔（bool）"><a href="#布尔（bool）" class="headerlink" title="布尔（bool）"></a>布尔（bool）</h2><div class="note default"><ol><li>布尔值就是用于表示真假。True和False。</li><li>其他类型转换成布尔值为False：<ul><li>0</li><li>“”</li><li>[]</li><li>()</li><li>{}</li><li>set()</li><li>None</li></ul></li><li>其他类型转换成布尔值为False：<ul><li>除了以上其他转换都是True</li></ul></li></ol></div><h2 id="字符串（str）"><a href="#字符串（str）" class="headerlink" title="字符串（str）"></a>字符串（str）</h2><p>​ 字符串是写代码中最常见的，python内存中的字符串是按照：unicode 编码存储。对于字符串是不可变。</p><p>字符串自己有很多方法，如：</p><h3 id="upper-全部大写"><a href="#upper-全部大写" class="headerlink" title="upper  全部大写"></a>upper 全部大写</h3><p>isupper() 将字符串中所有的小写字母变成大写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v = <span class="string">'ALEX'</span></span><br><span class="line">v1 = v.upper()</span><br><span class="line">print(v1)</span><br><span class="line">v2 = v.isupper() <span class="comment"># 判断是否全部是大写</span></span><br><span class="line">print(v2)</span><br></pre></td></tr></table></figure><h3 id="lower-全部小写"><a href="#lower-全部小写" class="headerlink" title="lower  全部小写"></a>lower 全部小写</h3><p>将字符串中所有的大写字母变成小写字母</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">v = <span class="string">'alex'</span></span><br><span class="line">v1 = v.lower()</span><br><span class="line">print(v1)</span><br><span class="line">v2 = v.islower() <span class="comment"># 判断是否全部是小写</span></span><br><span class="line">print(v2)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">############ 了解即可</span></span><br><span class="line">v = <span class="string">'ß'</span></span><br><span class="line"><span class="comment"># 将字符串变小写（更牛逼）</span></span><br><span class="line">v1 = v.casefold()</span><br><span class="line">print(v1) <span class="comment"># ss</span></span><br><span class="line">v2 = v.lower()</span><br><span class="line">print(v2)</span><br></pre></td></tr></table></figure><h3 id="isdecimal-判断字符串是否是数字"><a href="#isdecimal-判断字符串是否是数字" class="headerlink" title="isdecimal   判断字符串是否是数字"></a>isdecimal 判断字符串是否是数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">v = <span class="string">'1'</span></span><br><span class="line"><span class="comment"># v = '二'</span></span><br><span class="line"><span class="comment"># v = '②'</span></span><br><span class="line">v1 = v.isdigit()  <span class="comment"># '1'-&gt; True; '二'-&gt; False; '②' --&gt; True</span></span><br><span class="line">v2 = v.isdecimal() <span class="comment"># '1'-&gt; True; '二'-&gt; False; '②' --&gt; False</span></span><br><span class="line">v3 = v.isnumeric() <span class="comment"># '1'-&gt; True; '二'-&gt; True; '②' --&gt; True</span></span><br><span class="line">print(v1,v2,v3)</span><br><span class="line"><span class="comment"># 以后推荐用 isdecimal 判断是否是 10进制的数。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ############## 应用 ##############</span></span><br><span class="line"></span><br><span class="line">v = [<span class="string">'啊'</span>,<span class="string">'波'</span>,<span class="string">'嚓'</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> v:</span><br><span class="line">    print(i)</span><br><span class="line"></span><br><span class="line">num = input(<span class="string">'请输入序号：'</span>)</span><br><span class="line"><span class="keyword">if</span> num.isdecimal():</span><br><span class="line">    num = int(num)</span><br><span class="line">    print(v[num])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'你输入的不是数字'</span>)</span><br></pre></td></tr></table></figure><h3 id="strip-去除两边空格"><a href="#strip-去除两边空格" class="headerlink" title="strip   去除两边空格"></a>strip 去除两边空格</h3><p>.lstrip() #去除左边空格 +\t+\n + 指定字符串</p><p>.rstrip()#去除右边空格</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">v1 = <span class="string">"admin "</span></span><br><span class="line">print(v1.strip())</span><br><span class="line"></span><br><span class="line">v2 = <span class="string">"admin\t"</span></span><br><span class="line">print(v2.strip())</span><br><span class="line"></span><br><span class="line">v3 = <span class="string">"admin\n"</span></span><br><span class="line">print(v3.strip())</span><br><span class="line"></span><br><span class="line">v1 = <span class="string">"admina"</span></span><br><span class="line">print(v1.strip(<span class="string">'al'</span>))</span><br></pre></td></tr></table></figure><h3 id="replace-替换"><a href="#replace-替换" class="headerlink" title="replace  替换"></a>replace 替换</h3><p>(“被替换的字符/子序列”,”要替换为的内容”) .</p><p>replace(“被替换的字符/子序列”,”要替换为的内容”,<u><strong>几次</strong></u>）.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line">a = <span class="string">"abc23"</span></span><br><span class="line">b = a.replace(<span class="string">"ab"</span>,<span class="string">"12"</span>)</span><br><span class="line">print(b)<span class="comment"># 12c23</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line">a = <span class="string">"abc23abab"</span></span><br><span class="line">b = a.replace(<span class="string">"ab"</span>,<span class="string">"12"</span>,<span class="number">2</span>)</span><br><span class="line">print(b)<span class="comment"># 12c2312ab</span></span><br></pre></td></tr></table></figure><h3 id="split-切割"><a href="#split-切割" class="headerlink" title="split  切割"></a>split 切割</h3><p>(‘根据什么东西进行分割’) #从左往右分割</p><p>split(‘根据什么东西进行分割’, <strong><u>几次</u></strong>) #从左往右分割</p><p>rsplit(‘根据什么东西进行分割’) #从右往左分割</p><p>rsplit(‘根据什么东西进行分割’, <strong><u>几次</u></strong>) #从右往左分割</p><p>partition(‘3’) # 将指定字符串分为三分：前面，自己，后面</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例一</span></span><br><span class="line">a = <span class="string">"abc23abab"</span></span><br><span class="line">b = a.split(<span class="string">"b"</span>)</span><br><span class="line">print(b)<span class="comment">#['a', 'c23a', 'a', ''] </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例二</span></span><br><span class="line">a = <span class="string">"abc23abab"</span></span><br><span class="line">b = a.split(<span class="string">"b"</span>,<span class="number">2</span>)</span><br><span class="line">print(b)<span class="comment"># ['a', 'c23a', 'ab']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例三</span></span><br><span class="line">a = <span class="string">"abc23abab"</span></span><br><span class="line">b = a.rsplit(<span class="string">"b"</span>)</span><br><span class="line">print(b)<span class="comment"># ['a', 'c23a', 'a', '']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例三</span></span><br><span class="line">a = <span class="string">"abc23abab"</span></span><br><span class="line">b = a.rsplit(<span class="string">"b"</span>,<span class="number">2</span>)</span><br><span class="line">print(b)<span class="comment"># ['abc23a', 'a', '']</span></span><br><span class="line"></span><br><span class="line">v1 = v.partition(<span class="string">'3'</span>) <span class="comment"># 将指定字符串分为三分：前面，自己，后面</span></span><br><span class="line">print(v1)</span><br></pre></td></tr></table></figure><h3 id="startswith-判断是否以什么开头"><a href="#startswith-判断是否以什么开头" class="headerlink" title="startswith  判断是否以什么开头"></a>startswith 判断是否以什么开头</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">a = <span class="string">"abc23abab"</span></span><br><span class="line">b = a.startswith(<span class="string">"a"</span>)</span><br><span class="line">print(b)<span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="endswith-判断是否以什么结尾"><a href="#endswith-判断是否以什么结尾" class="headerlink" title="endswith   判断是否以什么结尾"></a>endswith 判断是否以什么结尾</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">a = <span class="string">"abc23abab"</span></span><br><span class="line">b = a.endswith(<span class="string">"b"</span>)</span><br><span class="line">print(b)<span class="comment"># True</span></span><br></pre></td></tr></table></figure><h3 id="encode-指定的编码格式编码字符串"><a href="#encode-指定的编码格式编码字符串" class="headerlink" title="encode   指定的编码格式编码字符串"></a>encode 指定的编码格式编码字符串</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'李杰'</span> <span class="comment"># 解释器读取到内存后，按照unicode编码存储：8个字节。</span></span><br><span class="line">v1 = name.encode(<span class="string">'utf-8'</span>)</span><br><span class="line">print(v1)</span><br><span class="line">v2 = name.encode(<span class="string">'gbk'</span>)<span class="comment"># b'\xe6\x9d\x8e\xe6\x9d\xb0'b为字节</span></span><br><span class="line">print(v2)   <span class="comment"># b'\xc0\xee\xbd\xdc'</span></span><br></pre></td></tr></table></figure><h3 id="format-字符串格式化"><a href="#format-字符串格式化" class="headerlink" title="format   字符串格式化"></a>format 字符串格式化</h3><p>format_map # 字符串格式化的功能。</p><p>基本语法是通过 <strong>{}</strong> 和 <strong>:</strong> 来代替以前的 <strong>%</strong> 。</p><p>format 函数可以接受不限个参数，位置可以不按顺序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"&#123;&#125; &#123;&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)   <span class="comment"># 不设置指定位置，按默认顺序</span></span><br><span class="line">print(a)<span class="comment"># 'hello world'</span></span><br><span class="line"> </span><br><span class="line">a = <span class="string">"&#123;0&#125; &#123;1&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line">print(a)<span class="comment"># 'hello world'</span></span><br><span class="line"> </span><br><span class="line">a = <span class="string">"&#123;1&#125; &#123;0&#125; &#123;1&#125;"</span>.format(<span class="string">"hello"</span>, <span class="string">"world"</span>)  <span class="comment"># 设置指定位置</span></span><br><span class="line">print(a)<span class="comment"># 'world hello world'</span></span><br><span class="line"></span><br><span class="line">v= <span class="string">'我是&#123;0&#125;,谢谢谢 &#123;1&#125;'</span>.format(<span class="string">'alex'</span>,<span class="number">19</span>)</span><br><span class="line">print(v)</span><br><span class="line">v= <span class="string">'我是&#123;x1&#125;,谢谢谢 &#123;xx&#125;'</span>.format_map(&#123;<span class="string">'x1'</span>:<span class="string">'alex'</span>,<span class="string">'xx'</span>:<span class="number">19</span>&#125;)</span><br><span class="line">print(v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># v1 = "我是&#123;0&#125;,年龄&#123;1&#125;".format('alex',19)</span></span><br><span class="line">v1 = <span class="string">"我是&#123;0&#125;,年龄&#123;1&#125;"</span>.format(*(<span class="string">'alex'</span>,<span class="number">19</span>,))</span><br><span class="line">print(v1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># v2 = "我是&#123;name&#125;,年龄&#123;age&#125;".format(name='alex',age=18)</span></span><br><span class="line">v2 = <span class="string">"我是&#123;name&#125;,年龄&#123;age&#125;"</span>.format(**&#123;<span class="string">'name'</span>:<span class="string">'alex'</span>,<span class="string">'age'</span>:<span class="number">18</span>&#125;)</span><br><span class="line">print(v2)</span><br></pre></td></tr></table></figure><h3 id="join-以指定的字符连接生成新的字符串。"><a href="#join-以指定的字符连接生成新的字符串。" class="headerlink" title="join    以指定的字符连接生成新的字符串。"></a>join 以指定的字符连接生成新的字符串。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = <span class="string">'abcd'</span> <span class="comment"># a_b_c_d</span></span><br><span class="line">result = <span class="string">"+"</span>.join(name) <span class="comment"># 循环每个元素，并在元素和元素之间加入连接符。</span></span><br><span class="line">print(result)<span class="comment"># a+b+c+d</span></span><br></pre></td></tr></table></figure><h3 id="center-原字符串居中，填充"><a href="#center-原字符串居中，填充" class="headerlink" title="center    原字符串居中，填充"></a>center 原字符串居中，填充</h3><p>该方法返回一个原字符串居中,并使用空格填充至长度 width 的新字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">'runoob'</span></span><br><span class="line">str.center(<span class="number">20</span>, <span class="string">'*'</span>)</span><br><span class="line"><span class="string">'*******runoob*******'</span></span><br><span class="line">str.center(<span class="number">20</span>)</span><br><span class="line"><span class="string">'       runoob       '</span></span><br></pre></td></tr></table></figure><h3 id="rjust-原字符串右右对齐，填充"><a href="#rjust-原字符串右右对齐，填充" class="headerlink" title="rjust  原字符串右右对齐，填充"></a>rjust 原字符串右右对齐，填充</h3><p>返回一个原字符串右对齐,并使用空格填充至长度 width 的新字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">str = <span class="string">"this is string example....wow!!!"</span></span><br><span class="line"><span class="keyword">print</span> (str.rjust(<span class="number">50</span>, <span class="string">'*'</span>))</span><br><span class="line"><span class="comment"># ******************this is string example....wow!!!</span></span><br></pre></td></tr></table></figure><h3 id="count-计算子序列出现的次数"><a href="#count-计算子序列出现的次数" class="headerlink" title="count   计算子序列出现的次数"></a>count 计算子序列出现的次数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v = <span class="string">'aealeax'</span></span><br><span class="line">v1 = v.count(<span class="string">'ea'</span>)</span><br><span class="line">print(v1)</span><br></pre></td></tr></table></figure><h3 id="find-找到索引位置"><a href="#find-找到索引位置" class="headerlink" title="find  找到索引位置"></a>find 找到索引位置</h3><p>找索引位置(从左到右找到第一个),存在则返回索引位置，不存在则返回 -1<br>index， 找索引位置(从左到右找到第一个),存在则返回索引位置，不存报错</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">v = <span class="string">'alexex'</span></span><br><span class="line">index = v.find(<span class="string">'u'</span>)</span><br><span class="line">print(index</span><br></pre></td></tr></table></figure><h2 id="列表（list）"><a href="#列表（list）" class="headerlink" title="列表（list）"></a>列表（list）</h2><h3 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = [<span class="string">"ji"</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">"gyhj"</span>]</span><br></pre></td></tr></table></figure><h3 id="append-在列表的最后追加一个元素"><a href="#append-在列表的最后追加一个元素" class="headerlink" title="append         在列表的最后追加一个元素"></a>append 在列表的最后追加一个元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例</span></span><br><span class="line">users = [<span class="string">"sdxfc"</span>]</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"> name = input(<span class="string">'请输入姓名:'</span>)</span><br><span class="line"> users.append(name)</span><br><span class="line"> print(users)<span class="comment"># ['sdxfc', 'sdf']</span></span><br></pre></td></tr></table></figure><h3 id="insert-在指定索引位置进行插入元素"><a href="#insert-在指定索引位置进行插入元素" class="headerlink" title="insert        在指定索引位置进行插入元素"></a>insert 在指定索引位置进行插入元素</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">users = [<span class="string">'qwe'</span>,<span class="string">'asd'</span>,<span class="string">'zxc'</span>,<span class="string">'rty'</span>]</span><br><span class="line">users.insert(<span class="number">1</span>,<span class="string">'zxc'</span>)</span><br><span class="line">print(users)<span class="comment"># ['qwe', 'zxc', 'asd', 'zxc', 'rty']</span></span><br></pre></td></tr></table></figure><h3 id="remove-删除-注意：（）里不加删除内容报错"><a href="#remove-删除-注意：（）里不加删除内容报错" class="headerlink" title="remove      删除    注意：（）里不加删除内容报错"></a>remove 删除 注意：（）里不加删除内容报错</h3><h3 id="pop-删除-注意：（）里不加数字，默认删除最后一个"><a href="#pop-删除-注意：（）里不加数字，默认删除最后一个" class="headerlink" title="pop       删除     注意：（）里不加数字，默认删除最后一个"></a>pop 删除 注意：（）里不加数字，默认删除最后一个</h3><h3 id="del-删除-注意：（）里不加数字报错"><a href="#del-删除-注意：（）里不加数字报错" class="headerlink" title="del           删除    注意：（）里不加数字报错"></a>del 删除 注意：（）里不加数字报错</h3><h3 id="clear-删除列表里所有元素-注意：（）里不能加数字"><a href="#clear-删除列表里所有元素-注意：（）里不能加数字" class="headerlink" title="clear           删除列表里所有元素    注意：（）里不能加数字"></a>clear 删除列表里所有元素 注意：（）里不能加数字</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">users = [<span class="string">"ji"</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="string">"gyhj"</span>]</span><br><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">users.remove(<span class="string">'ji'</span>)</span><br><span class="line">print(users)<span class="comment"># [1, 3, 'gyhj']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">users.pop(<span class="number">1</span>)</span><br><span class="line">print(users)<span class="comment">#['ji', 3, 'gyhj']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式三</span></span><br><span class="line"><span class="keyword">del</span> users[<span class="number">1</span>]</span><br><span class="line">print(users)<span class="comment">#['ji', 3, 'gyhj']</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式四</span></span><br><span class="line">users.clear()</span><br><span class="line">print(users)<span class="comment"># []</span></span><br></pre></td></tr></table></figure><div class="note default"><p>注意：</p><ul><li>字符串本身不能修改或删除【不可变类型】</li><li>列表是【可变类型】</li></ul></div><h3 id="reverse-反转"><a href="#reverse-反转" class="headerlink" title="reverse        反转"></a>reverse 反转</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">v1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3111</span>,<span class="number">32</span>,<span class="number">13</span>]</span><br><span class="line">print(v1)<span class="comment"># [1, 2, 3111, 32, 13]</span></span><br><span class="line">v1.reverse()</span><br><span class="line">print(v1)<span class="comment"># [13, 32, 3111, 2, 1]</span></span><br></pre></td></tr></table></figure><h3 id="sort-排序"><a href="#sort-排序" class="headerlink" title="sort      排序"></a>sort 排序</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">v1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3111</span>,<span class="number">32</span>,<span class="number">13</span>]</span><br><span class="line">v1.sort(reverse=<span class="literal">False</span>) <span class="comment"># 从小到大（默认）</span></span><br><span class="line">print(v1)<span class="comment"># [11, 13, 22, 32, 3111]</span></span><br><span class="line">v1.sort(reverse=<span class="literal">True</span>) <span class="comment"># 从大到小</span></span><br><span class="line">print(v1)<span class="comment"># [3111, 32, 22, 13, 11]</span></span><br></pre></td></tr></table></figure><h3 id="extend-在列表末尾一次性追加另一个序列中的多个值"><a href="#extend-在列表末尾一次性追加另一个序列中的多个值" class="headerlink" title="extend    在列表末尾一次性追加另一个序列中的多个值"></a>extend 在列表末尾一次性追加另一个序列中的多个值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">list1 = [<span class="string">'Google'</span>, <span class="string">'Runoob'</span>, <span class="string">'Taobao'</span>]</span><br><span class="line">list2=list(range(<span class="number">5</span>)) <span class="comment"># 创建 0-4 的列表</span></span><br><span class="line">list1.extend(list2)  <span class="comment"># 扩展列表</span></span><br><span class="line"><span class="keyword">print</span> (<span class="string">"扩展后的列表："</span>, list1)</span><br><span class="line"><span class="comment"># 扩展后的列表： ['Google', 'Runoob', 'Taobao', 0, 1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h2 id="元祖（tuble）"><a href="#元祖（tuble）" class="headerlink" title="元祖（tuble）"></a>元祖（tuble）</h2><h3 id="格式-1"><a href="#格式-1" class="headerlink" title="格式"></a>格式</h3><p>​ users = [11,22,33] # 列表（元素可变）</p><p>​ users = (11,22,33) # 元组（元素不可变）</p><h2 id="字典（dict）"><a href="#字典（dict）" class="headerlink" title="字典（dict）"></a>字典（dict）</h2><h3 id="字典含义"><a href="#字典含义" class="headerlink" title="字典含义"></a>字典含义</h3><p>​ 帮助用户去表示一个事物的信息（事物是有多个属性）。</p><h3 id="基本格式"><a href="#基本格式" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data = &#123;键:值,键:值,键:值,键:值,键:值,键:值,&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 练习题</span></span><br><span class="line">userinfo = &#123;<span class="string">'usenrame'</span>:<span class="string">'li'</span>,<span class="string">'password'</span>:<span class="string">"xiangmin"</span>&#125;</span><br><span class="line">user = input(<span class="string">'请输入用户：'</span>)</span><br><span class="line">pwd = input(<span class="string">'请输入密码：'</span>)</span><br><span class="line"><span class="keyword">if</span> userinfo[<span class="string">'username'</span>] == user <span class="keyword">and</span> userinfo[<span class="string">'password'</span>] == pwd:</span><br><span class="line">    print(<span class="string">'登陆成功'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'用户名或密码错误'</span>)</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">"name"</span>:<span class="string">'li'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'gender'</span>:<span class="string">'男'</span>,&#125;</span><br></pre></td></tr></table></figure><h3 id="keys-获取字典中所有的键"><a href="#keys-获取字典中所有的键" class="headerlink" title="keys           获取字典中所有的键"></a>keys 获取字典中所有的键</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info.keys():</span><br><span class="line">print(item)<span class="comment">#循环获取字典中所有的键</span></span><br></pre></td></tr></table></figure><h3 id="values-获取字典中所有的值"><a href="#values-获取字典中所有的值" class="headerlink" title="values         获取字典中所有的值"></a>values 获取字典中所有的值</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> info.values():</span><br><span class="line">print(item)<span class="comment">#循环获取字典中所有的键</span></span><br></pre></td></tr></table></figure><h3 id="items-获取字典中的所有键值对。"><a href="#items-获取字典中的所有键值对。" class="headerlink" title="items             获取字典中的所有键值对。"></a>items 获取字典中的所有键值对。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">del</span> info[<span class="string">'gender'</span>]</span><br><span class="line">print(info)<span class="comment"># &#123;'name': 'li', 'age': 18&#125;</span></span><br></pre></td></tr></table></figure><h3 id="get-函数返回指定键的值，如果值不在字典中返回默认值。"><a href="#get-函数返回指定键的值，如果值不在字典中返回默认值。" class="headerlink" title="get          函数返回指定键的值，如果值不在字典中返回默认值。"></a>get 函数返回指定键的值，如果值不在字典中返回默认值。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例 一</span></span><br><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">27</span>&#125;</span><br><span class="line">print(dict.get(<span class="string">'Age'</span>))<span class="comment"># 27</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 二</span></span><br><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Zara'</span>, <span class="string">'Age'</span>: <span class="number">27</span>&#125;</span><br><span class="line">print(dict.get(<span class="string">'asd'</span>))<span class="comment"># None</span></span><br><span class="line">print(dict.get(<span class="string">'asd'</span>,<span class="string">"123"</span>))<span class="comment"># 123</span></span><br></pre></td></tr></table></figure><h3 id="update-更新，字典里不存在增加-存在更新"><a href="#update-更新，字典里不存在增加-存在更新" class="headerlink" title="update        更新，字典里不存在增加/存在更新"></a>update 更新，字典里不存在增加/存在更新</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 示例 一</span></span><br><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>&#125;</span><br><span class="line">a = &#123;<span class="string">'Age'</span>:<span class="number">9</span>&#125;</span><br><span class="line">dict.update(a)</span><br><span class="line">print(dict)<span class="comment"># &#123;'Name': 'Runoob', 'Age': 9&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 示例 二</span></span><br><span class="line">dict = &#123;<span class="string">'Name'</span>: <span class="string">'Runoob'</span>, <span class="string">'Age'</span>: <span class="number">7</span>&#125;</span><br><span class="line">dict2 = &#123;<span class="string">'Sex'</span>: <span class="string">'female'</span>&#125;</span><br><span class="line">dict.update(dict2)</span><br><span class="line">print(<span class="string">"更新字典 dict :- "</span>, dict)</span><br></pre></td></tr></table></figure><h3 id="del-删除-键值对一个整体，要删全删"><a href="#del-删除-键值对一个整体，要删全删" class="headerlink" title="del            删除        键值对一个整体，要删全删"></a>del 删除 键值对一个整体，要删全删</h3><h3 id="pop-删除"><a href="#pop-删除" class="headerlink" title="pop           删除"></a>pop 删除</h3><h3 id="clear-删除（清空所有内容）"><a href="#clear-删除（清空所有内容）" class="headerlink" title="clear          删除（清空所有内容）"></a>clear 删除（清空所有内容）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">"name"</span>:<span class="string">'li'</span>,<span class="string">'age'</span>:<span class="number">18</span>,<span class="string">'gender'</span>:<span class="string">'男'</span>,&#125;</span><br><span class="line"><span class="comment"># 方法一</span></span><br><span class="line"><span class="keyword">del</span> info[<span class="string">'gender'</span>]</span><br><span class="line">print(info)<span class="comment"># &#123;'name': 'li', 'age': 18&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法二</span></span><br><span class="line">a = info.pop(<span class="string">'name'</span>)</span><br><span class="line">print(info)<span class="comment"># &#123;'age': 18, 'gender': '男'&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法三</span></span><br><span class="line">info.clear()</span><br><span class="line">print(info)<span class="comment"># &#123;&#125;</span></span><br></pre></td></tr></table></figure><h2 id="集合（set）"><a href="#集合（set）" class="headerlink" title="集合（set）"></a>集合（set）</h2><h3 id="集合含义"><a href="#集合含义" class="headerlink" title="集合含义"></a>集合含义</h3><p>​ 一个无序的不重复元素序列。</p><p>​ 可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，注意：创建一个空集合必须用 <strong>set()</strong> 而不是 <strong>{ }</strong>，因为 <strong>{ }</strong> 是用来创建一个空字典。</p><p>​ 空集合：set（）</p><h3 id="基本格式-1"><a href="#基本格式-1" class="headerlink" title="基本格式"></a>基本格式</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">parame = &#123;value01,value02,...&#125;</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">set(value01,value02,...)</span><br></pre></td></tr></table></figure><h3 id="add-添加：所添加值没有原值输出、新值增加"><a href="#add-添加：所添加值没有原值输出、新值增加" class="headerlink" title="add        添加：所添加值没有原值输出、新值增加"></a>add 添加：所添加值没有原值输出、新值增加</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">"name"</span>,<span class="string">'li'</span>,<span class="string">'age'</span>,<span class="number">18</span>,<span class="string">'gender'</span>,<span class="string">'男'</span>,&#125;</span><br><span class="line">info.add(<span class="number">11</span>)</span><br><span class="line">print(info)<span class="comment"># &#123;'li', 11, 18, '男', 'gender', 'age', 'name'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="discard-删除：所删除值没有原值输出、不会报错"><a href="#discard-删除：所删除值没有原值输出、不会报错" class="headerlink" title="discard      删除：所删除值没有原值输出、不会报错"></a>discard 删除：所删除值没有原值输出、不会报错</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">"name"</span>,<span class="string">'li'</span>,<span class="string">'age'</span>,<span class="number">18</span>,<span class="string">'gender'</span>,<span class="string">'男'</span>,&#125;</span><br><span class="line">info.discard(<span class="number">18</span>)</span><br><span class="line">print(info)<span class="comment">#&#123;'男', 'li', 'name', 'age', 'gender'&#125;键</span></span><br></pre></td></tr></table></figure><h3 id="update-批量添加。"><a href="#update-批量添加。" class="headerlink" title="update()          批量添加。"></a>update() 批量添加。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">"name"</span>,<span class="string">'li'</span>,<span class="string">'age'</span>,<span class="number">18</span>,<span class="string">'gender'</span>,<span class="string">'男'</span>,&#125;</span><br><span class="line"><span class="keyword">del</span> info[<span class="string">'gender'</span>]</span><br><span class="line">print(info)<span class="comment"># &#123;'name': 'li', 'age': 18&#125;</span></span><br></pre></td></tr></table></figure><h3 id="intersection-交集：生成新值。括号里可以列表、集合、元祖。"><a href="#intersection-交集：生成新值。括号里可以列表、集合、元祖。" class="headerlink" title="intersection       交集：生成新值。括号里可以列表、集合、元祖。"></a>intersection 交集：生成新值。括号里可以列表、集合、元祖。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">"name"</span>,<span class="string">'li'</span>,<span class="string">'age'</span>,<span class="number">18</span>,<span class="string">'gender'</span>,<span class="string">'男'</span>,&#125;</span><br><span class="line">result = info.intersection(&#123;<span class="number">1</span>,<span class="string">'li'</span>,<span class="string">'男'</span>&#125;)</span><br><span class="line">print(result)<span class="comment"># &#123;'li', '男'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="union-并集：生成新值。括号里可以列表、集合、元祖。"><a href="#union-并集：生成新值。括号里可以列表、集合、元祖。" class="headerlink" title="union        并集：生成新值。括号里可以列表、集合、元祖。"></a>union 并集：生成新值。括号里可以列表、集合、元祖。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">"name"</span>,<span class="string">'li'</span>,<span class="string">'age'</span>,<span class="number">18</span>,<span class="string">'gender'</span>,<span class="string">'男'</span>,&#125;</span><br><span class="line">result = info.union(&#123;<span class="number">1</span>,<span class="string">'li'</span>,<span class="string">'男'</span>&#125;)</span><br><span class="line">print(result)<span class="comment"># &#123;'gender', 1, '男', 18, 'name', 'age', 'li'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="difference-差集：生成新值。括号里可以列表、集合、元祖。"><a href="#difference-差集：生成新值。括号里可以列表、集合、元祖。" class="headerlink" title="difference        差集：生成新值。括号里可以列表、集合、元祖。"></a>difference 差集：生成新值。括号里可以列表、集合、元祖。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">"name"</span>,<span class="string">'li'</span>,<span class="string">'age'</span>,<span class="number">18</span>,<span class="string">'gender'</span>,<span class="string">'男'</span>,&#125;</span><br><span class="line">result = info.difference(&#123;<span class="number">1</span>,<span class="string">'li'</span>,<span class="string">'男'</span>&#125;)</span><br><span class="line">print(result)<span class="comment"># &#123;'name', 18, 'age', 'gender'&#125;</span></span><br></pre></td></tr></table></figure><h3 id="symmetric-difference-对称差集：生成新值。括号里可以列表、集合、元祖。"><a href="#symmetric-difference-对称差集：生成新值。括号里可以列表、集合、元祖。" class="headerlink" title="symmetric_difference       对称差集：生成新值。括号里可以列表、集合、元祖。"></a>symmetric_difference 对称差集：生成新值。括号里可以列表、集合、元祖。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">info = &#123;<span class="string">"name"</span>,<span class="string">'li'</span>,<span class="string">'age'</span>,<span class="number">18</span>,<span class="string">'gender'</span>,<span class="string">'男'</span>,&#125;</span><br><span class="line">result = info.symmetric_difference(&#123;<span class="number">1</span>,<span class="string">'li'</span>,<span class="string">'男'</span>&#125;)</span><br><span class="line">print(result)<span class="comment"># &#123;1, 'name', 'gender', 18, 'age'&#125;</span></span><br></pre></td></tr></table></figure><h2 id="公共功能"><a href="#公共功能" class="headerlink" title="公共功能"></a>公共功能</h2><h3 id="索引（排除：int-bool）"><a href="#索引（排除：int-bool）" class="headerlink" title="索引（排除：int/bool）"></a>索引（排除：int/bool）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">users = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)</span><br><span class="line">print(users[<span class="number">0</span>])<span class="comment"># 11</span></span><br><span class="line">print(users[<span class="number">-1</span>])<span class="comment"># 33</span></span><br></pre></td></tr></table></figure><h3 id="切片（排除：int-bool）"><a href="#切片（排除：int-bool）" class="headerlink" title="切片（排除：int/bool）"></a>切片（排除：int/bool）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>)</span><br><span class="line">print(users[<span class="number">0</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="步长（排除：int-bool"><a href="#步长（排除：int-bool" class="headerlink" title="步长（排除：int/bool)"></a>步长（排除：int/bool)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="string">"qwerty"</span>)</span><br><span class="line">print(users[<span class="number">0</span>:<span class="number">2</span>:<span class="number">2</span>])</span><br></pre></td></tr></table></figure><h3 id="for循环（排除：int-bool"><a href="#for循环（排除：int-bool" class="headerlink" title="for循环（排除：int/bool)"></a>for循环（排除：int/bool)</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">users = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="string">"qwerty"</span>)</span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> users:</span><br><span class="line">  print(item)</span><br></pre></td></tr></table></figure><h3 id="len-长度（-排除：int-bool）"><a href="#len-长度（-排除：int-bool）" class="headerlink" title="len           长度（ 排除：int/bool）"></a>len 长度（ 排除：int/bool）</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">users = (<span class="number">11</span>,<span class="number">22</span>,<span class="number">33</span>,<span class="string">"qwerty"</span>)</span><br><span class="line">print(len(users))</span><br></pre></td></tr></table></figure><h3 id="range-创建一个整数列表，一般用在-for-循环中。"><a href="#range-创建一个整数列表，一般用在-for-循环中。" class="headerlink" title="range          创建一个整数列表，一般用在 for 循环中。"></a>range 创建一个整数列表，一般用在 for 循环中。</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">11</span>):</span><br><span class="line">    <span class="keyword">if</span> i == <span class="number">7</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(i)<span class="comment"># 1 2 3 4 5 6 8 9 10</span></span><br></pre></td></tr></table></figure><h2 id="小数据池"><a href="#小数据池" class="headerlink" title="小数据池"></a>小数据池</h2><h3 id="解析"><a href="#解析" class="headerlink" title="解析"></a>解析</h3><div class="note default"><ol><li><p>小数据池：</p><ul><li>is 两者之间的id是否相同</li><li>== 两边的数值是否相等</li><li>id 获取该对象的内存地址</li><li>代码块：一个模块，一个函数，一个类，一个文件等都是一个代码块。而作为交互方式输入的每个命令都是一个代码块。</li></ul></li><li><p>如果在同一代码块下，则采用同一代码块下的换缓存机制。如果是不同代码块，则采用小数据池的驻留机制。</p></li><li><p>pycharm 通过运行文件的方式执行下列代码： 这是在同一个文件下也就是同一代码块下，采用同一代码块下的缓存机制。</p></li></ol></div><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">i1 = <span class="number">1000</span></span><br><span class="line">i2 = <span class="number">1000</span></span><br><span class="line">print(i1 <span class="keyword">is</span> i2)  <span class="comment"># 结果为True 因为代码块下的缓存机制适用于所有数字</span></span><br><span class="line">通过交互方式中执行下面代码：   <span class="comment"># 这是不同代码块下，则采用小数据池的驻留机制。</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i1 = <span class="number">1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>i2 = <span class="number">1000</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(i1 <span class="keyword">is</span> i2)</span><br><span class="line"><span class="literal">False</span>  <span class="comment"># 不同代码块下的小数据池驻留机制 数字的范围只是-5~256.</span></span><br><span class="line"><span class="comment">#相同代码块下：</span></span><br><span class="line">            <span class="comment">#所有整数，大部分字符串，bool，存储地址相同</span></span><br><span class="line"><span class="comment">#不同代码块下(小数据池)：</span></span><br><span class="line">            <span class="comment">#-5-256，字符串长度小于等于20，bool，存储地址相同</span></span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于Python数据类中整型、布尔、字符串、列表、元祖、字典、集合的概念和数据结构以及特有的方法，公共方法&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Python入门</title>
    <link href="http://www.danpinsuiyue.com/228520744.html"/>
    <id>http://www.danpinsuiyue.com/228520744.html</id>
    <published>2019-02-11T01:10:49.000Z</published>
    <updated>2019-10-25T12:57:19.518Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于Python中最基础的编码，变量，输入，输出，注释，判断语句，循环语句，运算符，三目运算等</strong></p><a id="more"></a><h3 id="环境的安装"><a href="#环境的安装" class="headerlink" title="环境的安装"></a>环境的安装</h3><ul><li>解释器：py2 / py3 （环境变量）</li><li>开发工具：pycharm</li></ul><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><div class="note default"><ol><li>编码基础</li></ol><ul><li>ascii ,英文、符号，8位为一个东西，2**8</li><li>unicode ，万国码，可以表示所有，32位为一个东西，2**32</li><li>utf-8，unicode的压缩，用尽量少的位数表示一个东西，中文用3个字节=24位</li><li>gbk</li><li>gb2312</li></ul><ol start="2"><li>python编码相关</li></ol><ul><li><p>对于Python默认解释器编码：</p><ul><li>py2： ascii</li><li>py3： utf-8</li></ul></li><li><p>如果想要修改默认编码，则可以使用：</p></li><li><p>注意：对于操作文件时，要按照：以什么编写写入，就要用什么编码去打开。</p></li></ul><ol start="3"><li>bytes 和 str 关系<ul><li>‘你不是人’ —— 字节 ； 计算机存储/网络传输 —– 二进制</li><li>8位bit（比特） = 1个字节</li><li>str + encode(编码) = bytes</li><li>bytes + decode(编码) = str</li></ul></li></ol></div><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><div class="note default"><p>1.问：为什么要有变量？</p><p>​ 为某个值创建一个“外号”，以后在使用时候通过此外号就可以直接调用。</p><p>2 .变量命名规则</p><ul><li>只能是数字、字母、下划线。</li><li>不能数字开头。</li><li>不能是python关键字</li><li>见名之意，建议下划线链接</li></ul></div><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><ul><li>input输入得到的永远是字符串</li><li>py2 和 py3的区别<ul><li>py2 ：name = raw_input(“你好”)</li><li>py3 : name = input(“你好”)</li></ul></li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><ul><li>python2 : print”你好”</li><li>python3: peint(“你好”)</li></ul><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><ul><li>单行注释 #</li><li>多行注释 “”” “””</li></ul><h3 id="if-语句"><a href="#if-语句" class="headerlink" title="if  语句"></a>if 语句</h3><ul><li><p>if</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件：</span><br><span class="line">代码块</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">代码块</span><br></pre></td></tr></table></figure></li><li><p>elif</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> 条件：</span><br><span class="line">代码块</span><br><span class="line"><span class="keyword">elif</span> 条件：</span><br><span class="line">代码块</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">代码块</span><br></pre></td></tr></table></figure></li><li><p>练习题</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 第一题：让用户输入一个数字，猜：如果数字 &gt; 50,则输出：大了； 如果数字 &lt;= 50 ,则输出：小了。</span></span><br><span class="line">num = input(<span class="string">'请输入一个数字'</span>)</span><br><span class="line">number = int(num)</span><br><span class="line"><span class="keyword">if</span> number &gt; <span class="number">50</span>:</span><br><span class="line">print(<span class="string">'大了'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'小了'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二题：用户名密码登陆</span></span><br><span class="line">username = input(<span class="string">'请输入用户名：'</span>)</span><br><span class="line">password = input(<span class="string">'请输入密码：'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> username == <span class="string">'alex'</span> <span class="keyword">and</span> password == <span class="string">"oldboy"</span> : </span><br><span class="line">print(<span class="string">'欢迎登陆'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">print(<span class="string">'用户名或密码错误'</span>)</span><br></pre></td></tr></table></figure></li></ul><h3 id="while-语句"><a href="#while-语句" class="headerlink" title="while  语句"></a>while 语句</h3><ul><li><p>while</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">代码块</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">while True:</span></span><br><span class="line"><span class="string">    print("你好")</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p>else</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> 条件:</span><br><span class="line">代码块</span><br><span class="line"><span class="keyword">else</span>:<span class="comment"># 当条件不在满足while后触发，或条件 = False</span></span><br><span class="line">代码块</span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">count = 1</span></span><br><span class="line"><span class="string">while Ture:</span></span><br><span class="line"><span class="string">print(count)</span></span><br><span class="line"><span class="string">if count == 10:</span></span><br><span class="line"><span class="string">break</span></span><br><span class="line"><span class="string">count = count + 1</span></span><br><span class="line"><span class="string">else:</span></span><br><span class="line"><span class="string">print("代码块")</span></span><br><span class="line"><span class="string">print（"结束"）</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure></li><li><p>break (终止当前循环)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 通过break实现 1 ~ 10</span></span><br><span class="line">count = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">     print(count)</span><br><span class="line">     <span class="keyword">if</span> count == <span class="number">10</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">     count = count + <span class="number">1</span></span><br><span class="line">print(<span class="string">'结束'</span>)</span><br></pre></td></tr></table></figure></li><li><p>continue(本次循环如果遇到continue，则不再继续往下走，而是回到while条件位置)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">conunt = <span class="number">1</span></span><br><span class="line"><span class="keyword">while</span> count &lt;=<span class="number">10</span>:</span><br><span class="line">print(count)</span><br><span class="line">    <span class="keyword">continue</span></span><br><span class="line">    count = count + <span class="number">1</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="字符串格式化"><a href="#字符串格式化" class="headerlink" title="字符串格式化"></a>字符串格式化</h3><div class="note default"><ol><li>%s 直接做占位符</li></ol><ol start="2"><li>%d数字占位符</li></ol><ol start="3"><li>%% 表示%</li></ol></div><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><div class="note default"><ol><li><p>算数运算</p><p><img src="http://px8otgor7.bkt.clouddn.com/1553772559091.png" alt="1553772559091"></p></li><li><p>比较运算</p><p><img src="http://px8otgor7.bkt.clouddn.com/1553772625475.png" alt="1553772625475"></p></li><li><p>赋值运算</p><p><img src="http://px8otgor7.bkt.clouddn.com/1553772684358.png" alt="1553772684358"></p></li><li><p>逻辑运算</p><p><img src="http://px8otgor7.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720190911093033.png" alt="1553772718086"></p></li></ol><ol start="5"><li><p>优先级</p><p><img src="http://px8otgor7.bkt.clouddn.com/1553860034302.png" alt="1553860034302"></p></li></ol></div><h3 id="三元-目-运算"><a href="#三元-目-运算" class="headerlink" title="三元(目)运算"></a>三元(目)运算</h3><div class="note default"><ol><li><p>格式</p></li><li><p>示例</p></li><li><p>a = 1,b = 2 交换a,b变量</p><ul><li>a,b = b,a</li><li>c = a, b = a ,a = c</li></ul></li></ol></div><h3 id="书写规范"><a href="#书写规范" class="headerlink" title="书写规范"></a>书写规范</h3><div class="note default"><ol><li><p>PEP8规范</p><p><img src="http://px8otgor7.bkt.clouddn.com/1553743213820.png" alt="1553743213820"></p></li><li><p>特殊字符</p><ul><li><p>\n 换行</p></li><li><p>\t tab键（制表符）</p></li><li><p>\r 回到当前行起始位置—应用进度条</p></li></ul></li></ol><ol start="3"><li><p>pycharm自动生成头部代码</p><p><img src="http://px8otgor7.bkt.clouddn.com/1553825902283.png" alt="1553825902283"></p></li></ol></div><h3 id="项目结构目录"><a href="#项目结构目录" class="headerlink" title="项目结构目录"></a>项目结构目录</h3><div class="note default"><ol><li><p>项目调用书写规范</p><p><img src="http://px8otgor7.bkt.clouddn.com/1556460446489.png" alt="1556460446489"></p></li><li><p>单可执行文件</p><p><img src="http://px8otgor7.bkt.clouddn.com/1556460516586.png" alt="1556460516586"></p></li><li><p>多可执行文件</p><p><img src="http://px8otgor7.bkt.clouddn.com/1556460551711.png" alt="1556460551711"></p><ul><li>src —- 业务相关 比如 stdent.py core.py</li><li>lib —- 公用的类库</li><li>db —- 数据/库</li><li>config —- 配置</li><li>bin —- 可执行文件（根目录）</li><li>log —- 日志文件</li></ul></li></ol></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于Python中最基础的编码，变量，输入，输出，注释，判断语句，循环语句，运算符，三目运算等&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>计算机基础</title>
    <link href="http://www.danpinsuiyue.com/3347313358.html"/>
    <id>http://www.danpinsuiyue.com/3347313358.html</id>
    <published>2019-02-04T14:28:33.000Z</published>
    <updated>2019-10-25T13:02:07.708Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于认识计算机的基础硬件，操作系统，应用软件，故障分析，网络介绍及分类，网络介质和设备，OSI协议，IP协议</strong></p><a id="more"></a><h2 id="计算机基础"><a href="#计算机基础" class="headerlink" title="计算机基础"></a>计算机基础</h2><h3 id="认识计算机"><a href="#认识计算机" class="headerlink" title="认识计算机"></a>认识计算机</h3><div class="note default"><ol><li>计算机，俗称电脑，是现代一种用于高速计算的电子机器，可以进行数值运算</li><li>一台完整的计算机有硬件系统和软件系统组成</li><li>计算机分类<ul><li>超级计算机</li><li>工业控制计算机</li><li>网络计算机</li><li>个人计算机</li><li>嵌入式计算机</li></ul></li><li>计算机的发展<ul><li>第一代 电极管数字机</li><li>第二代 晶体管数字机</li><li>第三代 集成电路数字机</li><li>第四代 大规模集成电路</li></ul></li><li>冯.诺依曼 提出计算机体系<ul><li>计算机五部分</li><li>采用二进制形式表示数据和指令</li><li>数据和指令放到计算机中，随拿随用</li></ul></li></ol></div><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><div class="note default"><ol><li>负责运算和控制，计算机的大脑</li><li>参考指标<ul><li>主频 越高越快 运算能力</li><li>缓存 默认 三级，好的四级</li><li>核数 几个核数就是几个工人</li></ul></li><li>接口<ul><li>LGA 新式 铜片</li><li>PGA 老式 针式</li></ul></li><li>常见故障<ul><li>温度过高 死机 重启</li><li>超频</li></ul></li></ol></div><h3 id="硬盘"><a href="#硬盘" class="headerlink" title="硬盘"></a>硬盘</h3><div class="note default"><ol><li>负责存储数据<ul><li>永久存储</li><li>低速设备</li></ul></li><li>分类<ul><li>机械</li><li>固态</li></ul></li><li>参考指标<ul><li>容量</li><li>转速/读写速度</li><li>缓存大小</li></ul></li></ol></div><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><div class="note default"><ol><li>负责存储数据<ul><li>随机存储</li><li>高速设备</li></ul></li><li>参考指标<ul><li>容量</li><li>频率 越大内存越快</li></ul></li><li>常见故障<ul><li>电脑开不开机</li><li>用橡皮或者粗糙的纸擦一擦</li></ul></li></ol></div><h3 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h3><div class="note default"><ol><li>计算机的硬件平台</li><li>技术越高，可用时间越长</li></ol></div><h3 id="显卡"><a href="#显卡" class="headerlink" title="显卡"></a>显卡</h3><div class="note default"><ol><li>负责显示</li><li>参考指标<ul><li>显存</li><li>位宽 越大显卡越贵，性能越好，存取速度</li><li>频率</li></ul></li><li>人机对话的重要设备之一</li></ol></div><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><div class="note default"><ol><li>机箱<ul><li>抗辐射</li><li>散热好</li><li>满足扩展需求</li><li>分类：标准、加大</li></ul></li><li>电源<ul><li>计算机弱电</li><li>人体不能有静电</li><li>提供电源接口</li><li>电源功率</li></ul></li><li>网卡<ul><li>有线</li><li>无线</li></ul></li><li>声卡<ul><li>主板集成</li><li>也可以自己扩展</li></ul></li><li>显示器<ul><li>分辨率高的</li></ul></li></ol></div><h3 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h3><div class="note default"><ol><li>它是一段程序代码</li><li>计算机程序</li><li>负责管理硬件</li><li>负责驱动硬件</li><li>应用程序平台</li><li>常见操作系统<ul><li>微软Windows<ul><li>7/8/10 个人操作系统</li><li>2008/2012 网络版 应用服务器</li></ul></li><li>Linux<ul><li>Fedora 可以用于个人</li><li>centos</li><li>rhel</li><li>ubuntu 可以用于个人</li><li>suse</li></ul></li><li>Mac</li></ul></li></ol></div><h3 id="应用软件"><a href="#应用软件" class="headerlink" title="应用软件"></a>应用软件</h3><div class="note default"><ol><li>面向用户的计算机程序</li><li>处理某一方面工作</li></ol></div><h3 id="故障分析"><a href="#故障分析" class="headerlink" title="故障分析"></a>故障分析</h3><div class="note default"><ol><li>排除方法<ul><li>快速定位问题方向<ul><li>自检 是否出现Windows<ul><li>是 系统有问题</li><li>否 硬件故障<ul><li>主板 一般不会坏</li><li>CPU 一般不会坏</li><li>内存 替换法</li><li>显卡 替换法</li><li>硬盘 最容易坏</li></ul></li></ul></li></ul></li><li>排除法找硬件故障</li><li>通过PE备份数据，重装系统</li></ul></li></ol></div><h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="网络介绍及分类"><a href="#网络介绍及分类" class="headerlink" title="网络介绍及分类"></a>网络介绍及分类</h3><div class="note default"><ol><li>计算机网络是由<strong>通讯介质</strong>将<strong>地理位置不同</strong>的且<strong>相互独立</strong>的计算机连接起来，实现<strong>数据通讯</strong>与<strong>资源共享</strong></li><li>网络类型<ul><li>按拓扑分<ul><li>总线型 效率低 最早的</li><li>环形 几乎看不见</li><li>星型 线路单一，中央器压力大，产生单点故障</li><li>网型</li></ul></li><li>按地域 参照物不同，类型不同<ul><li>局域网 LAN</li><li>城域网 MAN</li><li>广域网 WAN</li></ul></li></ul></li></ol></div><h3 id="网络介质和设备"><a href="#网络介质和设备" class="headerlink" title="网络介质和设备"></a>网络介质和设备</h3><div class="note default"><ol><li><p>网络设备</p><ul><li>交换机 switch<ul><li>负责组件局域网，计算机到计算机的数据传输，研究的是<strong>MAC地址</strong> – 网卡48位二进制，全球唯一</li></ul></li><li>路由器 router<ul><li>负责组建广域网，网络到网络的数据传输，研究的是IP地址</li></ul></li></ul></li><li><p>通讯介质</p><ul><li><p>同轴电缆</p></li><li><p>双绞线 常用有线 理论最大传输距离100米，建议不要超过90米 超过这个距离，中间放一个中继器或交换机</p><ul><li>按速度分 5类、超5类（百兆）、6类（千兆）</li><li>按特点分 屏蔽和非屏蔽</li></ul></li><li><p>光纤 常用有线</p><ul><li><p>多模光纤：只能传输一种模式的光，传输距离远，是多模光纤的几十倍以上，单模光纤外面护套线颜色一般为黄色</p></li><li><p>单模光纤：可以传输多种模式的光，多模光纤传输的距离比较近，一般只有几千米，多模光纤外面颜色一般为橘红色</p></li><li><p><strong>光纤速度</strong></p><p>光纤的极限传输家用的普通光纤就可达到10Gbps以上。</p><p>实验室中单条光纤最大速度已达到了26Tbps，有消息说通过石墨烯制造的新光调制器，还可继续提高10000倍，即260Pbps。</p></li></ul></li><li><p>电磁信号</p></li><li><p>蓝牙</p></li></ul></li></ol></div><h3 id="OSI与ISO"><a href="#OSI与ISO" class="headerlink" title="OSI与ISO"></a>OSI与ISO</h3><div class="note default"><ol><li><p>ISO介绍</p><ul><li>国际标准化组织简称ISO，是一个全球性的非政府组织</li><li>中国国家技术监督局</li><li>1977年提出一个七层模型，主要用于数据库的访问</li></ul></li><li><p>OSI七层模型</p><ul><li>应用层 用户接口 HTTP</li><li>表示层 数据的表示、安全、压缩。（在五层模型里面已经合并到了应用层）</li><li>会话层 不同机器上的用户间 建立、管理、终止会话。（在五层模型里面已经合并到了应用层）</li><li>传输层 TCP协议 安全 速度慢 UDP协议 不安全 速度快</li><li>网络层 控制子网的运行 逻辑链路寻址 IP地址</li><li>数据链路层 物理寻址 交换机</li><li>物理层 传输的是信号</li><li>优点<ul><li>概念清楚、理论也比较完整，但他既复杂有不实用，ISO制定的OSI参考模型过于庞大，复杂招致了许多批评</li></ul></li></ul></li><li><p>TCP和IP四层</p><ul><li><p>包含 应用层（上三层）、传输层、网络层、网络接口层（下两层），不过从实质上讲，TCP/IP只有最上面的三次</p></li><li><p>网络接口层</p><ul><li>操作系统中的设备驱动程序和计算机中对应的网络接口层</li></ul></li><li><p>应用层</p><ul><li><p>负责处理特定的应用程序细节。几乎各种不同的 TCP/IP实现都会提供下面这些通用的应用程序:</p></li><li><p>Telnet 远程登录。</p><p>FTP 文件传输协议。</p><p>SMTP 简单邮件传送协议。</p><p>SNMP 简单网络管理协议。</p></li></ul></li><li><p>网络层</p><ul><li>有时也称作互联网层，处理分组在网络中的活动，例如分组的选路。在TCP/IP协议族中，网络层协议包括IP协议(网际协议)，ICMP协议(Internet互联网控制报文协议 ，以及IGMP协议(Internet组管理协议 )。</li></ul></li></ul></li></ol></div><h3 id="TCP和UDP"><a href="#TCP和UDP" class="headerlink" title="TCP和UDP"></a>TCP和UDP</h3><div class="note default"><ol><li><p>TCP</p><ul><li>TCP和 UDP 是两种最为著名的传输层协议，二者都使用 I P 作 为 网 络 层 协 议</li><li>尽管 TCP 和 UDP 都使用相同的网络层( IP )， TCP 却向应用层提供与 UDP 完全不同的服务。 TCP 提供一种面向连接的、可靠的字节流服务。</li></ul></li></ol><ol start="2"><li><p>TCP: 传输控制协议,面向连接的协议</p><ul><li><p>面向连接意味着两个使用 TCP 的 应 用 ( 通 常 是 一 个 客 户 和 一 个 服 务 器 ) 在 彼 此 交 换 数 据 之前必须先建立一个 TCP 连 接 。</p><p>一对一传输</p></li></ul></li><li><p>UDP协议</p><ul><li><p>UDP（User Datagram Protocol），用户数据报协议，是OSI(Open System Interconnection，开放式系统互联) 参考模型中一种无连接的传输层协议，提供面向事务的简单不可靠信息传送服务,UDP提供了无连接通信，适合于一次传输少量数据,UDP报文没有可靠性保证、顺序保证和流量控制字段等，可靠性较差。但是正因为UDP协议的控制选项较少，在数据传输过程中延迟小、数据传输效率高，适合对可靠性要求不高的应用程序，或者可以保障可靠性的应用程序，如DNS、TFTP、SNMP等。</p><p>可以一对一、一对多传输、多对一和多对多的交互通信</p></li></ul></li><li><p>TCP与UDP区别：</p><ul><li>TCP面向连接（如打电话要先拨号建立连接）;UDP是无连接的，即发送数据之前不需要建立连接</li><li>TCP提供可靠的服务。也就是说，通过TCP连接传送的数据，无差错，不丢失，不重复，且按序到达;UDP尽最大努力交付，即不保证可靠交付，Tcp通过校验和，重传控制，序号标识，滑动窗口、确认应答实现可靠传输。如丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。</li><li>UDP具有较好的实时性，工作效率比TCP高，适用于对高速传输和实时性有较高的通信或广播通信。</li><li>每一条TCP连接只能是点到点的;UDP支持一对一，一对多，多对一和多对多的交互通信</li><li>TCP对系统资源要求较多，UDP对系统资源要求较少。</li></ul></li></ol></div><h3 id="ip"><a href="#ip" class="headerlink" title="ip"></a>ip</h3><div class="note default"><ol><li>ip地址<ul><li>IP介绍</li><li>IPV4地址</li><li>IPV6地址</li><li>VLSM</li></ul></li><li>ip介绍<ul><li>IP是英文Internet Protocol的缩写，意思是“网络之间互连的协议”，也就是为计算机网络相互连接进行通信而设计的协议。在因特网中，它是能使连接到网上的所有计算机网络实现相互通信的一套规则，规定了计算机在因特网上进行通信时应当遵守的规则。任何厂家生产的计算机系统，只要遵守IP协议就可以与因特网互连互通。正是因为有了IP协议，因特网才得以迅速发展成为世界上最大的、开放的计算机通信网络。因此，IP协议也可以叫做“因特网协议”。</li><li>IP地址是指互联网协议地址，IP地址是IP协议提供的一种统一的地址格式，它为互联网上的每一个网络和每一台主机分配一个逻辑地址。大家日常见到的情况是每台联网的PC上都需要有IP地址，才能正常通信。我们可以把“个人电脑”比作“一台电话”，那么“IP地址”就相当于“电话号码”，而Internet中的路由器，就相当于电信局的“程控式交换机”。</li><li><strong>IP是一个协议，是计算机在网络中互联互通的规则</strong><br><strong>IP地址是IP实现互联互通的一个策略</strong></li></ul></li><li>ip地址和Mac地址<ul><li>IP地址是软件地址，而不是硬件地址。硬件地址被硬编码到网络接口卡(NIC)中，用于在本地 网络中寻找主机。 IP地址让一个网络中的主机能够与另一个网络中的主机通信，而不管这些主机所属的LAN是什么类型的。</li><li><strong>MAC用于局域网中通信，交换机通过mac地址将数据包转发到正确的计算机</strong></li><li><strong>IP用于网络间通信</strong></li></ul></li><li>ip地址的分类<ul><li>IPV4:32位二进制 以点分割，分为4段十进制数 a.b.c.d</li><li>IPV6:128位二进制 以冒号分割,分为8段十六进制数 <code>a​:b:​c:d:e:f:g:h</code></li></ul></li></ol></div><h3 id="ipv4"><a href="#ipv4" class="headerlink" title="ipv4"></a>ipv4</h3><div class="note default"><ol><li><p>ipv4地址</p><ul><li><p>IPV4地址长 32位，这些位被划分成 4组(称为字节或八位组)，每组8位,每组最大不超过255，我们可使用下面3种方法描述IP地址:</p></li><li><p>点分十进制表示，如 192.168.0.1。</p></li><li><p>二进制，如 11000000.10101000.00000000.00000001</p><p>十六进制，如 c0.a8.0.1。</p><p>上述示例表示的是同一个IP地址。对于IP编址时，十六进制表示没有点分十进制和二进制那样常用，但某些程序确实以十六进制形式存储IP地址， Windows注册表就将机器的IP地址存储为十六进制。</p></li></ul></li><li><p>地址分类</p><ul><li><p>按照第一段的范围分类</p><p>A 1-126</p><p>B 128-191</p><p>C 192-223</p><p>D 224-239</p><p>E 240-255</p></li><li><p>设计因特网的人决定根据网络规模创建网络类型。对于少量包含大量节点的网络，他们创建了A类网络;对于另一种极端情况的网络，他们创建了C类网络，用来指示大量只包含少量节点的网络; 介于超大型和超小型网络之间的是B类网络。所以IPV4五类地址中只有前三类可以分给用户试用，D类是多播地址，E类为保留地址，用于研究。</p></li><li><p>网络的类型决定了 IP地址将如何划分成网络部分和节点部分</p></li></ul></li><li><p>子网掩码</p><ul><li><p>子网掩码：区分IP地址的网络位和主机位</p><p>255.0.0.0</p><p>255.255.0.0</p><p>255.255.255.0</p><p>255.255.255.255</p></li><li><p>网络位:掩码对应的IP位的二进制部分，全为1的部分是网络位</p></li><li><p>主机位:掩码对应的IP位的二进制部分，不全为1的部分是主机位</p></li></ul></li><li><p>进制转换方法</p><ul><li>十进制转二进制: 除2取余倒着念</li><li>十进制转八进制: 除8取余倒着念</li><li>十进制转十六进制: 除16取余倒着念</li></ul></li><li><p>ip分配原则</p><ul><li><p>只有A、B、C三类地址可以分配给计算机和网络设备</p><p>网络地址相同主机地址必须唯一</p><p>网络地址的第一个数字不能为127，保留用来测试连接</p><p>网络地址不能全为0，也不能全为1.</p><p>主机地址中不能全为0，也不能全为1：主机地址全为0用来表示网络地址，全为1用作广播</p></li></ul></li></ol></div><h3 id="ipv6"><a href="#ipv6" class="headerlink" title="ipv6"></a>ipv6</h3><div class="note default"><ol><li><p>概念</p><ul><li>由于IPv4最大的问题在于网络地址资源有限，严重制约了互联网的应用和发展。IPv6的使用，不仅能解决网络地址资源数量的问题，而且也解决了多种接入设备连入互联网的障碍</li><li>互联网数字分配机构（IANA）在2016年已向国际互联网工程任务组（IETF）提出建议，要求新制定的国际互联网标准只支持IPv6，不再兼容IPv4。</li></ul><ol><li><p>ipv6组成</p><ul><li>IPv6的地址长度为128位，是IPv4地址长度的4倍。于是IPv4点分十进制格式不再适用，采用十六进制表示。</li></ul></li><li><p>分类</p><ul><li>单播地址（Unicast Address）<ul><li>用来标识一组接口（通常这组接口属于不同的节点），类似于IPv4中的组播地址。发送到组播地址的数据报文被传送给此地址所标识的所有接口。</li></ul></li><li>组播地址（Multicast Address）</li><li>任播地址（Anycast Address）</li></ul></li><li><p>特殊地址</p><ul><li><p>下面列出一些绝对应该牢记的地址范围，因为我们总是会用到它们。它们都是特殊地址或保留用 于特定目的的地址，但不同于 IPv4， IPv6提供的地址非常多，因此保留一些不会有任何害处。</p></li><li><p>IPV6为啥这么多年没广泛应用</p><ul><li>网络黑白名单需要时间去建立，否则网络威胁无法解决。</li><li>目前骨干线路已经全部使用了IPV6地址，随着物联网的出现，IPV6会更快完成替换。</li></ul></li></ul></li></ol></li></ol></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于认识计算机的基础硬件，操作系统，应用软件，故障分析，网络介绍及分类，网络介质和设备，OSI协议，IP协议&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>前端大道</title>
    <link href="http://www.danpinsuiyue.com/1377344835.html"/>
    <id>http://www.danpinsuiyue.com/1377344835.html</id>
    <published>2019-02-04T14:26:02.000Z</published>
    <updated>2019-10-25T13:02:25.825Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于本博客空间关于前端基础的所有博文目录</strong></p><a id="more"></a><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于本博客空间关于前端基础的所有博文目录&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端" scheme="http://www.danpinsuiyue.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>Linux基础目录</title>
    <link href="http://www.danpinsuiyue.com/3415104752.html"/>
    <id>http://www.danpinsuiyue.com/3415104752.html</id>
    <published>2019-02-04T14:25:13.000Z</published>
    <updated>2019-10-25T12:46:44.294Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于本博客空间关于Linux基础的所有博文目录</strong></p><a id="more"></a><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于本博客空间关于Linux基础的所有博文目录&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Linux" scheme="http://www.danpinsuiyue.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python博文目录</title>
    <link href="http://www.danpinsuiyue.com/4138033636.html"/>
    <id>http://www.danpinsuiyue.com/4138033636.html</id>
    <published>2019-02-04T14:24:39.000Z</published>
    <updated>2019-10-26T11:07:01.954Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p><strong>摘要：</strong></p><p>​ <strong>本博文主要介绍关于本博客空间关于Python相关的所有博文目录</strong></p><a id="more"></a><h4 id="1、计算机基础"><a href="#1、计算机基础" class="headerlink" title="1、计算机基础"></a><a href="https://www.danpinsuiyue.com/3347313358.html">1、计算机基础</a></h4><h4 id="2、python入门"><a href="#2、python入门" class="headerlink" title="2、python入门"></a><a href="https://www.danpinsuiyue.com/228520744.html">2、python入门</a></h4><h4 id="3、Python中基础数据类型"><a href="#3、Python中基础数据类型" class="headerlink" title="3、Python中基础数据类型"></a><a href="https://www.danpinsuiyue.com/1798410932.html">3、Python中基础数据类型</a></h4><h4 id="4、hash是个什么东东"><a href="#4、hash是个什么东东" class="headerlink" title="4、hash是个什么东东"></a><a href="https://www.danpinsuiyue.com/2852062086.html">4、hash是个什么东东</a></h4><h4 id="5、Python的那个文件操作"><a href="#5、Python的那个文件操作" class="headerlink" title="5、Python的那个文件操作"></a><a href="https://www.danpinsuiyue.com/156538331.html">5、Python的那个文件操作</a></h4><h4 id="6、Python函数基础"><a href="#6、Python函数基础" class="headerlink" title="6、Python函数基础"></a><a href="https://www.danpinsuiyue.com/637384435.html">6、Python函数基础</a></h4><h4 id="7、Python函数的高级"><a href="#7、Python函数的高级" class="headerlink" title="7、Python函数的高级"></a><a href="https://www.danpinsuiyue.com/1705878977.html">7、Python函数的高级</a></h4><h4 id="8、python模块介绍"><a href="#8、python模块介绍" class="headerlink" title="8、python模块介绍"></a><a href="https://www.danpinsuiyue.com/2936349916.html">8、python模块介绍</a></h4><h4 id="9、Python基础模块大全"><a href="#9、Python基础模块大全" class="headerlink" title="9、Python基础模块大全"></a><a href="https://www.danpinsuiyue.com/2354286169.html">9、Python基础模块大全</a></h4><h4 id="10、Python中的面向对象是谁的对象"><a href="#10、Python中的面向对象是谁的对象" class="headerlink" title="10、Python中的面向对象是谁的对象"></a><a href="https://www.danpinsuiyue.com/3427980016.html">10、Python中的面向对象是谁的对象</a></h4><h4 id="11、深入面向对象"><a href="#11、深入面向对象" class="headerlink" title="11、深入面向对象"></a><a href="https://www.danpinsuiyue.com/3850728436.html">11、深入面向对象</a></h4><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;&lt;strong&gt;摘要：&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;​ &lt;strong&gt;本博文主要介绍关于本博客空间关于Python相关的所有博文目录&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/categories/Python/"/>
    
    
      <category term="Python" scheme="http://www.danpinsuiyue.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.danpinsuiyue.com/1243066710.html"/>
    <id>http://www.danpinsuiyue.com/1243066710.html</id>
    <published>2018-12-31T16:00:00.000Z</published>
    <updated>2019-09-17T14:39:28.352Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;!-- build time:Fri Nov 08 2019 14:48:38 GMT+0800 (GMT+08:00) --&gt;&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hex
      
    
    </summary>
    
    
  </entry>
  
</feed>
